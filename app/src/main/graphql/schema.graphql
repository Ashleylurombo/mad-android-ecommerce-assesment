# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

"Defines aggregation option fields."
interface AggregationOptionInterface {
    "The number of items that match the aggregation option."
    count: Int
    "The display label for an aggregation option."
    label: String
    "The internal ID that represents the value of the option."
    value: String!
}

interface CartAddressInterface {
    "The city specified for the billing or shipping address."
    city: String!
    "The company specified for the billing or shipping address."
    company: String
    "An object containing the country label and code."
    country: CartAddressCountry!
    "ID of the selected address from the customers address book."
    customer_address_id: Int
    "The first name of the customer or guest."
    firstname: String!
    "The last name of the customer or guest."
    lastname: String!
    "The ZIP or postal code of the billing or shipping address."
    postcode: String
    "An object containing the region label and code."
    region: CartAddressRegion
    "An array containing the street for the billing or shipping address."
    street: [String]!
    suburb: String
    "The telephone number for the billing or shipping address."
    telephone: String
}

"An interface for products in a cart."
interface CartItemInterface {
    "Get Salable Quantity of Simple Product From Cart"
    cart_item_stock: [CartItemStockDetails]
    "Defines gift registry item uid added to cart."
    giftregistry_item_uid: String
    id: String! @deprecated(reason: "Use `uid` instead.")
    "Contains details about the price of the item, including taxes and discounts."
    prices: CartItemPrices
    "Details about an item in the cart."
    product: ProductInterface!
    "The quantity of this item in the cart."
    quantity: Float!
    "The unique ID for a `CartItemInterface` object."
    uid: ID!
}

"Contains the full set of attributes that can be returned in a category search."
interface CategoryInterface {
    automatic_sorting: String
    available_sort_by: [String]
    "An array of breadcrumb items."
    breadcrumbs: [Breadcrumb]
    bulk_unlink: String
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Categories' is enabled."
    canonical_url: String
    category_button_text: String
    "A comma seperated list of child category Ids"
    category_children: String
    category_frontend_sitemap: Int
    "The lowest and highest product price in this category"
    category_min_max_price: CategoryPriceMinMax
    category_robots_index: String
    children_count: String
    "Contains a category CMS block."
    cms_block: CmsBlock
    column_breakpoint: Int
    "Category description as content JSON"
    contentJson: String
    "The timestamp indicating when the category was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    custom_layout_update_file: String
    "The attribute to use for sorting."
    default_sort_by: String
    "An optional description of the category."
    description: String
    display_mode: String
    exclude_in_search: Int
    filter_price_range: Float
    hero_products: String
    "An ID that uniquely identifies the category."
    id: Int @deprecated(reason: "Use `uid` instead.")
    image: String
    include_in_menu: Int
    internal_id: String
    is_anchor: Int
    is_exclude_cat: Int
    landing_page: Int
    "The depth of the category within the tree."
    level: Int
    menu_image: String
    menu_tags: String
    meta_description: String
    meta_keywords: String
    meta_title: String
    "The display name of the category."
    name: String
    page_type: Int
    "The full category path."
    path: String
    "The category path within the store."
    path_in_store: String
    "The position of the category relative to other categories at the same level in tree."
    position: Int
    "The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not."
    product_count: Int
    "The list of products assigned to the category."
    products(
        "The page of results to return. The default value is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default value is 20."
        pageSize: Int = 20,
        "The attributes to sort on, and whether to return the results in ascending or descending order."
        sort: ProductAttributeSortInput
    ): CategoryProducts
    redirect_path: String
    "Category SEO Content Area Attribute Value"
    seo_content_area: String
    solr_category_weight: Int
    "Indicates whether the category is staged for a future campaign."
    staged: Boolean!
    suppress_filters: Int
    tags: String
    thumbnail: String
    "The unique ID for a `CategoryInterface` object."
    uid: ID!
    "The timestamp indicating when the category was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "The URL key assigned to the category."
    url_key: String
    "The URL path assigned to the category."
    url_path: String
    "The part of the category URL that is appended after the url key"
    url_suffix: String
    visual_merchandiser_block_and_index: String
    "Returns record number, cms block identifier and plp index"
    visual_merchandiser_details: [CmsPlpIndex]
}

"Credit memo item details."
interface CreditMemoItemInterface {
    "Details about the final discount amount for the base product, including discounts on options."
    discounts: [Discount]
    "The unique ID for a `CreditMemoItemInterface` object."
    id: ID!
    "The order item the credit memo is applied to."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product, including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of refunded items."
    quantity_refunded: Float
}

"Contains basic information about a customizable option. It can be implemented by several types of configurable options."
interface CustomizableOptionInterface {
    "Option ID."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "The unique ID for a `CustomizableOptionInterface` object."
    uid: ID!
}

"Contains information about customizable product options."
interface CustomizableProductInterface {
    "An array of options for a customizable product."
    options: [CustomizableOptionInterface]
}

interface ErrorInterface {
    "The returned error message."
    message: String!
}

interface GiftRegistryDynamicAttributeInterface {
    "The internal ID of the dynamic attribute."
    code: ID!
    "The display name of the dynamic attribute."
    label: String!
    "A corresponding value for the code."
    value: String!
}

interface GiftRegistryDynamicAttributeMetadataInterface {
    "Indicates which group the dynamic attribute a member of."
    attribute_group: String!
    "The internal ID of the dynamic attribute."
    code: ID!
    "The selected input type for this dynamic attribute. The value can be one of several static or custom types."
    input_type: String!
    "Indicates whether the dynamic attribute is required."
    is_required: Boolean!
    "The display name of the dynamic attribute."
    label: String!
    "The order in which to display the dynamic attribute."
    sort_order: Int
}

interface GiftRegistryItemInterface {
    "The date the product was added to the gift registry."
    created_at: String!
    customizable_options: [SelectedCustomizableOption]
    giftregistry_item_uid: String
    "A brief message about the gift registry item."
    note: String
    "Details about the gift registry item."
    product: ProductInterface
    purchasers: [Purchaser]
    "The requested quantity of the product."
    quantity: Float!
    "The fulfilled quantity of the product."
    quantity_fulfilled: Float!
    "The unique ID of a gift registry item."
    uid: ID!
}

"Contains the status and any errors that encountered with the customer's gift register item."
interface GiftRegistryItemUserErrorInterface {
    "Indicates whether the attempt to move the cart items to the gift registry was successful."
    status: Boolean!
    "An array of errors encountered while moving items from the cart to the gift registry."
    user_errors: [GiftRegistryItemsUserError]!
}

"Contains the customer's gift registry."
interface GiftRegistryOutputInterface {
    "The gift registry."
    gift_registry: GiftRegistry
}

"Contains detailes about invoiced items."
interface InvoiceItemInterface {
    "Information about the final discount amount for the base product, including discounts on options."
    discounts: [Discount]
    "The unique ID for an `InvoiceItemInterface` object."
    id: ID!
    "Details about an individual order item."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of invoiced items."
    quantity_invoiced: Float
}

interface LayerFilterItemInterface {
    "The count of items per filter."
    items_count: Int @deprecated(reason: "Use `AggregationOption.count` instead.")
    "The label for a filter."
    label: String @deprecated(reason: "Use `AggregationOption.label` instead.")
    "The value of a filter request variable to be used in query."
    value_string: String @deprecated(reason: "Use `AggregationOption.value` instead.")
}

"Contains basic information about a product image or video."
interface MediaGalleryInterface {
    "Indicates whether the image is hidden from view."
    disabled: Boolean
    "The label of the product image or video."
    label: String
    "The media item's position after it has been sorted."
    position: Int
    "The URL of the product image or video."
    url: String
}

interface NegotiableQuoteAddressInterface {
    "The company's city or town."
    city: String!
    "The company name associated with the shipping/billing address."
    company: String
    "The company's country."
    country: NegotiableQuoteAddressCountry!
    "The first name of the company user."
    firstname: String!
    "The last name of the company user."
    lastname: String!
    "The company's ZIP or postal code."
    postcode: String
    "An object containing the region name, region code, and region ID."
    region: NegotiableQuoteAddressRegion
    "An array of strings that define the street number and name."
    street: [String]!
    "The customer's telephone number."
    telephone: String
}

interface NegotiableQuoteUidNonFatalResultInterface {
    "The unique ID of a `NegotiableQuote` object."
    quote_uid: ID!
}

"Order item details."
interface OrderItemInterface {
    "The final discount information for the product."
    discounts: [Discount]
    "Indicates whether the order item is eligible to be in a return request."
    eligible_for_return: Boolean
    "The entered option for the base product, such as a logo or image."
    entered_options: [OrderItemOption]
    "The selected gift wrapping for the order item."
    gift_wrapping: GiftWrapping
    "The unique ID for an `OrderItemInterface` object."
    id: ID!
    parent_sku: String
    "The initial price of the product inclusive of tax without discount"
    product_initial_sale_price: Money!
    "The name of the base product."
    product_name: String
    "The sale price of the base product, including selected options."
    product_sale_price: Money!
    "The sale price of the product inclusive of tax"
    product_sale_price_including_tax: Money!
    "The SKU of the base product."
    product_sku: String!
    "The type of product, such as simple, configurable, etc."
    product_type: String
    "URL key of the base product."
    product_url_key: String
    "The number of canceled items."
    quantity_canceled: Float
    "The number of invoiced items."
    quantity_invoiced: Float
    "The number of units ordered for this item."
    quantity_ordered: Float
    "The number of refunded items."
    quantity_refunded: Float
    "The number of returned items."
    quantity_returned: Float
    "The number of shipped items."
    quantity_shipped: Float
    scene_seven_image_url: String
    "The selected options for the base product, such as color or size."
    selected_options: [OrderItemOption]
    "The status of the order item."
    status: String
}

"Contains attributes specific to tangible products."
interface PhysicalProductInterface {
    "The weight of the item, in units defined by the store."
    weight: Float
}

"The ProductInterface contains attributes that are common to all types of products. Note that descriptions may not be available for custom and EAV attributes."
interface ProductInterface {
    about_the_brand: String
    "Array of additionally defined product attributes."
    additional_attributes: [AdditionalAttribute]!
    additional_tab_info: String
    additional_tab_info2: String
    additional_tab_info3: String
    additional_tab_info5: String
    "The attribute set assigned to the product."
    attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")
    "A list of badges applied to the product"
    badges: [ProductBadge]
    blog_author: Int
    blog_content: String
    blog_publish_date: String
    "The brand name for this product - MRP_Brand, MRPH_Brand or MRPS_Brand"
    brand: String
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled."
    canonical_url: String
    "The categories assigned to a product."
    categories: [CategoryInterface]
    "CMS block IDs for the top, middle and bottom of a PDP page."
    cms_blocks_top_middle_bottom: PDPcmsBlocks @deprecated(reason: "Use pdp_cms_blocks, caters for both PWA & APP")
    "A list of configurable product SKUs used to build product swatch cluster"
    configurable_product_swatch_cluster: [String]
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "An array of cross-sell products."
    crosssell_products: [ProductInterface]
    custom_special_text: String
    delivery_and_returns: String
    "Detailed information about the product. The value can include simple HTML tags."
    description: ComplexTextValue
    "Indicates whether a gift message is available."
    gift_message_available: String
    "The ID number assigned to the product."
    id: Int @deprecated(reason: "Use the `uid` field instead.")
    "The relative path to the main image on the product page."
    image: ProductImage
    image_content_type: String
    image_group_set: String
    image_product_code: String
    image_sequence_number: String
    is_essential: Int
    is_hero_product: Int
    "Indicates whether the product can be returned."
    is_returnable: String
    "A list of label phrase/text on the product"
    labels: [ProductLabel]
    left_badge: String
    left_badge_enabled: Int
    length: String
    "The Product made_to_order attribute."
    made_to_order: Boolean
    "A number representing the product's manufacturer."
    manufacturer: Int
    "An array of media gallery objects."
    media_gallery: [MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    "Mageplaza labels applied on the product"
    mp_label_data: [LabelRules]
    mrp_b_online_category: Int
    mrp_b_onlinesubcategory: Int
    mrp_bottom_size: Int
    mrp_brand: Int
    mrp_colour: Int
    mrp_colour_group: Int
    mrp_e_pattern: Int
    mrp_garment_length: Int
    mrp_neckline: Int
    mrp_occasion: Int
    mrp_online_baby_b_category: Int
    mrp_online_baby_b_sub_category: Int
    mrp_online_baby_g_category: Int
    mrp_online_baby_g_sub_category: Int
    mrp_online_bb_category: Int
    mrp_online_bb_sub_category: Int
    mrp_online_bg_category: Int
    mrp_online_bg_sub_category: Int
    mrp_online_category: Int
    mrp_online_m_category: Int
    mrp_online_m_sub_category: Int
    mrp_online_nursery_category: Int
    mrp_online_pb_category: Int
    mrp_online_pb_sub_category: Int
    mrp_online_pg_category: Int
    mrp_online_pg_sub_category: Int
    mrp_online_sub_category: Int
    mrp_pattern_mens_shirts: Int
    mrp_shape: Int
    mrp_shoe_size: Int
    mrp_shoesize_bigkids: Int
    mrp_shopbytrend: Int
    mrp_size: Int
    mrp_sleeve_length: Int
    mrp_underwear_l_size: Int
    mrp_underwear_size: Int
    mrph_bedding_size: Int
    mrph_brand: Int
    mrph_colour: Int
    mrph_colour_group: Int
    mrph_cushions_size: Int
    mrph_dimensions: Int
    mrph_fabric: Int
    mrph_shape: Int
    mrph_size: Int
    mrph_towels_size: Int
    mrph_window_coverings_size: Int
    mrpm_brands: Int
    "Color of the cellular product."
    mrpm_color: String
    mrpm_colour: Int
    "Network provider of the cellular product."
    mrpm_network_provider: Int
    "Size/Dimensions of cellular product if applicable."
    mrpm_size: Int
    "Internal SKU, not the same as the Magento fulfillment SKU."
    mrpm_sku: String
    mrps_brand: Int
    mrps_colour: Int
    mrps_colour_group: Int
    mrps_dimension: Int
    mrps_garment_length: Int
    mrps_neckline: Int
    mrps_size_outdoor_equip: Int
    mrps_size_outerwear: Int
    mrps_size_shoes: Int
    mrps_size_sports: Int
    mrps_size_underwear_bras: Int
    mrps_sub_category: Int
    mrps_sub_sub_category: Int
    mrps_underwear_bras: Int
    "The product name. Customers use this name to identify the product."
    name: String
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The end date for new product listings."
    new_to_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "Product stock only x left count"
    only_x_left_in_stock: Float
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    "Product parent SKU, this will be used for filtering of products."
    par_sku: String
    "PDP CMS blocks for various regions on the PDP page i.e. top, middle bottom etc."
    pdp_cms_blocks: [CmsBlock]
    "Indicates the price of an item."
    price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")
    "The range of prices for the product"
    price_range: PriceRange!
    "An array of `TierPrice` objects."
    price_tiers: [TierPrice]
    "An array of `ProductLinks` objects."
    product_links: [ProductLinksInterface]
    "Product Url of the product."
    product_url: String
    promo_image_url: String
    promo_text: String
    "The average of all the ratings given to the product."
    rating_summary: Float!
    "An array of related products."
    related_products: [ProductInterface]
    "The total count of all the reviews given to the product."
    review_count: Int!
    "The list of products reviews."
    reviews(
        "The page of results to return. The default is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): ProductReviews!
    right_badge_enabled: Int
    "Get Salable Quantity of Simple Product"
    salable_quantity: Float
    "The code assigned to the Scene7 image."
    scene_seven_image_url: String
    "A short description of the product. Its use depends on the theme."
    short_description: ComplexTextValue
    size_chart: String
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: ProductImage
    special_badge_image_name: String
    "The beginning date that a product has a special price."
    special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The discounted price of the product."
    special_price: Float
    special_price_badge: Int
    special_text: Int
    special_text_background_color: String
    special_text_bg_color_opacity: String
    "The end date for a product with a special price."
    special_to_date: String
    ss_brand: Int
    ss_colour_group: Int
    ss_dimensions: Int
    ss_size: Int
    "Indicates whether the product is staged for a future campaign."
    staged: Boolean!
    "Stock status of the product"
    stock_status: ProductStockStatus
    "The file name of a swatch image."
    swatch_image: String
    "The relative path to the product's thumbnail image."
    thumbnail: ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason: "Use `__typename` instead.")
    "The unique ID for a `ProductInterface` object."
    uid: ID!
    "Timestamp indicating when the product was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "An array of up-sell products."
    upsell_products: [ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    "An array of websites in which the product is available."
    websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
}

"Contains information about linked products, including the link type and product type of each item."
interface ProductLinksInterface {
    "One of related, associated, upsell, or crosssell."
    link_type: String
    "The SKU of the linked product."
    linked_product_sku: String
    "The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable)."
    linked_product_type: String
    "The position within the list of product links."
    position: Int
    "The identifier of the linked product."
    sku: String
}

"The interface for requisition list items."
interface RequisitionListItemInterface {
    "Selected custom options for an item in the requisition list."
    customizable_options: [SelectedCustomizableOption]!
    "Details about a requisition list item."
    product: ProductInterface!
    "The amount added."
    quantity: Float!
    "The unique ID for the requisition list item."
    uid: ID!
}

"Routable entities serve as the model for a rendered page."
interface RoutableInterface {
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
}

"Order shipment item details."
interface ShipmentItemInterface {
    "The unique ID for a `ShipmentItemInterface` object."
    id: ID!
    "The order item associated with the shipment item."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of shipped items."
    quantity_shipped: Float!
}

interface SwatchDataInterface {
    "The value can be represented as color (HEX code), image link, or text."
    value: String
}

interface SwatchLayerFilterItemInterface {
    "Data required to render a swatch filter item."
    swatch_data: SwatchData
}

"The interface for wish list items."
interface WishlistItemInterface {
    "The date and time the item was added to the wish list."
    added_at: String!
    "Custom options selected for the wish list item."
    customizable_options: [SelectedCustomizableOption]!
    "The description of the item."
    description: String
    "The unique ID for a `WishlistItemInterface` object."
    id: ID!
    "Product details of the wish list item."
    product: ProductInterface
    "The quantity of this wish list item."
    quantity: Float!
}

union CloseNegotiableQuoteError = InternalError | NegotiableQuoteInvalidStateError | NoSuchEntityUidError

union CloseNegotiableQuoteOperationResult = CloseNegotiableQuoteOperationFailure | NegotiableQuoteUidOperationSuccess

union CompanyStructureEntity = CompanyTeam | Customer

union DeleteNegotiableQuoteError = InternalError | NegotiableQuoteInvalidStateError | NoSuchEntityUidError

union DeleteNegotiableQuoteOperationResult = DeleteNegotiableQuoteOperationFailure | NegotiableQuoteUidOperationSuccess

type AbstractedShippingMethod {
    amount: Money
    available: Boolean
    carrier_code: String!
    carrier_title: String!
    error_message: String
    estimated_delivery_date: String
    estimated_delivery_date_formatted: String
    method_code: String
    method_title: String
    method_type: String!
    shipping_terms: String
    volumetric: Boolean
    working_days: String
}

type ActivatePlanButton {
    "The text for the activate plan button if the customer has a linked mrp money account."
    active_mrp_account_text: String!
    "The text for the activate plan button if the custoemr does not have a linked mrp money account."
    non_active_mrp_account_text: String!
    "The url for the non_activate_mrp_account_text button. Only used for customers that do not have a linked mrp money account."
    registration_form_url: String!
}

"Contains details about the cart after adding bundle products."
type AddBundleProductsToCartOutput {
    "The cart after adding products."
    cart: Cart!
}

"Contains details about the cart after adding configurable products."
type AddConfigurableProductsToCartOutput {
    "The cart after adding products."
    cart: Cart!
}

"Contains details about the cart after adding downloadable products."
type AddDownloadableProductsToCartOutput {
    "The cart after adding products."
    cart: Cart!
}

"Contains the results of a request to add registrants."
type AddGiftRegistryRegistrantsOutput {
    "The gift registry after adding registrants."
    gift_registry: GiftRegistry
}

"Contains details about the cart after adding products to it."
type AddProductsToCartOutput {
    "The cart after products have been added."
    cart: Cart!
    "Contains errors encountered while adding an item to the cart."
    user_errors: [CartUserInputError]!
}

"Output of the request to add products to a requisition list."
type AddProductsToRequisitionListOutput {
    "The requisition list after adding products."
    requisition_list: RequisitionList
}

"Contains the customer's wish list and any errors encountered."
type AddProductsToWishlistOutput {
    "An array of errors encountered while adding products to a wish list."
    user_errors: [WishListUserInputError]!
    "Contains the wish list with all items that were successfully added."
    wishlist: Wishlist!
}

"Contains details about why an attempt to add items to the requistion list failed."
type AddRequisitionListItemToCartUserError {
    "A description of the error."
    message: String!
    "The type of error that occurred."
    type: AddRequisitionListItemToCartUserErrorType!
}

"Output of the request to add items in a requisition list to the cart."
type AddRequisitionListItemsToCartOutput {
    "Details about why the attempt to add items to the requistion list was not successful."
    add_requisition_list_items_to_cart_user_errors: [AddRequisitionListItemToCartUserError]!
    "The cart after adding requisition list items."
    cart: Cart
    "Indicates whether the attempt to add items to the requisition list was successful."
    status: Boolean!
}

"Contains details about the return request."
type AddReturnCommentOutput {
    "The modified return."
    return: Return
}

"Contains the response after adding tracking information."
type AddReturnTrackingOutput {
    "Details about the modified return."
    return: Return
    "Details about shipping for a return."
    return_shipping_tracking: ReturnShippingTracking
}

"Contains details about the cart after adding simple or group products."
type AddSimpleProductsToCartOutput {
    "The cart after adding products."
    cart: Cart!
}

"Contains details about the cart after adding virtual products."
type AddVirtualProductsToCartOutput {
    "The cart after adding products."
    cart: Cart!
}

"Contains the resultant wish list and any error information."
type AddWishlistItemsToCartOutput {
    "An array of errors encountered while adding products to the customer's cart."
    add_wishlist_items_to_cart_user_errors: [WishlistCartUserInputError]!
    "Indicates whether the attempt to add items to the customer's cart was successful."
    status: Boolean!
    "Contains the wish list with all items that were successfully added."
    wishlist: Wishlist!
}

type AdditionalAttribute {
    code: String!
    label: String
    value: String
}

type AdditionalCardAttribute {
    cc_exp_month: String!
    cc_exp_year: String!
    cc_last4: String!
    cc_type: String!
}

type AdditionalCardAttributeData {
    cc_exp_month: String!
    cc_exp_year: String!
    cc_last4: String!
    cc_type: String!
}

type AdditionalInformation {
    barCode: String
    docketMessage: String
    openAccountMessage: String
    returnsPolicy: ReturnsPolicy
    thankYouMessage: String
}

type Address {
    addressLine: [String]
}

"Contains information for each filterable option (such as price, category `UID`, and custom attributes)."
type Aggregation {
    "Attribute code of the aggregation group."
    attribute_code: String!
    "The number of options in the aggregation group."
    count: Int
    "The aggregation display name."
    label: String
    "Array of options for the aggregation."
    options: [AggregationOption]
    "The relative position of the attribute in a layered navigation block."
    position: Int
}

"An implementation of `AggregationOptionInterface`."
type AggregationOption implements AggregationOptionInterface {
    "The number of items that match the aggregation option."
    count: Int
    "The display label for an aggregation option."
    label: String
    "The internal ID that represents the value of the option."
    value: String!
}

"Contains the applied coupon code."
type AppliedCoupon {
    "The coupon code the shopper applied to the card."
    code: String!
}

"Contains an applied gift card with applied and remaining balance."
type AppliedGiftCard {
    "The amount applied to the current cart."
    applied_balance: Money
    "The gift card account code."
    code: String
    "The remaining balance on the gift card."
    current_balance: Money
    "The expiration date of the gift card."
    expiration_date: String
}

"Contains the applied and current balances."
type AppliedStoreCredit {
    "The applied store credit balance to the current cart."
    applied_balance: Money
    "The current balance remaining on store credit."
    current_balance: Money
    "Indicates whether store credits are enabled. If the feature is disabled, then the current balance will not be returned."
    enabled: Boolean
}

"Contains details about the cart after applying a coupon."
type ApplyCouponToCartOutput {
    "The cart after applying a coupon."
    cart: Cart!
}

"Defines the possible output for the `applyGiftCardToCart` mutation."
type ApplyGiftCardToCartOutput {
    "Describes the contents of the specified shopping cart."
    cart: Cart!
}

"Contains the customer cart."
type ApplyRewardPointsToCartOutput {
    "The customer cart after reward points are applied."
    cart: Cart!
}

"Defines the possible output for the `applyStoreCreditToCart` mutation."
type ApplyStoreCreditToCartOutput {
    "The contents of the specified shopping cart."
    cart: Cart!
}

"Contains the results of the request to assign a compare list."
type AssignCompareListToCustomerOutput {
    "The contents of the customer's compare list."
    compare_list: CompareList
    "Indicates whether the compare list was successfully assigned to the customer."
    result: Boolean!
}

"Contains details about the attribute, including the code and type."
type Attribute {
    "The unique identifier for an attribute code. This value should be in lowercase letters without spaces."
    attribute_code: String
    "Attribute options list."
    attribute_options: [AttributeOption]
    "The data type of the attribute."
    attribute_type: String
    "The type of entity that defines the attribute."
    entity_type: String
    "The frontend input type of the attribute."
    input_type: String
    "Details about the storefront properties configured for the attribute."
    storefront_properties: StorefrontProperties
}

"Defines an attribute option."
type AttributeOption {
    "The label assigned to the attribute option."
    label: String
    "The attribute option value."
    value: String
}

"MRP Money account balance check and payment (authorisation)"
type AuthenticateProcessCreditAccountPaymentResponse {
    "Customers account number"
    accountNumber: String
    "Authorisation number returned from the creditors system"
    authNumber: String
    "Customers open to buy value"
    creditAvailable: Float
    "Customers current account balance"
    currentBalance: Float
    "Division the account facility is registered under"
    division: String
    "The type of account"
    facility: String
    "The (database) time taken to process the request"
    requestProcessingTime: String!
    "Staff discount, if any"
    staffDiscount: String
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "The message to display to the UI, if any"
    uiMessage: String
    "Web-friendly description of the account facility"
    webDescription: String
}

"MRP Money account balance check and payment (authorisation)"
type AuthenticateProcessGiftCardPaymentResponse {
    "Authorisation number returned from the creditors system"
    authNumber: String
    "Customers open to buy value"
    creditAvailable: Float
    "Error message from creditors system"
    errorMessage: String
    "Customers account number"
    giftCardNumber: String
    "The (database) time taken to process the request"
    requestProcessingTime: String!
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "The message to display to the UI, if any"
    uiMessage: String
}

"Describes a payment method that the shopper can use to pay for the order."
type AvailablePaymentMethod {
    "The payment method code."
    code: String!
    description: String
    image: String
    "The payment method title."
    title: String!
    type: PaymentMethodType
}

"Contains details about the possible shipping methods and carriers."
type AvailableShippingMethod {
    "The cost of shipping using this shipping method."
    amount: Money!
    "Indicates whether this shipping method can be applied to the cart."
    available: Boolean!
    base_amount: Money @deprecated(reason: "The field should not be used on the storefront.")
    "A string that identifies a commercial carrier or an offline shipping method."
    carrier_code: String!
    "The label for the carrier code."
    carrier_title: String!
    "Describes an error condition."
    error_message: String
    estimated_delivery_date: String
    estimated_delivery_date_formatted: String
    "A shipping method code associated with a carrier. The value could be null if no method is available."
    method_code: String
    "The label for the shipping method code. The value could be null if no method is available."
    method_title: String
    method_type: String!
    "The cost of shipping using this shipping method, excluding tax."
    price_excl_tax: Money!
    "The cost of shipping using this shipping method, including tax."
    price_incl_tax: Money!
    shipping_terms: String
    volumetric: Boolean
    working_days: String
}

"Result of the business-to-business application request"
type B2BCreateApplicationResponse {
    "Application ID as created in MRPG EOS"
    applicationId: Int
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "The message to display to the UI, if any"
    uiMessage: String
}

type Base64Encoded {
    "Base64 encoded PDF"
    base64encoded_pdf: String
    "Base64 encoded PDF"
    request_details: String
}

"Contains details about the billing address."
type BillingCartAddress implements CartAddressInterface {
    "The city specified for the billing or shipping address."
    city: String!
    "The company specified for the billing or shipping address."
    company: String
    "An object containing the country label and code."
    country: CartAddressCountry!
    "ID of the selected address from the customers address book."
    customer_address_id: Int
    customer_notes: String @deprecated(reason: "The field is used only in shipping address.")
    "The first name of the customer or guest."
    firstname: String!
    "The last name of the customer or guest."
    lastname: String!
    "The ZIP or postal code of the billing or shipping address."
    postcode: String
    "An object containing the region label and code."
    region: CartAddressRegion
    "The RSA ID Number used to RICA a SIM card"
    rica_rsa_id_number: String
    "An array containing the street for the billing or shipping address."
    street: [String]!
    suburb: String
    "The telephone number for the billing or shipping address."
    telephone: String
}

"Contains details about an individual category that comprises a breadcrumb."
type Breadcrumb {
    "The ID of the category."
    category_id: Int @deprecated(reason: "Use `category_uid` instead.")
    "The category level."
    category_level: Int
    "The display name of the category."
    category_name: String
    "The unique ID for a `Breadcrumb` object."
    category_uid: ID!
    "The URL key of the category."
    category_url_key: String
    "The URL path of the category."
    category_url_path: String
}

"An implementation for bundle product cart items."
type BundleCartItem implements CartItemInterface {
    "The list of available gift wrapping options for the cart item."
    available_gift_wrapping: [GiftWrapping]!
    "An array containing the bundle options the shopper selected."
    bundle_options: [SelectedBundleOption]!
    "Get Salable Quantity of Simple Product From Cart"
    cart_item_stock: [CartItemStockDetails]
    "An array containing the customizable options the shopper selected."
    customizable_options: [SelectedCustomizableOption]!
    "The entered gift message for the cart item"
    gift_message: GiftMessage
    "The selected gift wrapping for the cart item."
    gift_wrapping: GiftWrapping
    "Defines gift registry item uid added to cart."
    giftregistry_item_uid: String
    id: String! @deprecated(reason: "Use `uid` instead.")
    "Contains details about the price of the item, including taxes and discounts."
    prices: CartItemPrices
    "Details about an item in the cart."
    product: ProductInterface!
    "The quantity of this item in the cart."
    quantity: Float!
    "The unique ID for a `CartItemInterface` object."
    uid: ID!
}

"Defines bundle product options for `CreditMemoItemInterface`."
type BundleCreditMemoItem implements CreditMemoItemInterface {
    "A list of bundle options that are assigned to a bundle product that is part of a credit memo."
    bundle_options: [ItemSelectedBundleOption]
    "Details about the final discount amount for the base product, including discounts on options."
    discounts: [Discount]
    "The unique ID for a `CreditMemoItemInterface` object."
    id: ID!
    "The order item the credit memo is applied to."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product, including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of refunded items."
    quantity_refunded: Float
}

"Defines bundle product options for `InvoiceItemInterface`."
type BundleInvoiceItem implements InvoiceItemInterface {
    "A list of bundle options that are assigned to an invoiced bundle product."
    bundle_options: [ItemSelectedBundleOption]
    "Information about the final discount amount for the base product, including discounts on options."
    discounts: [Discount]
    "The unique ID for an `InvoiceItemInterface` object."
    id: ID!
    "Details about an individual order item."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of invoiced items."
    quantity_invoiced: Float
}

"Defines an individual item within a bundle product."
type BundleItem {
    "An ID assigned to each type of item in a bundle product."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "An array of additional options for this bundle item."
    options: [BundleItemOption]
    "A number indicating the sequence order of this item compared to the other bundle items."
    position: Int
    "Indicates whether the item must be included in the bundle."
    required: Boolean
    "The SKU of the bundle product."
    sku: String
    "The display name of the item."
    title: String
    "The input type that the customer uses to select the item. Examples include radio button and checkbox."
    type: String
    "The unique ID for a `BundleItem` object."
    uid: ID
}

"Defines the characteristics that comprise a specific bundle item and its options."
type BundleItemOption {
    "Indicates whether the customer can change the number of items for this option."
    can_change_quantity: Boolean
    "The ID assigned to the bundled item option."
    id: Int @deprecated(reason: "Use `uid` instead")
    "Indicates whether this option is the default option."
    is_default: Boolean
    "The text that identifies the bundled item option."
    label: String
    "When a bundle item contains multiple options, the relative position of this option compared to the other options."
    position: Int
    "The price of the selected option."
    price: Float
    "One of FIXED, PERCENT, or DYNAMIC."
    price_type: PriceTypeEnum
    "Contains details about this product option."
    product: ProductInterface
    "Indicates the quantity of this specific bundle item."
    qty: Float @deprecated(reason: "Use `quantity` instead.")
    "The quantity of this specific bundle item."
    quantity: Float
    "The unique ID for a `BundleItemOption` object."
    uid: ID!
}

"Defines bundle product options for `OrderItemInterface`."
type BundleOrderItem implements OrderItemInterface {
    "A list of bundle options that are assigned to the bundle product."
    bundle_options: [ItemSelectedBundleOption]
    "The final discount information for the product."
    discounts: [Discount]
    "Indicates whether the order item is eligible to be in a return request."
    eligible_for_return: Boolean
    "The entered option for the base product, such as a logo or image."
    entered_options: [OrderItemOption]
    "The selected gift wrapping for the order item."
    gift_wrapping: GiftWrapping
    "The unique ID for an `OrderItemInterface` object."
    id: ID!
    parent_sku: String
    "The initial price of the product inclusive of tax without discount"
    product_initial_sale_price: Money!
    "The name of the base product."
    product_name: String
    "The sale price of the base product, including selected options."
    product_sale_price: Money!
    "The sale price of the product inclusive of tax"
    product_sale_price_including_tax: Money!
    "The SKU of the base product."
    product_sku: String!
    "The type of product, such as simple, configurable, etc."
    product_type: String
    "URL key of the base product."
    product_url_key: String
    "The number of canceled items."
    quantity_canceled: Float
    "The number of invoiced items."
    quantity_invoiced: Float
    "The number of units ordered for this item."
    quantity_ordered: Float
    "The number of refunded items."
    quantity_refunded: Float
    "The number of returned items."
    quantity_returned: Float
    "The number of shipped items."
    quantity_shipped: Float
    scene_seven_image_url: String
    "The selected options for the base product, such as color or size."
    selected_options: [OrderItemOption]
    "The status of the order item."
    status: String
}

"Defines basic features of a bundle product and contains multiple BundleItems."
type BundleProduct implements CustomizableProductInterface & PhysicalProductInterface & ProductInterface & RoutableInterface {
    about_the_brand: String
    "Array of additionally defined product attributes."
    additional_attributes: [AdditionalAttribute]!
    additional_tab_info: String
    additional_tab_info2: String
    additional_tab_info3: String
    additional_tab_info5: String
    "The attribute set assigned to the product."
    attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")
    "A list of badges applied to the product"
    badges: [ProductBadge]
    blog_author: Int
    blog_content: String
    blog_publish_date: String
    "The brand name for this product - MRP_Brand, MRPH_Brand or MRPS_Brand"
    brand: String
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled."
    canonical_url: String
    "The categories assigned to a product."
    categories: [CategoryInterface]
    "CMS block IDs for the top, middle and bottom of a PDP page."
    cms_blocks_top_middle_bottom: PDPcmsBlocks @deprecated(reason: "Use pdp_cms_blocks, caters for both PWA & APP")
    "A list of configurable product SKUs used to build product swatch cluster"
    configurable_product_swatch_cluster: [String]
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "An array of cross-sell products."
    crosssell_products: [ProductInterface]
    custom_special_text: String
    delivery_and_returns: String
    "Detailed information about the product. The value can include simple HTML tags."
    description: ComplexTextValue
    "Indicates whether the bundle product has a dynamic price."
    dynamic_price: Boolean
    "Indicates whether the bundle product has a dynamic SKU."
    dynamic_sku: Boolean
    "Indicates whether the bundle product has a dynamically calculated weight."
    dynamic_weight: Boolean
    "Indicates whether a gift message is available."
    gift_message_available: String
    "The ID number assigned to the product."
    id: Int @deprecated(reason: "Use the `uid` field instead.")
    "The relative path to the main image on the product page."
    image: ProductImage
    image_content_type: String
    image_group_set: String
    image_product_code: String
    image_sequence_number: String
    is_essential: Int
    is_hero_product: Int
    "Indicates whether the product can be returned."
    is_returnable: String
    "An array containing information about individual bundle items."
    items: [BundleItem]
    "A list of label phrase/text on the product"
    labels: [ProductLabel]
    left_badge: String
    left_badge_enabled: Int
    length: String
    "The Product made_to_order attribute."
    made_to_order: Boolean
    "A number representing the product's manufacturer."
    manufacturer: Int
    "An array of media gallery objects."
    media_gallery: [MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    "Mageplaza labels applied on the product"
    mp_label_data: [LabelRules]
    mrp_b_online_category: Int
    mrp_b_onlinesubcategory: Int
    mrp_bottom_size: Int
    mrp_brand: Int
    mrp_colour: Int
    mrp_colour_group: Int
    mrp_e_pattern: Int
    mrp_garment_length: Int
    mrp_neckline: Int
    mrp_occasion: Int
    mrp_online_baby_b_category: Int
    mrp_online_baby_b_sub_category: Int
    mrp_online_baby_g_category: Int
    mrp_online_baby_g_sub_category: Int
    mrp_online_bb_category: Int
    mrp_online_bb_sub_category: Int
    mrp_online_bg_category: Int
    mrp_online_bg_sub_category: Int
    mrp_online_category: Int
    mrp_online_m_category: Int
    mrp_online_m_sub_category: Int
    mrp_online_nursery_category: Int
    mrp_online_pb_category: Int
    mrp_online_pb_sub_category: Int
    mrp_online_pg_category: Int
    mrp_online_pg_sub_category: Int
    mrp_online_sub_category: Int
    mrp_pattern_mens_shirts: Int
    mrp_shape: Int
    mrp_shoe_size: Int
    mrp_shoesize_bigkids: Int
    mrp_shopbytrend: Int
    mrp_size: Int
    mrp_sleeve_length: Int
    mrp_underwear_l_size: Int
    mrp_underwear_size: Int
    mrph_bedding_size: Int
    mrph_brand: Int
    mrph_colour: Int
    mrph_colour_group: Int
    mrph_cushions_size: Int
    mrph_dimensions: Int
    mrph_fabric: Int
    mrph_shape: Int
    mrph_size: Int
    mrph_towels_size: Int
    mrph_window_coverings_size: Int
    mrpm_brands: Int
    "Color of the cellular product."
    mrpm_color: String
    mrpm_colour: Int
    "Network provider of the cellular product."
    mrpm_network_provider: Int
    "Size/Dimensions of cellular product if applicable."
    mrpm_size: Int
    "Internal SKU, not the same as the Magento fulfillment SKU."
    mrpm_sku: String
    mrps_brand: Int
    mrps_colour: Int
    mrps_colour_group: Int
    mrps_dimension: Int
    mrps_garment_length: Int
    mrps_neckline: Int
    mrps_size_outdoor_equip: Int
    mrps_size_outerwear: Int
    mrps_size_shoes: Int
    mrps_size_sports: Int
    mrps_size_underwear_bras: Int
    mrps_sub_category: Int
    mrps_sub_sub_category: Int
    mrps_underwear_bras: Int
    "The product name. Customers use this name to identify the product."
    name: String
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The end date for new product listings."
    new_to_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "Product stock only x left count"
    only_x_left_in_stock: Float
    "An array of options for a customizable product."
    options: [CustomizableOptionInterface]
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    "Product parent SKU, this will be used for filtering of products."
    par_sku: String
    "PDP CMS blocks for various regions on the PDP page i.e. top, middle bottom etc."
    pdp_cms_blocks: [CmsBlock]
    "Indicates the price of an item."
    price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")
    "The range of prices for the product"
    price_range: PriceRange!
    "An array of `TierPrice` objects."
    price_tiers: [TierPrice]
    "One of PRICE_RANGE or AS_LOW_AS."
    price_view: PriceViewEnum
    "An array of `ProductLinks` objects."
    product_links: [ProductLinksInterface]
    "Product Url of the product."
    product_url: String
    promo_image_url: String
    promo_text: String
    "The average of all the ratings given to the product."
    rating_summary: Float!
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "An array of related products."
    related_products: [ProductInterface]
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "The total count of all the reviews given to the product."
    review_count: Int!
    "The list of products reviews."
    reviews(
        "The page of results to return. The default is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): ProductReviews!
    right_badge_enabled: Int
    "Get Salable Quantity of Simple Product"
    salable_quantity: Float
    "The code assigned to the Scene7 image."
    scene_seven_image_url: String
    "Indicates whether to ship bundle items together or individually."
    ship_bundle_items: ShipBundleItemsEnum
    "A short description of the product. Its use depends on the theme."
    short_description: ComplexTextValue
    size_chart: String
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: ProductImage
    special_badge_image_name: String
    "The beginning date that a product has a special price."
    special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The discounted price of the product."
    special_price: Float
    special_price_badge: Int
    special_text: Int
    special_text_background_color: String
    special_text_bg_color_opacity: String
    "The end date for a product with a special price."
    special_to_date: String
    ss_brand: Int
    ss_colour_group: Int
    ss_dimensions: Int
    ss_size: Int
    "Indicates whether the product is staged for a future campaign."
    staged: Boolean!
    "Stock status of the product"
    stock_status: ProductStockStatus
    "The file name of a swatch image."
    swatch_image: String
    "The relative path to the product's thumbnail image."
    thumbnail: ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason: "Use `__typename` instead.")
    "The unique ID for a `ProductInterface` object."
    uid: ID!
    "Timestamp indicating when the product was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "An array of up-sell products."
    upsell_products: [ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    "An array of websites in which the product is available."
    websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
    "The weight of the item, in units defined by the store."
    weight: Float
}

"Contains details about bundle products added to a requisition list."
type BundleRequisitionListItem implements RequisitionListItemInterface {
    "An array of selected options for a bundle product."
    bundle_options: [SelectedBundleOption]!
    "Selected custom options for an item in the requisition list."
    customizable_options: [SelectedCustomizableOption]!
    "Details about a requisition list item."
    product: ProductInterface!
    "The quantity of the product added to the requisition list."
    quantity: Float!
    "The unique ID of an item in a requisition list."
    uid: ID!
}

"Defines bundle product options for `ShipmentItemInterface`."
type BundleShipmentItem implements ShipmentItemInterface {
    "A list of bundle options that are assigned to a shipped product."
    bundle_options: [ItemSelectedBundleOption]
    "The unique ID for a `ShipmentItemInterface` object."
    id: ID!
    "The order item associated with the shipment item."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of shipped items."
    quantity_shipped: Float!
}

"Defines bundle product options for `WishlistItemInterface`."
type BundleWishlistItem implements WishlistItemInterface {
    "The date and time the item was added to the wish list."
    added_at: String!
    "An array containing information about the selected bundle items."
    bundle_options: [SelectedBundleOption]
    "Custom options selected for the wish list item."
    customizable_options: [SelectedCustomizableOption]!
    "The description of the item."
    description: String
    "The unique ID for a `WishlistItemInterface` object."
    id: ID!
    "Product details of the wish list item."
    product: ProductInterface
    "The quantity of this wish list item."
    quantity: Float!
}

type BusinessType {
    id: Int!
    title: String!
}

type CMSStoreMapping {
    code: String!
    id: Int!
}

"Contains the contents and other details about a guest or customer cart."
type Cart {
    applied_coupon: AppliedCoupon @deprecated(reason: "Use `applied_coupons` instead.")
    "An array of `AppliedCoupon` objects. Each object contains the `code` text attribute, which specifies the coupon code."
    applied_coupons: [AppliedCoupon]
    "An array of gift card items applied to the cart."
    applied_gift_cards: [AppliedGiftCard]
    "The amount of reward points applied to the cart."
    applied_reward_points: RewardPointsAmount
    "Store credit information applied to the cart."
    applied_store_credit: AppliedStoreCredit
    "The list of available gift wrapping options for the cart."
    available_gift_wrappings: [GiftWrapping]!
    "An array of available payment methods."
    available_payment_methods: [AvailablePaymentMethod]
    "The billing address assigned to the cart."
    billing_address: BillingCartAddress
    cc_token: String
    "The email address of the guest or customer."
    email: String
    "The entered gift message for the cart"
    gift_message: GiftMessage
    "Indicates whether the shopper requested gift receipt for the cart."
    gift_receipt_included: Boolean!
    "Gift registry ID assigned to a cart to indicate that the cart is a gift registry cart."
    gift_registry_uid: String
    "The selected gift wrapping for the cart."
    gift_wrapping: GiftWrapping
    "The unique ID for a `Cart` object."
    id: ID!
    "Indicates whether the cart contains only virtual products."
    is_virtual: Boolean!
    "An array of products that have been added to the cart."
    items: [CartItemInterface]
    "Pricing details for the quote."
    prices: CartPrices
    "Indicates whether the shopper requested a printed card for the cart."
    printed_card_included: Boolean!
    "Customer's push notification token set on the cart, if any exists"
    push_notification_token: String
    "Indicates which payment method was applied to the cart."
    selected_payment_method: SelectedPaymentMethod
    "An array of shipping addresses assigned to the cart."
    shipping_addresses: [ShippingCartAddress]!
    "The total number of items in the cart."
    total_quantity: Float!
}

"Contains details the country in a billing or shipping address."
type CartAddressCountry {
    "The country code."
    code: String!
    "The display label for the country."
    label: String!
}

"Contains details about the region in a billing or shipping address."
type CartAddressRegion {
    "The state or province code."
    code: String
    "The display label for the region."
    label: String
    "The unique ID for a pre-defined region."
    region_id: Int
}

"Contains information about discounts applied to the cart."
type CartDiscount {
    "The amount of the discount applied to the item."
    amount: Money!
    "The description of the discount."
    label: [String]!
}

"Contains details about the price of the item, including taxes and discounts."
type CartItemPrices {
    "An array of discounts to be applied to the cart item."
    discounts: [Discount]
    "An array of FPTs applied to the cart item."
    fixed_product_taxes: [FixedProductTax]
    item_regular_price: Money
    "The price of the item before any discounts were applied. The price that might include tax, depending on the configured display settings for cart."
    price: Money!
    "The value of the price multiplied by the quantity of the item."
    row_total: Money!
    "The value of `row_total` plus the tax applied to the item."
    row_total_including_tax: Money!
    "The total of all discounts applied to the item."
    total_item_discount: Money
}

"Deprecated: The `ShippingCartAddress.cart_items` field now returns `CartItemInterface`."
type CartItemQuantity {
    cart_item_id: Int! @deprecated(reason: "The `ShippingCartAddress.cart_items` field now returns `CartItemInterface`.")
    quantity: Float! @deprecated(reason: "The `ShippingCartAddress.cart_items` field now returns `CartItemInterface`.")
}

"Contains details about the price of a selected customizable value."
type CartItemSelectedOptionValuePrice {
    "Indicates whether the price type is fixed, percent, or dynamic."
    type: PriceTypeEnum!
    "A string that describes the unit of the value."
    units: String!
    "A price value."
    value: Float!
}

type CartItemStockDetails {
    id: String
    salable_quantity: Float
    sku: String
}

"Contains details about the final price of items in the cart, including discount and tax information."
type CartPrices {
    "An array containing the names and amounts of taxes applied to each item in the cart."
    applied_taxes: [CartTaxItem]
    cart_regular_price: Money
    discount: CartDiscount @deprecated(reason: "Use discounts instead.")
    "An array containing all discounts applied to the cart."
    discounts: [Discount]
    "The list of prices for the selected gift options."
    gift_options: GiftOptionsPrices
    "The total, including discounts, taxes, shipping, and other fees."
    grand_total: Money
    "The subtotal without any applied taxes."
    subtotal_excluding_tax: Money
    "The subtotal including any applied taxes."
    subtotal_including_tax: Money
    "The subtotal with any discounts applied, but not taxes."
    subtotal_with_discount_excluding_tax: Money
}

"A unique cart status flag."
type CartStatus {
    is_gift_registry: Boolean!
    is_volumetric: Boolean!
}

"Contains tax information about an item in the cart."
type CartTaxItem {
    "The amount of tax applied to the item."
    amount: Money!
    "The description of the tax."
    label: String!
}

"An error encountered while adding an item to the the cart."
type CartUserInputError {
    "A cart-specific error code."
    code: CartUserInputErrorType!
    "A localized error message."
    message: String!
}

"A CategoryPriceMinMax object, indicating the minimum and maximum price for a given category"
type CategoryPriceMinMax {
    category_price_max: Float
    category_price_min: Float
    currency_symbol: String
}

"The category products object returned in the Category query."
type CategoryProducts {
    "Details that allow the mapping of colours to colour groups and build the URL to the swatch image"
    colour_swatch_group: [ColourSwatchGroup]
    "An array of products that are assigned to the category."
    items: [ProductInterface]
    "Pagination metadata."
    page_info: SearchResultPageInfo
    "The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not."
    total_count: Int
}

"Contains a collection of `CategoryTree` objects and pagination information."
type CategoryResult {
    "A list of categories that match the filter criteria."
    items: [CategoryTree]
    "An object that includes the `page_info` and `currentPage` values specified in the query."
    page_info: SearchResultPageInfo
    "The total number of categories that match the criteria."
    total_count: Int
}

"Contains the hierarchy of categories."
type CategoryTree implements CategoryInterface & RoutableInterface {
    automatic_sorting: String
    available_sort_by: [String]
    "An array of breadcrumb items."
    breadcrumbs: [Breadcrumb]
    bulk_unlink: String
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Categories' is enabled."
    canonical_url: String
    category_button_text: String
    "A comma seperated list of child category Ids"
    category_children: String
    category_frontend_sitemap: Int
    "The lowest and highest product price in this category"
    category_min_max_price: CategoryPriceMinMax
    category_robots_index: String
    "A tree of child categories."
    children: [CategoryTree]
    children_count: String
    "Contains a category CMS block."
    cms_block: CmsBlock
    column_breakpoint: Int
    "Category description as content JSON"
    contentJson: String
    "The timestamp indicating when the category was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    custom_layout_update_file: String
    "The attribute to use for sorting."
    default_sort_by: String
    "An optional description of the category."
    description: String
    display_mode: String
    exclude_in_search: Int
    filter_price_range: Float
    hero_products: String
    "An ID that uniquely identifies the category."
    id: Int @deprecated(reason: "Use `uid` instead.")
    image: String
    include_in_menu: Int
    internal_id: String
    is_anchor: Int
    is_exclude_cat: Int
    landing_page: Int
    "The depth of the category within the tree."
    level: Int
    menu_image: String
    menu_tags: String
    meta_description: String
    meta_keywords: String
    meta_title: String
    "The display name of the category."
    name: String
    page_type: Int
    "The full category path."
    path: String
    "The category path within the store."
    path_in_store: String
    "The position of the category relative to other categories at the same level in tree."
    position: Int
    "The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not."
    product_count: Int
    "The list of products assigned to the category."
    products(
        "The page of results to return. The default value is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default value is 20."
        pageSize: Int = 20,
        "The attributes to sort on, and whether to return the results in ascending or descending order."
        sort: ProductAttributeSortInput
    ): CategoryProducts
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    redirect_path: String
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "Category SEO Content Area Attribute Value"
    seo_content_area: String
    solr_category_weight: Int
    "Indicates whether the category is staged for a future campaign."
    staged: Boolean!
    suppress_filters: Int
    tags: String
    thumbnail: String
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
    "The unique ID for a `CategoryInterface` object."
    uid: ID!
    "The timestamp indicating when the category was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "The URL key assigned to the category."
    url_key: String
    "The URL path assigned to the category."
    url_path: String
    "The part of the category URL that is appended after the url key"
    url_suffix: String
    visual_merchandiser_block_and_index: String
    "Returns record number, cms block identifier and plp index"
    visual_merchandiser_details: [CmsPlpIndex]
}

"CheckCartForPromotions returns boolean indicating whether promotion products were found in the cart"
type CheckCartForPromotions {
    has_promo_products: Boolean
}

"Defines details about an individual checkout agreement."
type CheckoutAgreement {
    "The ID for a checkout agreement."
    agreement_id: Int!
    "The checkbox text for the checkout agreement."
    checkbox_text: String!
    "Required. The text of the agreement."
    content: String!
    "The height of the text box where the Terms and Conditions statement appears during checkout."
    content_height: String
    "Indicates whether the `content` text is in HTML format."
    is_html: Boolean!
    "Indicates whether agreements are accepted automatically or manually."
    mode: CheckoutAgreementMode!
    "The name given to the condition."
    name: String!
}

"The estimated shipping cost response"
type CheckoutCalculateShippingAmountResponse {
    "The shipping cost"
    estimatedShippingCost: Float!
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "The message to display to the UI, if any"
    uiMessage: String
}

"An error encountered while adding an item to the cart."
type CheckoutUserInputError {
    "An error code that is specific to Checkout."
    code: CheckoutUserInputErrorCodes!
    "A localized error message."
    message: String!
    "The path to the input field that caused an error. See the GraphQL specification about path errors for details: http://spec.graphql.org/draft/#sec-Errors"
    path: [String]!
}

"Output of the request to clear the customer cart."
type ClearCustomerCartOutput {
    "The cart after clearing items."
    cart: Cart
    "Indicates whether cart was cleared."
    status: Boolean!
}

"Contains details about a failed close operation on a negotiable quote."
type CloseNegotiableQuoteOperationFailure {
    "An array of errors encountered while attempting close the negotiable quote."
    errors: [CloseNegotiableQuoteError]!
    "The unique ID of a `NegotiableQuote` object."
    quote_uid: ID!
}

"Contains the closed negotiable quotes and other negotiable quotes the company user can view."
type CloseNegotiableQuotesOutput {
    "An array containing the negotiable quotes that were just closed."
    closed_quotes: [NegotiableQuote] @deprecated(reason: "Use `operation_results` instead.")
    "A list of negotiable quotes that can be viewed by the logged-in customer"
    negotiable_quotes(
        "The page of results to return. The default value is 1."
        currentPage: Int = 1,
        "The filter to use to determine which negotiable quotes to close."
        filter: NegotiableQuoteFilterInput,
        "The maximum number of results to return at once. The default value is 20."
        pageSize: Int = 20,
        "The field to use for sorting results."
        sort: NegotiableQuoteSortInput
    ): NegotiableQuotesOutput
    "An array of closed negotiable quote UIDs and details about any errors."
    operation_results: [CloseNegotiableQuoteOperationResult]!
    "The status of the request to close one or more negotiable quotes."
    result_status: BatchMutationStatus!
}

"Contains details about a specific CMS block."
type CmsBlock {
    "The content of the CMS block in raw HTML."
    content: String
    "CMS block content as JSON"
    contentJson: String
    "The CMS block identifier."
    identifier: String
    "The region identifier for where to set the CMS block on the PDP page."
    page_region: String
    "The title assigned to the CMS block."
    title: String
}

"Specific CMS block details needed for the HTML prerenderer to function."
type CmsBlockDetails {
    date_created: String!
    date_modified: String!
    id: Int!
    identifier: String
    status: String!
    store: [CMSStoreMapping]
    title: String
}

"Contains an array CMS block items."
type CmsBlocks {
    "An array of CMS blocks."
    items: [CmsBlock]
}

"Contains details about a CMS page."
type CmsPage implements RoutableInterface {
    "The content of the CMS page in raw HTML."
    content: String
    "CMS page content as JSON"
    contentJson: String
    "The heading that displays at the top of the CMS page."
    content_heading: String
    "The ID of a CMS page."
    identifier: String
    "A brief description of the page for search results listings."
    meta_description: String
    "A brief description of the page for search results listings."
    meta_keywords: String
    "A page title that is indexed by search engines and appears in search results listings."
    meta_title: String
    "The design layout of the page, indicating the number of columns and navigation features used on the page."
    page_layout: String
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "The name that appears in the breadcrumb trail navigation and in the browser title bar and tab."
    title: String
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
    "The URL key of the CMS page, which is often based on the `content_heading`."
    url_key: String
}

"Specific CMS page details needed for the HTML prerenderer to function."
type CmsPageDetails {
    date_created: String!
    date_modified: String!
    id: Int!
    status: String!
    store: [CMSStoreMapping]
    title: String
    url: String
}

type CmsPlpIndex {
    "Returns VisualMerchandiser cms block identifier"
    cms_block_identifier: String
    "Returns plp index"
    plp_index: String
    "Returns record number"
    record: String
}

type ColorSwatchData implements SwatchDataInterface {
    "The value can be represented as color (HEX code), image link, or text."
    value: String
}

"Color name with color group name and configurable sku"
type ColourSwatchGroup {
    colour_group_display: String
    colour_group_name: String
    colour_group_value: String
}

"Contains the output schema for a company."
type Company {
    "The list of all resources defined within the company."
    acl_resources: [CompanyAclResource]
    "Company Card Holder Address"
    card_holder_address: CompanyLegalAddress
    "An object containing information about the company administrator."
    company_admin: Customer
    "Company credit balances and limits."
    credit: CompanyCredit!
    "Details about the history of company credit operations."
    credit_history(currentPage: Int = 1, filter: CompanyCreditHistoryFilterInput, pageSize: Int = 20): CompanyCreditHistory!
    "The email address of the company contact."
    email: String
    "The unique ID of a `Company` object."
    id: ID!
    "The address where the company is registered to conduct business."
    legal_address: CompanyLegalAddress
    "The full legal name of the company."
    legal_name: String
    "The name of the company."
    name: String
    "The list of payment methods available to a company."
    payment_methods: [String]
    "Preferred collection store of the company"
    preferred_collection_store: String
    "Preferred shipping method of the company"
    preferred_shipping_method: String
    "The resale number that is assigned to the company for tax reporting purposes."
    reseller_id: String
    "A company role filtered by the unique ID of a `CompanyRole` object."
    role(id: ID!): CompanyRole
    "An object that contains a list of company roles."
    roles(
        "The page of results to return. The default value is 1"
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default value is 20."
        pageSize: Int = 20
    ): CompanyRoles!
    "An object containing information about the company sales representative."
    sales_representative: CompanySalesRepresentative
    "The company structure of teams and customers in depth-first order."
    structure(
        "The maximum number of levels of the structure to return."
        depth: Int = 10,
        "The ID of the node in the company structure that serves as the root for the query."
        rootId: ID
    ): CompanyStructure
    "The company team data filtered by the unique ID for a `CompanyTeam` object."
    team(id: ID!): CompanyTeam
    "A company user filtered by the unique ID of a `Customer` object."
    user(id: ID!): Customer
    "An object that contains a list of company users based on activity status."
    users(
        "The page of results to return. The default value is 1."
        currentPage: Int = 1,
        "The type of company users to return."
        filter: CompanyUsersFilterInput,
        "The maximum number of results to return at once. The default value is 20."
        pageSize: Int = 20
    ): CompanyUsers
    "The value-added tax number that is assigned to the company by some jurisdictions for tax reporting purposes."
    vat_tax_id: String
}

"Contains details about the access control list settings of a resource."
type CompanyAclResource {
    "An array of sub-resources."
    children: [CompanyAclResource]
    "The unique ID for a `CompanyAclResource` object."
    id: ID!
    "The sort order of an ACL resource."
    sort_order: Int
    "The label assigned to the ACL resource."
    text: String
}

"Contains details about the company administrator."
type CompanyAdmin {
    "The email address of the company administrator."
    email: String
    "The company administrator's first name."
    firstname: String
    "The company administrator's gender (Male - 1, Female - 2, Not Specified - 3)."
    gender: Int
    "The unique ID for a `CompanyAdmin` object."
    id: ID!
    "The job title of the company administrator."
    job_title: String
    "The company administrator's last name."
    lastname: String
}

"Contains company credit balances and limits."
type CompanyCredit {
    "The sum of the credit limit and the outstanding balance. If the company has exceeded the credit limit, the amount is as a negative value."
    available_credit: Money!
    "The amount of credit extended to the company."
    credit_limit: Money!
    "The amount reimbursed, less the total due from all orders placed using the Payment on Account payment method. The amount can be a positive or negative value."
    outstanding_balance: Money!
}

"Contains details about prior company credit operations."
type CompanyCreditHistory {
    "An array of company credit operations."
    items: [CompanyCreditOperation]!
    "Metadata for pagination rendering."
    page_info: SearchResultPageInfo!
    "The number of the company credit operations matching the specified filter."
    total_count: Int
}

"Contains details about a single company credit operation."
type CompanyCreditOperation {
    "The amount of the company credit operation."
    amount: Money
    "The credit balance as a result of the operation."
    balance: CompanyCredit!
    "The purchase order number associated with the company credit operation."
    custom_reference_number: String
    "The date the operation occurred."
    date: String!
    "The type of the company credit operation."
    type: CompanyCreditOperationType!
    "The company user that submitted the company credit operation."
    updated_by: CompanyCreditOperationUser!
}

"Defines the administrator or company user that submitted a company credit operation."
type CompanyCreditOperationUser {
    "The name of the company user submitting the company credit operation."
    name: String!
    "The type of the company user submitting the company credit operation."
    type: CompanyCreditOperationUserType!
}

"Contains details about the address where the company is registered to conduct business."
type CompanyLegalAddress {
    "The city where the company is registered to conduct business."
    city: String
    "The country code of the company's legal address."
    country_code: CountryCodeEnum
    "The company's postal code."
    postcode: String
    "An object containing region data for the company."
    region: CustomerAddressRegion
    "An array of strings that define the company's street address."
    street: [String]
    "The company's phone number."
    telephone: String
}

"Contails details about a single role."
type CompanyRole {
    "The unique ID for a `CompanyRole` object."
    id: ID!
    "The name assigned to the role."
    name: String
    "A list of permission resources defined for a role."
    permissions: [CompanyAclResource]
    "The total number of users assigned the specified role."
    users_count: Int
}

"Contains an array of roles."
type CompanyRoles {
    "A list of company roles that match the specified filter criteria."
    items: [CompanyRole]!
    "Pagination metadata."
    page_info: SearchResultPageInfo
    "The total number of objects matching the specified filter."
    total_count: Int!
}

"Contains details about a company sales representative."
type CompanySalesRepresentative {
    "The email address of the company sales representative."
    email: String
    "The company sales representative's first name."
    firstname: String
    "The company sales representative's last name."
    lastname: String
}

"Contains an array of the individual nodes that comprise the company structure."
type CompanyStructure {
    "An array of elements in a company structure."
    items: [CompanyStructureItem]
}

"Defines an individual node in the company structure."
type CompanyStructureItem {
    "A union of `CompanyTeam` and `Customer` objects."
    entity: CompanyStructureEntity
    "The unique ID for a `CompanyStructureItem` object."
    id: ID!
    "The ID of the parent item in the company hierarchy."
    parent_id: ID
}

"Describes a company team."
type CompanyTeam {
    "An optional description of the team."
    description: String
    "The unique ID for a `CompanyTeam` object."
    id: ID!
    "The display name of the team."
    name: String
}

"Contains details about company users."
type CompanyUsers {
    "An array of `CompanyUser` objects that match the specified filter criteria."
    items: [Customer]!
    "Pagination metadata."
    page_info: SearchResultPageInfo
    "The number of objects returned."
    total_count: Int!
}

"Contains an attribute code that is used for product comparisons."
type ComparableAttribute {
    "An attribute code that is enabled for product comparisons."
    code: String!
    "The label of the attribute code."
    label: String!
}

"Defines an object used to iterate through items for product comparisons."
type ComparableItem {
    "An array of product attributes that can be used to compare products."
    attributes: [ProductAttribute]!
    "Details about a product in a compare list."
    product: ProductInterface!
    "The unique ID of an item in a compare list."
    uid: ID!
}

"Contains iterable information such as the array of items, the count, and attributes that represent the compare list."
type CompareList {
    "An array of attributes that can be used for comparing products."
    attributes: [ComparableAttribute]
    "The number of items in the compare list."
    item_count: Int!
    "An array of products to compare."
    items: [ComparableItem]
    "The unique ID assigned to the compare list."
    uid: ID!
}

type ComplexTextValue {
    "Text that can contain HTML tags."
    html: String!
}

"Contains details about a configurable product attribute option."
type ConfigurableAttributeOption {
    "The ID assigned to the attribute."
    code: String
    "A string that describes the configurable attribute option."
    label: String
    "The unique ID for a `ConfigurableAttributeOption` object."
    uid: ID!
    "A unique index number assigned to the configurable product option."
    value_index: Int
}

"An implementation for configurable product cart items."
type ConfigurableCartItem implements CartItemInterface {
    "The list of available gift wrapping options for the cart item."
    available_gift_wrapping: [GiftWrapping]!
    "Get Salable Quantity of Simple Product From Cart"
    cart_item_stock: [CartItemStockDetails]
    "An array containing the configuranle options the shopper selected."
    configurable_options: [SelectedConfigurableOption]!
    "Product details of the cart item."
    configured_variant: ProductInterface!
    "An array containing the customizable options the shopper selected."
    customizable_options: [SelectedCustomizableOption]
    "The entered gift message for the cart item"
    gift_message: GiftMessage
    "The selected gift wrapping for the cart item."
    gift_wrapping: GiftWrapping
    "Defines gift registry item uid added to cart."
    giftregistry_item_uid: String
    id: String! @deprecated(reason: "Use `uid` instead.")
    "Contains details about the price of the item, including taxes and discounts."
    prices: CartItemPrices
    "Details about an item in the cart."
    product: ProductInterface!
    "The quantity of this item in the cart."
    quantity: Float!
    "The unique ID for a `CartItemInterface` object."
    uid: ID!
}

type ConfigurableGiftRegistryItem implements GiftRegistryItemInterface {
    child_sku: String!
    configurable_options: [SelectedConfigurableOption]
    "The date the product was added to the gift registry."
    created_at: String!
    customizable_options: [SelectedCustomizableOption]
    giftregistry_item_uid: String
    "A brief message about the gift registry item."
    note: String
    "Details about the gift registry item."
    product: ProductInterface
    purchasers: [Purchaser]
    "The requested quantity of the product."
    quantity: Float!
    "The fulfilled quantity of the product."
    quantity_fulfilled: Float!
    "The unique ID of a gift registry item."
    uid: ID!
}

"Describes configurable options that have been selected and can be selected as a result of the previous selections."
type ConfigurableOptionAvailableForSelection {
    "An attribute code that uniquely identifies a configurable option."
    attribute_code: String!
    "An array of selectable option value IDs."
    option_value_uids: [ID]!
}

"Defines basic features of a configurable product and its simple product variants."
type ConfigurableProduct implements CustomizableProductInterface & PhysicalProductInterface & ProductInterface & RoutableInterface {
    about_the_brand: String
    "Array of additionally defined product attributes."
    additional_attributes: [AdditionalAttribute]!
    additional_tab_info: String
    additional_tab_info2: String
    additional_tab_info3: String
    additional_tab_info5: String
    "The attribute set assigned to the product."
    attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")
    "A list of badges applied to the product"
    badges: [ProductBadge]
    blog_author: Int
    blog_content: String
    blog_publish_date: String
    "The brand name for this product - MRP_Brand, MRPH_Brand or MRPS_Brand"
    brand: String
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled."
    canonical_url: String
    "The categories assigned to a product."
    categories: [CategoryInterface]
    "CMS block IDs for the top, middle and bottom of a PDP page."
    cms_blocks_top_middle_bottom: PDPcmsBlocks @deprecated(reason: "Use pdp_cms_blocks, caters for both PWA & APP")
    "An array of options for the configurable product."
    configurable_options: [ConfigurableProductOptions]
    "An array of media gallery items and other details about selected configurable product options as well as details about remaining selectable options."
    configurable_product_options_selection(configurableOptionValueUids: [ID!]): ConfigurableProductOptionsSelection
    "A list of configurable product SKUs used to build product swatch cluster"
    configurable_product_swatch_cluster: [String]
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "An array of cross-sell products."
    crosssell_products: [ProductInterface]
    custom_special_text: String
    delivery_and_returns: String
    "Detailed information about the product. The value can include simple HTML tags."
    description: ComplexTextValue
    "Indicates whether a gift message is available."
    gift_message_available: String
    "The ID number assigned to the product."
    id: Int @deprecated(reason: "Use the `uid` field instead.")
    "The relative path to the main image on the product page."
    image: ProductImage
    image_content_type: String
    image_group_set: String
    image_product_code: String
    image_sequence_number: String
    is_essential: Int
    is_hero_product: Int
    "Indicates whether the product can be returned."
    is_returnable: String
    "A list of label phrase/text on the product"
    labels: [ProductLabel]
    left_badge: String
    left_badge_enabled: Int
    length: String
    "The Product made_to_order attribute."
    made_to_order: Boolean
    "A number representing the product's manufacturer."
    manufacturer: Int
    "An array of media gallery objects."
    media_gallery: [MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    "Mageplaza labels applied on the product"
    mp_label_data: [LabelRules]
    mrp_b_online_category: Int
    mrp_b_onlinesubcategory: Int
    mrp_bottom_size: Int
    mrp_brand: Int
    mrp_colour: Int
    mrp_colour_group: Int
    mrp_e_pattern: Int
    mrp_garment_length: Int
    mrp_neckline: Int
    mrp_occasion: Int
    mrp_online_baby_b_category: Int
    mrp_online_baby_b_sub_category: Int
    mrp_online_baby_g_category: Int
    mrp_online_baby_g_sub_category: Int
    mrp_online_bb_category: Int
    mrp_online_bb_sub_category: Int
    mrp_online_bg_category: Int
    mrp_online_bg_sub_category: Int
    mrp_online_category: Int
    mrp_online_m_category: Int
    mrp_online_m_sub_category: Int
    mrp_online_nursery_category: Int
    mrp_online_pb_category: Int
    mrp_online_pb_sub_category: Int
    mrp_online_pg_category: Int
    mrp_online_pg_sub_category: Int
    mrp_online_sub_category: Int
    mrp_pattern_mens_shirts: Int
    mrp_shape: Int
    mrp_shoe_size: Int
    mrp_shoesize_bigkids: Int
    mrp_shopbytrend: Int
    mrp_size: Int
    mrp_sleeve_length: Int
    mrp_underwear_l_size: Int
    mrp_underwear_size: Int
    mrph_bedding_size: Int
    mrph_brand: Int
    mrph_colour: Int
    mrph_colour_group: Int
    mrph_cushions_size: Int
    mrph_dimensions: Int
    mrph_fabric: Int
    mrph_shape: Int
    mrph_size: Int
    mrph_towels_size: Int
    mrph_window_coverings_size: Int
    mrpm_brands: Int
    "Color of the cellular product."
    mrpm_color: String
    mrpm_colour: Int
    "Network provider of the cellular product."
    mrpm_network_provider: Int
    "Size/Dimensions of cellular product if applicable."
    mrpm_size: Int
    "Internal SKU, not the same as the Magento fulfillment SKU."
    mrpm_sku: String
    mrps_brand: Int
    mrps_colour: Int
    mrps_colour_group: Int
    mrps_dimension: Int
    mrps_garment_length: Int
    mrps_neckline: Int
    mrps_size_outdoor_equip: Int
    mrps_size_outerwear: Int
    mrps_size_shoes: Int
    mrps_size_sports: Int
    mrps_size_underwear_bras: Int
    mrps_sub_category: Int
    mrps_sub_sub_category: Int
    mrps_underwear_bras: Int
    "The product name. Customers use this name to identify the product."
    name: String
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The end date for new product listings."
    new_to_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "Product stock only x left count"
    only_x_left_in_stock: Float
    "An array of options for a customizable product."
    options: [CustomizableOptionInterface]
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    "Product parent SKU, this will be used for filtering of products."
    par_sku: String
    "PDP CMS blocks for various regions on the PDP page i.e. top, middle bottom etc."
    pdp_cms_blocks: [CmsBlock]
    "Indicates the price of an item."
    price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")
    "The range of prices for the product"
    price_range: PriceRange!
    "An array of `TierPrice` objects."
    price_tiers: [TierPrice]
    "An array of `ProductLinks` objects."
    product_links: [ProductLinksInterface]
    "Product Url of the product."
    product_url: String
    promo_image_url: String
    promo_text: String
    "The average of all the ratings given to the product."
    rating_summary: Float!
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "An array of related products."
    related_products: [ProductInterface]
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "The total count of all the reviews given to the product."
    review_count: Int!
    "The list of products reviews."
    reviews(
        "The page of results to return. The default is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): ProductReviews!
    right_badge_enabled: Int
    "Get Salable Quantity of Simple Product"
    salable_quantity: Float
    "The code assigned to the Scene7 image."
    scene_seven_image_url: String
    "A short description of the product. Its use depends on the theme."
    short_description: ComplexTextValue
    size_chart: String
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: ProductImage
    special_badge_image_name: String
    "The beginning date that a product has a special price."
    special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The discounted price of the product."
    special_price: Float
    special_price_badge: Int
    special_text: Int
    special_text_background_color: String
    special_text_bg_color_opacity: String
    "The end date for a product with a special price."
    special_to_date: String
    ss_brand: Int
    ss_colour_group: Int
    ss_dimensions: Int
    ss_size: Int
    "Indicates whether the product is staged for a future campaign."
    staged: Boolean!
    "Stock status of the product"
    stock_status: ProductStockStatus
    "The file name of a swatch image."
    swatch_image: String
    "The relative path to the product's thumbnail image."
    thumbnail: ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason: "Use `__typename` instead.")
    "The unique ID for a `ProductInterface` object."
    uid: ID!
    "Timestamp indicating when the product was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "An array of up-sell products."
    upsell_products: [ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    "An array of simple product variants."
    variants: [ConfigurableVariant]
    "An array of websites in which the product is available."
    websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
    "The weight of the item, in units defined by the store."
    weight: Float
}

"Contains details about configurable product options."
type ConfigurableProductOption {
    "An attribute code that uniquely identifies a configurable option."
    attribute_code: String!
    "The display name of the option."
    label: String!
    "The unique ID of the configurable option."
    uid: ID!
    "An array of values that are applicable for this option."
    values: [ConfigurableProductOptionValue]
}

"Defines a value for a configurable product option."
type ConfigurableProductOptionValue {
    "Indicates whether the product is available with this selected option."
    is_available: Boolean!
    "Indicates whether the value is the default."
    is_use_default: Boolean!
    "The display name of the value."
    label: String!
    "The URL assigned to the thumbnail of the swatch image."
    swatch: SwatchDataInterface
    "The unique ID of the value."
    uid: ID!
}

"Defines configurable attributes for the specified product."
type ConfigurableProductOptions {
    "A string that identifies the attribute."
    attribute_code: String
    "The ID assigned to the attribute."
    attribute_id: String @deprecated(reason: "Use `attribute_uid` instead.")
    "The ID assigned to the attribute."
    attribute_id_v2: Int @deprecated(reason: "Use `attribute_uid` instead.")
    "The unique ID for an `Attribute` object."
    attribute_uid: ID!
    "The configurable option ID number assigned by the system."
    id: Int @deprecated(reason: "Use `uid` instead.")
    "A displayed string that describes the configurable product option."
    label: String
    "A number that indicates the order in which the attribute is displayed."
    position: Int
    "This is the same as a product's `id` field."
    product_id: Int @deprecated(reason: "`product_id` is not needed and can be obtained from its parent.")
    "The unique ID for a `ConfigurableProductOptions` object."
    uid: ID!
    "Indicates whether the option is the default."
    use_default: Boolean
    "An array that defines the `value_index` codes assigned to the configurable product."
    values: [ConfigurableProductOptionsValues]
}

"Contains metadata corresponding to the selected configurable options."
type ConfigurableProductOptionsSelection {
    "An array of all possible configurable options."
    configurable_options: [ConfigurableProductOption]
    "Product images and videos corresponding to the specified configurable options selection."
    media_gallery: [MediaGalleryInterface]
    "The configurable options available for further selection based on the current selection."
    options_available_for_selection: [ConfigurableOptionAvailableForSelection]
    "A variant represented by the specified configurable options selection. The value is expected to be null until selections are made for each configurable option."
    variant: SimpleProduct
}

"Contains the index number assigned to a configurable product option."
type ConfigurableProductOptionsValues {
    "The label of the product on the default store."
    default_label: String
    "The label of the product."
    label: String
    "The label of the product on the current store."
    store_label: String
    "Swatch data for a configurable product option."
    swatch_data: SwatchDataInterface
    "The unique ID for a `ConfigurableProductOptionsValues` object."
    uid: ID
    "Indicates whether to use the default_label."
    use_default_value: Boolean
    "A unique index number assigned to the configurable product option."
    value_index: Int @deprecated(reason: "Use `uid` instead.")
}

"Contains details about configurable products added to a requisition list."
type ConfigurableRequisitionListItem implements RequisitionListItemInterface {
    "Selected configurable options for an item in the requisition list."
    configurable_options: [SelectedConfigurableOption]
    "Selected custom options for an item in the requisition list."
    customizable_options: [SelectedCustomizableOption]!
    "Details about a requisition list item."
    product: ProductInterface!
    "The quantity of the product added to the requisition list."
    quantity: Float!
    "The unique ID of an item in a requisition list."
    uid: ID!
}

"Contains all the simple product variants of a configurable product."
type ConfigurableVariant {
    "An array of configurable attribute options."
    attributes: [ConfigurableAttributeOption]
    "An array of linked simple products."
    product: SimpleProduct
}

"A configurable product wish list item."
type ConfigurableWishlistItem implements WishlistItemInterface {
    "The date and time the item was added to the wish list."
    added_at: String!
    "The SKU of the simple product corresponding to a set of selected configurable options."
    child_sku: String!
    "An array of selected configurable options."
    configurable_options: [SelectedConfigurableOption]
    "Custom options selected for the wish list item."
    customizable_options: [SelectedCustomizableOption]!
    "The description of the item."
    description: String
    "The unique ID for a `WishlistItemInterface` object."
    id: ID!
    "Product details of the wish list item."
    product: ProductInterface
    "The quantity of this wish list item."
    quantity: Float!
}

type ContactForm {
    email: String!
    id: Int!
    placeholder_text: String
    subject: String!
    subject_enum: String!
    subject_text_required: Boolean
}

"Contains the status of the request."
type ContactUsOutput {
    "Message whether the request was successful."
    message: String
    "Indicates whether the request was successful."
    status: Boolean!
}

"Output of the request to copy items to the destination requisition list."
type CopyItemsFromRequisitionListsOutput {
    "The destination requisition list after the items were copied."
    requisition_list: RequisitionList
}

"Contains the source and target wish lists after copying products."
type CopyProductsBetweenWishlistsOutput {
    "The destination wish list containing the copied products."
    destination_wishlist: Wishlist!
    "The wish list that the products were copied from."
    source_wishlist: Wishlist!
    "An array of errors encountered while copying products in a wish list."
    user_errors: [WishListUserInputError]!
}

type Country {
    "An array of regions within a particular country."
    available_regions: [Region]
    "The name of the country in English."
    full_name_english: String
    "The name of the country in the current locale."
    full_name_locale: String
    "The unique ID for a `Country` object."
    id: String
    "The three-letter abbreviation of the country, such as USA."
    three_letter_abbreviation: String
    "The two-letter abbreviation of the country, such as US."
    two_letter_abbreviation: String
}

type CountryCode {
    code: String
    dial_code: String
    id: String
    name: String
}

"Contains the response to the request to create a company."
type CreateCompanyOutput {
    "The new company instance."
    company: Company!
}

"Contains the response to the request to create a company role."
type CreateCompanyRoleOutput {
    "The new company role instance."
    role: CompanyRole!
}

"Contains the response to the request to create a company team."
type CreateCompanyTeamOutput {
    "The new company team instance."
    team: CompanyTeam!
}

"Contains the response to the request to create a company user."
type CreateCompanyUserOutput {
    "The new company user instance."
    user: Customer!
}

"Contains the results of a request to create a gift registry."
type CreateGiftRegistryOutput {
    "The newly-created gift registry."
    gift_registry: GiftRegistry
}

"Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods."
type CreatePayflowProTokenOutput {
    "The RESPMSG returned by PayPal. If the `result` is `0`, then `response_message` is `Approved`."
    response_message: String!
    "A non-zero value if any errors occurred."
    result: Int!
    "The RESULT returned by PayPal. A value of `0` indicates the transaction was approved."
    result_code: Int!
    "A secure token generated by PayPal."
    secure_token: String!
    "A secure token ID generated by PayPal."
    secure_token_id: String!
}

"Contains the completed product review."
type CreateProductReviewOutput {
    "Product review details."
    review: ProductReview!
}

"Output of the request to create a requisition list."
type CreateRequisitionListOutput {
    "The created requisition list."
    requisition_list: RequisitionList
}

"Contains the wish list."
type CreateWishlistOutput {
    "The newly-created wish list"
    wishlist: Wishlist!
}

"Returns previously saved MRP Money account application data"
type CreditAccountApplicationDataResponse {
    allowAnnualCreditLimitIncreases: Boolean
    allowPromotionalOffers: Boolean
    cellphone: String
    communicationQueueId: Int!
    companyName: String
    customerProtection: Int
    dateOfBirth: String
    deductions: String
    department: String
    dependants: String
    divisionId: Int
    emailAddress: String
    employeeDepartment: String
    employeeNumber: String
    employmentPeriodYY: String
    ethnicGroupId: Int
    extension: String
    familyFuneralId: Int
    genderId: Int
    grossIncome1: String
    grossIncome2: String
    grossIncome3: String
    grossMonthlyIncome: String
    homeTelephone: String
    identityNumber: String
    initials: String
    insurancePlans: [CreditAccountInsurancePlan!]
    isBureauCheckConsentGiven: Boolean
    isCasual: Boolean
    isEmploymentConfirmed: Boolean
    isPayslipReceived: Boolean
    isUnderDebtReview: Boolean
    knownAs: String
    languageId: Int
    lostCardProtection: Int
    maritalStatusId: Int
    monthlyDebtObligations: String
    monthlyLivingExpenses: String
    monthlyRentOrBond: String
    newApplicationId: Int!
    numberOfDependants: Int
    occupationId: Int
    otherMonthlyIncome: String
    physicalAddressLine1: String
    physicalAddressLine2: String
    physicalAddressLine3: String
    physicalAddressPostalCode: String
    physicalAddressPostalCodeId: Int
    physicalAddressPostalCodePostalCodeId: Int
    physicalAddressPostalCodePostalCountryId: Int
    physicalAddressPostalCodePostalTownId: Int
    postalAddressLine1: String
    postalAddressLine2: String
    postalAddressLine3: String
    postalCode: String
    postalCodeId: Int
    postalCodePostalCodeId: Int
    postalCodePostalCountryId: Int
    postalCodePostalTownId: Int
    proofOfIncomeProvidedUpFront: Boolean
    relationshipCellphone: String
    relationshipFirstName: String
    relationshipHomeTelephone: String
    relationshipId: Int
    relationshipSurname: String
    relationshipTitleId: Int
    relationshipWorkTelephone: String
    repaymentPeriodId: Int
    residentialStatusId: Int
    statementTypeId: Int
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    storeId: Int
    surname: String
    threeSixtyDegreeCPPId: Int
    titleId: Int
    "The message to display to the UI, if any"
    uiMessage: String
    workTelephone: String
}

"MRP Money account application details"
type CreditAccountApplicationDetail {
    "Identifier"
    communicationQueueId: String!
    identityNumber: String
    isComplete: String
    "Another identifier"
    newApplicationId: String!
    processAtDate: String
    processStatusDescription: String!
    processStatusId: Int!
}

"The final decision of the credit account application"
type CreditAccountFinalOutcomeResponse {
    communicationQueueId: String!
    creditLimit: String!
    division: String!
    divisionId: String!
    eReferenceCode: String!
    initialCreditLimit: String!
    processStatus: String!
    processStatusId: Int!
    repaymentPeriod: String!
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "The message to display to the UI, if any"
    uiMessage: String
}

"Gets saved account applications for the customer"
type CreditAccountGetCustomerApplicationsResponse {
    "MRP Money account applications for the specified input value"
    applications: [CreditAccountApplicationDetail]
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "The message to display to the UI, if any"
    uiMessage: String
}

"MRP Money short term insurance product"
type CreditAccountInsurancePlan {
    "Identifier"
    id: Int!
    "Financial Service group option"
    option: String!
    "Financial Service group plan"
    plan: String!
}

"MRP Money account application lookup data item"
type CreditAccountLookupDataItem {
    "Lookup code"
    code: String
    "Lookup description"
    description: String
    "Identifier"
    id: Long!
}

"MRP Money account application lookup data"
type CreditAccountLookupDataResponse {
    "List of configured cellular service provider plan types"
    cellProviderPlanTypes: [CreditAccountLookupDataItem]!
    "List of configured cellular service providers"
    cellphoneServiceProviders: [CreditAccountLookupDataItem]!
    "Personal accident plans"
    commuterPersonalAccidentPlans: [CreditAccountLookupDataItem]!
    "Customer protection plans"
    customerProtectionPlans: [CreditAccountLookupDataItem]!
    "Debtors brands"
    debtorsBrand: [CreditAccountLookupDataItem]!
    "Divisions"
    divisions: [CreditAccountLookupDataItem]!
    "domestic care plans"
    domesticCarePlans: [CreditAccountLookupDataItem]!
    "Employment contract types"
    employmentContractTypes: [CreditAccountLookupDataItem]!
    "Employment type"
    employmentType: [CreditAccountLookupDataItem]!
    "Family funeral plans"
    familyFuneralPlans: [CreditAccountLookupDataItem]!
    "Genders"
    genders: [CreditAccountLookupDataItem]!
    "Identity types"
    identityTypes: [CreditAccountLookupDataItem]!
    "Lost card protection plans"
    lostCardProtectionPlans: [CreditAccountLookupDataItem]!
    "Marital statuses"
    maritalStatus: [CreditAccountLookupDataItem]!
    "Market sectors"
    marketSectors: [CreditAccountLookupDataItem]!
    "Medinet plans"
    medinetPlans: [CreditAccountLookupDataItem]!
    "Occupations"
    occupations: [CreditAccountLookupDataItem]!
    "Preferred lanuage"
    preferredLanguage: [CreditAccountLookupDataItem]!
    "Donate to Redcap Foundation options"
    redcapFoundation: [CreditAccountLookupDataItem]!
    "Relations"
    relations: [CreditAccountLookupDataItem]!
    "Repayment periods"
    repaymentPeriods: [CreditAccountLookupDataItem]!
    "Residential statuses"
    residentialStatus: [CreditAccountLookupDataItem]!
    "Statement types"
    statementTypes: [CreditAccountLookupDataItem]!
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "ThreeSixty Degree Protection plans"
    threeSixtyDegreeProtectionPlans: [CreditAccountLookupDataItem]!
    "Titles"
    titles: [CreditAccountLookupDataItem]!
    "The message to display to the UI, if any"
    uiMessage: String
}

"Search results for postal codes"
type CreditAccountPostalCodeSearchResponse {
    "List of postal code search results"
    postalCodes: [PostalCodeSearchResult!]!
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "The message to display to the UI, if any"
    uiMessage: String
}

"Result of the prescreening request"
type CreditAccountPreScreenApplicationResponse {
    "I have no idea what this is, but it is an identifier of sorts"
    communicationQueueId: Int!
    "Flag to indicate if the prescreening was approved and the customer may proceed"
    isApproved: Boolean!
    "I have no idea what this is, but it is another identifier of sorts"
    newApplicationId: Int!
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "The message to display to the UI, if any"
    uiMessage: String
}

"MRP Money short term insurnace product"
type CreditAccountProduct {
    "Date the product was terminated"
    closedDate: String
    "Financial Service group code"
    fsGroupCode: String!
    "Financial Service group description"
    fsGroupDesc: String!
    "Financial Service type code"
    fsTypeCode: String!
    "Financial Service type description"
    fsTypeDesc: String!
    "Date the product was activated"
    joinDate: String!
}

"Creates an airtime purchase request"
type CreditAccountPurchaseAirtimeResponse {
    "Flag that indicates if the airtime/data request was submitted successfully"
    result: Boolean!
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "The message to display to the UI, if any"
    uiMessage: String
}

"Result of the insurance callback/purchase request"
type CreditAccountPurchaseInsuranceResponse {
    "Flag that indicates if the request was submitted successfully"
    result: Boolean!
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "The message to display to the UI, if any"
    uiMessage: String
}

"Saves the current credit application data"
type CreditAccountSaveCreditApplicationResponse {
    "Flag that indicates if the application data was saved successfully"
    isSaved: Boolean!
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "The message to display to the UI, if any"
    uiMessage: String
}

"MRP Money debtors period"
type CreditAccountStatementDate {
    "The statement/debtors period date"
    statementDate: String!
    "Description of the debtors period"
    statementDescription: String!
    "Month name"
    statementMonth: String!
}

"MRP Money debtors periods"
type CreditAccountStatementDateResponse {
    "List of current and previous debtors periods"
    statementDates: [CreditAccountStatementDate!]!
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "The message to display to the UI, if any"
    uiMessage: String
}

"MRP Money account statement"
type CreditAccountStatementResponse {
    "Account arrears"
    arrears: String!
    "Customers open-to-buy amount"
    creditAvailable: String!
    "Customers credit limit on this account"
    creditLimit: String!
    "Customers current account balance"
    currentBalance: String!
    "Current installment amount"
    currentInstallment: String!
    "Amount due this month"
    dueThisMonth: String!
    "Date the installment is due"
    payByDate: String!
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "Transactions for the current debtors period"
    transactions: [CreditAccountTransaction]
    "The message to display to the UI, if any"
    uiMessage: String
}

"Submits the credit application data"
type CreditAccountSubmitCreditApplicationResponse {
    "Flag that indicates if the application data was saved successfully"
    isSaved: Boolean!
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "The message to display to the UI, if any"
    uiMessage: String
}

"MRP Money account summary"
type CreditAccountSummaryResponse {
    "Account summary message, if any"
    accountMessage: String
    "Customers active insurance plans, if any"
    activeInsurancePlans: [String]
    "Customers open to buy value"
    creditAvailable: String
    "Customers current account balance"
    currentBalance: String
    "Customers name"
    customerName: String
    "Amount due this month"
    dueThisMonth: String
    "Flag indcating if customer is permitted to purchase mobile products"
    isMobileDeviceSaleAllowed: Boolean!
    "Customers postal address 1"
    postalAddressLine1: String
    "Customers postal address 2"
    postalAddressLine2: String
    "Customers postal address 3"
    postalAddressLine3: String
    "Customers postal code"
    postalAddressPostalCode: String
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "The message to display to the UI, if any"
    uiMessage: String
}

"MRP Money account transaction"
type CreditAccountTransaction {
    "The transaction amount"
    amount: String!
    "The date the transaction was processed"
    date: String!
    "A description of the transaction"
    description: String!
    "The transactions associated reference number"
    refNumber: String!
}

"MRP Money account transactions"
type CreditAccountTransactionsResponse {
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "Transactions for the specified dates, or the current debtors period when the dates are not specified"
    transactions: [CreditAccountTransaction]
    "The message to display to the UI, if any"
    uiMessage: String
}

"Response from the request for credit limit increase"
type CreditAccountUSSDCreditLimitIncreaseResponse {
    "Reference that can be used to query the satus ofthe request"
    documentReference: Int!
    "Flag to indicate that the request was submitted successfully"
    isSubmitted: Boolean!
    "Informational message"
    message: String
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "The message to display to the UI, if any"
    uiMessage: String
}

"Result of the account application prescreening"
type CreditAccountValidateCreditApplicationResponse {
    "0 indicates a rejection, 1 a pass"
    resultCode: Int!
    "Description of the status code"
    resultDescription: String!
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "The message to display to the UI, if any"
    uiMessage: String
}

"Contains credit memo details."
type CreditMemo {
    "Comments on the credit memo."
    comments: [SalesCommentItem]
    "The unique ID for a `CreditMemo` object."
    id: ID!
    "An array containing details about refunded items."
    items: [CreditMemoItemInterface]
    "The sequential credit memo number."
    number: String!
    "Details about the total refunded amount."
    total: CreditMemoTotal
}

type CreditMemoItem implements CreditMemoItemInterface {
    "Details about the final discount amount for the base product, including discounts on options."
    discounts: [Discount]
    "The unique ID for a `CreditMemoItemInterface` object."
    id: ID!
    "The order item the credit memo is applied to."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product, including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of refunded items."
    quantity_refunded: Float
}

"Contains credit memo price details."
type CreditMemoTotal {
    "An adjustment manually applied to the order."
    adjustment: Money!
    "The final base grand total amount in the base currency."
    base_grand_total: Money!
    "The applied discounts to the credit memo."
    discounts: [Discount]
    "The final total amount, including shipping, discounts, and taxes."
    grand_total: Money!
    "Details about the shipping and handling costs for the credit memo."
    shipping_handling: ShippingHandling
    "The subtotal of the invoice, excluding shipping, discounts, and taxes."
    subtotal: Money!
    "The credit memo tax details."
    taxes: [TaxItem]
    "The shipping amount for the credit memo."
    total_shipping: Money!
    "The amount of tax applied to the credit memo."
    total_tax: Money!
}

type Currency {
    "An array of three-letter currency codes accepted by the store, such as USD and EUR."
    available_currency_codes: [String]
    "The base currency set for the store, such as USD."
    base_currency_code: String
    "The symbol for the specified base currency, such as $."
    base_currency_symbol: String
    default_display_currecy_code: String @deprecated(reason: "Symbol was missed. Use `default_display_currency_code`.")
    default_display_currecy_symbol: String @deprecated(reason: "Symbol was missed. Use `default_display_currency_code`.")
    "The currency that is displayed by default, such as USD."
    default_display_currency_code: String
    "The currency symbol that is displayed by default, such as $."
    default_display_currency_symbol: String
    "An array of exchange rates for currencies defined in the store."
    exchange_rates: [ExchangeRate]
}

"Defines an array of custom attributes."
type CustomAttributeMetadata {
    "An array of attributes."
    items: [Attribute]
}

"Customer defines the customer name and address and other details"
type Customer {
    "An array containing the customer's shipping and billing addresses."
    addresses: [CustomerAddress]
    "Indicates whether the customer has enabled remote shopping assistance."
    allow_remote_shopping_assistance: Boolean!
    "Get all active dynamic blocks for the segment that the current customer belongs to on this site"
    availableDynamicBlocks: [DynamicBlock]
    "B2B Card Number"
    card_number: String
    "The contents of the customer's compare list."
    compare_list: CompareList
    "Timestamp indicating when the account was created."
    created_at: String
    "The customer's date of birth."
    date_of_birth: String
    "The ID assigned to the billing address."
    default_billing: String
    "The default payment method code"
    default_payment_method: String
    "The ID assigned to the shipping address."
    default_shipping: String
    "The customer's date of birth."
    dob: String @deprecated(reason: "Use `date_of_birth` instead.")
    "The customer's email address. Required."
    email: String
    "The customer's first name."
    firstname: String
    "The customer's gender (Male - 1, Female - 2)."
    gender: Int
    "Details about all of the customer's gift registries."
    gift_registries: [GiftRegistry]
    "Details about a specific gift registry."
    gift_registry(giftRegistryUid: ID!): GiftRegistry
    group_id: Int @deprecated(reason: "Customer group should not be exposed in the storefront scenarios.")
    "The ID assigned to the customer."
    id: Int @deprecated(reason: "`id` is not needed as part of `Customer`, because on the server side, it can be identified based on the customer token used for authentication. There is no need to know customer ID on the client side.")
    "Indicates whether the customer is subscribed to the company's newsletter."
    is_subscribed: Boolean
    "The job title of a company user."
    job_title: String
    "Request the last used shipping and payment method - on the lastest order"
    last_used_shipping_payment: ShippingAndPaymentMethodLastUsed
    "The customer's family name."
    lastname: String
    "The customer's middle name."
    middlename: String
    "Customer mobile number"
    mobile_number: String
    "The MRP Money Account Number"
    mrp_money_account: String
    "The Linked Status of the customer's MRP Money Account"
    mrp_money_link_status: Boolean
    "Nosto Customer Reference"
    nosto_customer_reference: String
    orders(
        "Specifies which page of results to return. The default value is 1."
        currentPage: Int = 1,
        "Defines the filter to use for searching customer orders."
        filter: CustomerOrdersFilterInput,
        "Specifies the maximum number of results to return at once. The default value is 20."
        pageSize: Int = 20,
        "Sort orders, options"
        sortOrdersOptions: OrderSortOptions,
        "Filters by: in store orders or online orders"
        storeTypePreference: StoreTypePreferenceEnum
    ): CustomerOrders
    "Local or International Passport Number"
    passport_number: String
    "An honorific, such as Dr., Mr., or Mrs."
    prefix: String
    "Retrieves all of the customer's push notification tokens if any exists"
    push_notification_tokens: [PushNotifyToken]
    "An object that contains the customer's requisition lists."
    requisition_lists(
        "The page of results to return. The default value is 1."
        currentPage: Int = 1,
        "The filter to use to limit the number of requisition lists to return."
        filter: RequisitionListFilterInput,
        "The maximum number of results to return at once. The default value is 20."
        pageSize: Int = 20
    ): RequisitionLists
    "Details about the specified return request from the unique ID for a `Return` object."
    return(uid: ID!): Return
    "Information about the customer's return requests."
    returns(
        "The page of results to return. The default is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): Returns
    "Contains the customer's product reviews."
    reviews(
        "The page of results to return. The default value is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default value is 20."
        pageSize: Int = 20
    ): ProductReviews!
    "Customer reward points details."
    reward_points: RewardPoints
    "The role name and permissions assigned to the company user."
    role: CompanyRole
    "The RSA ID number"
    sa_id_number: String
    "Phycial store location preference as selected by the customer."
    saved_gift_registries: [SavedGiftRegistries]
    "Indicates whether the company user is ACTIVE or INACTIVE."
    status: CompanyUserStatusEnum
    "Store credit information applied for the logged in customer."
    store_credit: CustomerStoreCredit
    "A value such as Sr., Jr., or III."
    suffix: String
    "The customer's Value-added tax (VAT) number (for corporate customers)."
    taxvat: String
    "The team the company user is assigned to."
    team: CompanyTeam
    "The phone number of the company user."
    telephone: String
    "Return a customer's wish lists."
    wishlist: Wishlist! @deprecated(reason: "Use `Customer.wishlists` or `Customer.wishlist_v2` instead.")
    "Retrieve the wish list identified by the unique ID for a `Wishlist` object."
    wishlist_v2(id: ID!): Wishlist
    "An array of wishlists. In Magento Open Source, customers are limited to one wish list. The number of wish lists is configurable for Adobe Commerce."
    wishlists(
        "Specifies which page of results to return. The default value is 1."
        currentPage: Int = 1,
        "Specifies the maximum number of results to return at once. This attribute is optional."
        pageSize: Int = 20
    ): [Wishlist]!
}

"CustomerAddress contains detailed information about a customer's billing and shipping addresses"
type CustomerAddress {
    "The label of the saved address"
    address_label: String
    "The customer's city or town."
    city: String
    "The customer's company."
    company: String
    "The customer's country."
    country_code: CountryCodeEnum
    "The customer's country."
    country_id: String @deprecated(reason: "Use `country_code` instead.")
    custom_attributes: [CustomerAddressAttribute] @deprecated(reason: "Custom attributes should not be put into a container.")
    "The customer ID"
    customer_id: Int @deprecated(reason: "`customer_id` is not needed as part of `CustomerAddress`. The `id` is a unique identifier for the addresses.")
    "Indicates whether the address is the customer's default billing address."
    default_billing: Boolean
    "Indicates whether the address is the customer's default shipping address."
    default_shipping: Boolean
    "The customer's email"
    email: String
    "Contains any extension attributes for the address."
    extension_attributes: [CustomerAddressAttribute]
    "The customer's fax number."
    fax: String
    "The first name of the person associated with the shipping/billing address."
    firstname: String
    "The ID of a `CustomerAddress` object."
    id: Int
    "The family name of the person associated with the shipping/billing address."
    lastname: String
    "The middle name of the person associated with the shipping/billing address."
    middlename: String
    "The customer's ZIP or postal code."
    postcode: String
    "An honorific, such as Dr., Mr., or Mrs."
    prefix: String
    "An object containing the region name, region code, and region ID."
    region: CustomerAddressRegion
    "The unique ID for a pre-defined region."
    region_id: Int
    "An array of strings that define the street number and name."
    street: [String]
    "The suburb that the customer resides in"
    suburb: String
    "A value such as Sr., Jr., or III."
    suffix: String
    "The customer's telephone number."
    telephone: String
    "The customer's Value-added tax (VAT) number (for corporate customers)."
    vat_id: String
}

"Specifies the attribute code and value of a customer address attribute."
type CustomerAddressAttribute {
    "The name assigned to the customer address attribute."
    attribute_code: String
    "The valuue assigned to the customer address attribute."
    value: String
}

"Defines the customer's state or province."
type CustomerAddressRegion {
    "The state or province name."
    region: String
    "The address region code."
    region_code: String
    "The unique ID for a pre-defined region."
    region_id: Int
}

"Contains details about a single downloadable product."
type CustomerDownloadableProduct {
    "The date and time the purchase was made."
    date: String
    "The fully qualified URL to the download file."
    download_url: String
    "The unique ID assigned to the item."
    order_increment_id: String
    "The remaining number of times the customer can download the product."
    remaining_downloads: String
    "Indicates when the product becomes available for download. Options are `Pending` and `Invoiced`."
    status: String
}

"Contains a list of downloadable products."
type CustomerDownloadableProducts {
    "An array of purchased downloadable items."
    items: [CustomerDownloadableProduct]
}

type CustomerGroup {
    customer_group_code: String!
    customer_group_id: Int!
}

"Contains details about each of the customer's orders."
type CustomerOrder {
    "The billing address for the order."
    billing_address: OrderAddress
    "The shipping carrier for the order delivery."
    carrier: String
    "Comments about the order."
    comments: [SalesCommentItem]
    created_at: String @deprecated(reason: "Use the `order_date` field instead.")
    "A list of credit memos."
    credit_memos: [CreditMemo]
    "The estimated delivery date of this order"
    estimated_delivery_date: String
    "The entered gift message for the order"
    gift_message: GiftMessage
    "Indicates whether the customer requested a gift receipt for the order."
    gift_receipt_included: Boolean!
    "The selected gift wrapping for the order."
    gift_wrapping: GiftWrapping
    grand_total: Float @deprecated(reason: "Use the `totals.grand_total` field instead.")
    "An array of order history milestones"
    history: [OrderStatusHistory]
    "The unique ID for a `CustomerOrder` object."
    id: ID!
    increment_id: String @deprecated(reason: "Use the `id` field instead.")
    "A list of invoices for the order."
    invoices: [Invoice]!
    "An array containing the items purchased in this order."
    items: [OrderItemInterface]
    "A list of order items eligible to be in a return request."
    items_eligible_for_return: [OrderItemInterface]
    "The order number."
    number: String!
    "The date the order was placed."
    order_date: String!
    order_number: String! @deprecated(reason: "Use the `number` field instead.")
    "Payment details for the order."
    payment_methods: [OrderPaymentMethod]
    "Indicates whether the customer requested a printed card for the order."
    printed_card_included: Boolean!
    "Return requests associated with this order."
    returns(
        "The page of results to return. The default is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): Returns
    "A list of shipments for the order."
    shipments: [OrderShipment]
    "The shipping address for the order."
    shipping_address: OrderAddress
    "The delivery method for the order."
    shipping_method: String
    "The current status of the order."
    status: String!
    "Details about the calculated totals for this order."
    total: OrderTotal
}

"The collection of orders that match the conditions defined in the filter."
type CustomerOrders {
    "An array of customer orders."
    items: [CustomerOrder]!
    "Provides access to order sort options."
    orderSort: [SortOptions]
    "Provides access to order filter options."
    ordersFilter: FilterOptions
    "Contains pagination metadata."
    page_info: SearchResultPageInfo
    status_enum: statusEnum
    "The total count of customer orders."
    total_count: Int
}

"Contains details about a newly-created or updated customer."
type CustomerOutput {
    "Customer details after creating or updating a customer."
    customer: Customer!
}

"Contains payment tokens stored in the customer's vault."
type CustomerPaymentTokens {
    "An array of payment tokens."
    items: [PaymentToken]!
}

"Contains store credit information with balance and history."
type CustomerStoreCredit {
    "Contains the customer's store credit balance history. If the history or store credit feature is disabled, then a null value will be returned."
    balance_history(
        "The page of results to return. This value is optional. The default is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): CustomerStoreCreditHistory
    "The current balance of store credit."
    current_balance: Money
    "Indicates whether store credits are enabled. If the feature is disabled, then the balance will not be returned."
    enabled: Boolean
}

"Lists changes to the amount of store credit available to the customer."
type CustomerStoreCreditHistory {
    "An array containing information about changes to the store credit available to the customer."
    items: [CustomerStoreCreditHistoryItem]
    "Metadata for pagination rendering."
    page_info: SearchResultPageInfo
    "The number of items returned."
    total_count: Int
}

"Contains store credit history information."
type CustomerStoreCreditHistoryItem {
    "The action that was made on the store credit."
    action: String
    "The store credit available to the customer as a result of this action. "
    actual_balance: Money
    "The amount added to or subtracted from the store credit as a result of this action."
    balance_change: Money
    "The date and time when the store credit change was made."
    date_time_changed: String
}

"Contains a customer authorization token."
type CustomerToken {
    "The customer authorization token."
    token: String
}

"Contains information about a text area that is defined as part of a customizable option."
type CustomizableAreaOption implements CustomizableOptionInterface {
    "Option ID."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "The Stock Keeping Unit of the base product."
    product_sku: String
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "The unique ID for a `CustomizableOptionInterface` object."
    uid: ID!
    "An object that defines a text area."
    value: CustomizableAreaValue
}

"Defines the price and sku of a product whose page contains a customized text area."
type CustomizableAreaValue {
    "The maximum number of characters that can be entered for this customizable option."
    max_characters: Int
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "The unique ID for a `CustomizableAreaValue` object."
    uid: ID!
}

"Contains information about a set of checkbox values that are defined as part of a customizable option."
type CustomizableCheckboxOption implements CustomizableOptionInterface {
    "Option ID."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "The unique ID for a `CustomizableOptionInterface` object."
    uid: ID!
    "An array that defines a set of checkbox values."
    value: [CustomizableCheckboxValue]
}

"Defines the price and sku of a product whose page contains a customized set of checkbox values."
type CustomizableCheckboxValue {
    "The ID assigned to the value."
    option_type_id: Int
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "The order in which the checkbox value is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "The unique ID for a `CustomizableCheckboxValue` object."
    uid: ID!
}

"Contains information about a date picker that is defined as part of a customizable option."
type CustomizableDateOption implements CustomizableOptionInterface {
    "Option ID."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "The Stock Keeping Unit of the base product."
    product_sku: String
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "The unique ID for a `CustomizableOptionInterface` object."
    uid: ID!
    "An object that defines a date field in a customizable option."
    value: CustomizableDateValue
}

"Defines the price and sku of a product whose page contains a customized date picker."
type CustomizableDateValue {
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "DATE, DATE_TIME or TIME"
    type: CustomizableDateTypeEnum
    "The unique ID for a `CustomizableDateValue` object."
    uid: ID!
}

"Contains information about a drop down menu that is defined as part of a customizable option."
type CustomizableDropDownOption implements CustomizableOptionInterface {
    "Option ID."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "The unique ID for a `CustomizableOptionInterface` object."
    uid: ID!
    "An array that defines the set of options for a drop down menu."
    value: [CustomizableDropDownValue]
}

"Defines the price and sku of a product whose page contains a customized drop down menu."
type CustomizableDropDownValue {
    "The ID assigned to the value."
    option_type_id: Int
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "The unique ID for a `CustomizableDropDownValue` object."
    uid: ID!
}

"Contains information about a text field that is defined as part of a customizable option."
type CustomizableFieldOption implements CustomizableOptionInterface {
    "Option ID."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "The Stock Keeping Unit of the base product."
    product_sku: String
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "The unique ID for a `CustomizableOptionInterface` object."
    uid: ID!
    "An object that defines a text field."
    value: CustomizableFieldValue
}

"Defines the price and sku of a product whose page contains a customized text field."
type CustomizableFieldValue {
    "The maximum number of characters that can be entered for this customizable option."
    max_characters: Int
    "The price of the custom value."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "The unique ID for a `CustomizableFieldValue` object."
    uid: ID!
}

"Contains information about a file picker that is defined as part of a customizable option."
type CustomizableFileOption implements CustomizableOptionInterface {
    "Option ID."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "The Stock Keeping Unit of the base product."
    product_sku: String
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "The unique ID for a `CustomizableOptionInterface` object."
    uid: ID!
    "An object that defines a file value."
    value: CustomizableFileValue
}

"Defines the price and sku of a product whose page contains a customized file picker."
type CustomizableFileValue {
    "The file extension to accept."
    file_extension: String
    "The maximum width of an image."
    image_size_x: Int
    "The maximum height of an image."
    image_size_y: Int
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "The unique ID for a `CustomizableFileValue` object."
    uid: ID!
}

"Contains information about a multiselect that is defined as part of a customizable option."
type CustomizableMultipleOption implements CustomizableOptionInterface {
    "Option ID."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "The unique ID for a `CustomizableOptionInterface` object."
    uid: ID!
    "An array that defines the set of options for a multiselect."
    value: [CustomizableMultipleValue]
}

"Defines the price and sku of a product whose page contains a customized multiselect."
type CustomizableMultipleValue {
    "The ID assigned to the value."
    option_type_id: Int
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "The unique ID for a `CustomizableMultipleValue` object."
    uid: ID!
}

"Contains information about a set of radio buttons that are defined as part of a customizable option."
type CustomizableRadioOption implements CustomizableOptionInterface {
    "Option ID."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "The unique ID for a `CustomizableOptionInterface` object."
    uid: ID!
    "An array that defines a set of radio buttons."
    value: [CustomizableRadioValue]
}

"Defines the price and sku of a product whose page contains a customized set of radio buttons."
type CustomizableRadioValue {
    "The ID assigned to the value."
    option_type_id: Int
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "The order in which the radio button is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "The unique ID for a `CustomizableRadioValue` object."
    uid: ID!
}

"Contains the response to the request to delete the company role."
type DeleteCompanyRoleOutput {
    "SIndicates whether the company role has been deleted successfully."
    success: Boolean!
}

"Contains the status of the request to delete a company team."
type DeleteCompanyTeamOutput {
    "Indicates whether the delete operation succeeded."
    success: Boolean!
}

"Contains the response to the request to delete the company user."
type DeleteCompanyUserOutput {
    "Indicates whether the company user has been deactivated successfully."
    success: Boolean!
}

"Contains the results of the request to delete a compare list."
type DeleteCompareListOutput {
    "Indicates whether the compare list was successfully deleted."
    result: Boolean!
}

"Contains details about a failed delete operation on a negotiable quote."
type DeleteNegotiableQuoteOperationFailure {
    errors: [DeleteNegotiableQuoteError]!
    "The unique ID of a `NegotiableQuote` object."
    quote_uid: ID!
}

"Contains a list of undeleted negotiable quotes the company user can view."
type DeleteNegotiableQuotesOutput {
    "A list of negotiable quotes that the customer can view"
    negotiable_quotes(
        "The page of results to return. The default value is 1."
        currentPage: Int = 1,
        "The filter to use to determine which negotiable quotes to delete."
        filter: NegotiableQuoteFilterInput,
        "The maximum number of results to return at once. The default value is 20."
        pageSize: Int = 20,
        "The field to use for sorting results."
        sort: NegotiableQuoteSortInput
    ): NegotiableQuotesOutput
    "An array of deleted negotiable quote UIDs and details about any errors."
    operation_results: [DeleteNegotiableQuoteOperationResult]!
    "The status of the request to delete one or more negotiable quotes."
    result_status: BatchMutationStatus!
}

"Indicates whether the request succeeded and returns the remaining customer payment tokens."
type DeletePaymentTokenOutput {
    "A container for the customer's remaining payment tokens."
    customerPaymentTokens: CustomerPaymentTokens
    "Indicates whether the request succeeded."
    result: Boolean!
}

"Output of the request to remove items from the requisition list."
type DeleteRequisitionListItemsOutput {
    "The requisition list after removing items."
    requisition_list: RequisitionList
}

"Indicates whether the request to delete the requisition list was successful."
type DeleteRequisitionListOutput {
    "The customer's requisition lists after deleting a requisition list."
    requisition_lists: RequisitionLists
    "Indicates whether the request to delete the requisition list was successful."
    status: Boolean!
}

"Contains the status of the request to delete a wish list and an array of the customer's remaining wish lists."
type DeleteWishlistOutput {
    "Indicates whether the wish list was deleted."
    status: Boolean!
    "A list of undeleted wish lists."
    wishlists: [Wishlist]!
}

"Cancel Scan 2 Pay transaction"
type DigitalPaymentCancelTransactionResponse {
    statusCode: String
    statusMessage: String
}

"Process a scan 2 pay transaction"
type DigitalPaymentProcessPaymentResponse {
    amount: Float!
    authorizationXID: String
    clientReferenceCode: String
    decision: String
    invalidField: [String!]!
    isPaymentProcessed: Boolean!
    merchantReferenceCode: String
    missingField: [String!]!
    paymentNetworkTXId: String
    posReferenceCode: String
    reasonCode: String
    receiptNumber: String
    reconciliationId: String
    reconciliationReferenceNumber: String
    requestId: String
    requestToken: String
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
}

"MRP Money account balance check and payment (authorisation)"
type DigitalPaymentSendQRCodeResponse {
    accountNumber: String
    customerEmailAddress: String
    customerMobile: String
    customerName: String
    customerSurname: String
    divisionId: Int
    magentoId: Int
    sessionId: String
    storeCode: String
    tillId: String
}

"Scan 2 Pay transaction detail"
type DigitalPaymentTransactionDetailResponse {
    amount: Float
    appPaymentDate: String
    appPaymentReference: String
    appPaymentStatus: String
    cancelledDate: String
    createDate: String
    digitalPaymentId: Int
    divisionId: Int
    errorCode: String
    errorMessage: String
    finalisedDate: String
    isCancelled: Boolean
    isFinalised: Boolean
    isReversed: Boolean
    posCreateUser: String
    posReference: String
    qrCodeType: String
    reversalReference: String
    reversedDate: String
    saleId: Int
    statusCode: String
    statusDescription: String
    statusId: Int
    storeCode: String
    storeId: Int
    storeLocationId: Int
    tillId: Int
}

"Scan 2 Pay transaction status"
type DigitalPaymentTransactionStatusResponse {
    appPaymentDate: String
    appPaymentReference: String
    appPaymentStatus: String
    cancelledDate: String
    createDate: String
    digitalPaymentId: Int
    finalisedDate: String
    isCancelled: Boolean
    isFinalised: Boolean
    isReversed: Boolean
    posReference: String
    reversalReference: String
    reversedDate: String
    statusId: Int
}

"Defines an individual discount. A discount can be applied to the cart as a whole or to an item."
type Discount {
    "The amount of the discount."
    amount: Money!
    "A description of the discount."
    label: String!
}

type Division {
    "The Redworld MRPG division ID"
    id: Int!
    "true for active divisions, false otherwise"
    is_active: Boolean!
    "The Redworld MRPG division name"
    name: String!
}

type DivisionCount {
    count: Int
    divisionId: Int
    divisionName: String
}

type Docket {
    additionalInformation: AdditionalInformation
    address: Address
    assistant: String
    countryId: String
    divisionId: String
    divisionName: String
    docketDate: String
    offline: String
    otherInformation: OtherInformation
    payment: Payment
    postCode: String
    sale: Sale
    storeLocation: String
    storeLocationId: Int
    storeManager: String
    telephone: String
    tender: Tender
    totalDue: TotalDue
}

type DocketNumber {
    docketNumberLine: DocketNumberLine
}

type DocketNumberLine {
    header: String
    number: String
}

"An implementation for downloadable product cart items."
type DownloadableCartItem implements CartItemInterface {
    "Get Salable Quantity of Simple Product From Cart"
    cart_item_stock: [CartItemStockDetails]
    "An array containing the customizable options the shopper selected."
    customizable_options: [SelectedCustomizableOption]!
    "Defines gift registry item uid added to cart."
    giftregistry_item_uid: String
    id: String! @deprecated(reason: "Use `uid` instead.")
    "An array containing information about the links for the downloadable product added to the cart."
    links: [DownloadableProductLinks]
    "Contains details about the price of the item, including taxes and discounts."
    prices: CartItemPrices
    "Details about an item in the cart."
    product: ProductInterface!
    "The quantity of this item in the cart."
    quantity: Float!
    "An array containing information about samples of the selected downloadable product."
    samples: [DownloadableProductSamples]
    "The unique ID for a `CartItemInterface` object."
    uid: ID!
}

"Defines downloadable product options for `CreditMemoItemInterface`."
type DownloadableCreditMemoItem implements CreditMemoItemInterface {
    "Details about the final discount amount for the base product, including discounts on options."
    discounts: [Discount]
    "A list of downloadable links that are refunded from the downloadable product."
    downloadable_links: [DownloadableItemsLinks]
    "The unique ID for a `CreditMemoItemInterface` object."
    id: ID!
    "The order item the credit memo is applied to."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product, including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of refunded items."
    quantity_refunded: Float
}

"Defines downloadable product options for `InvoiceItemInterface`."
type DownloadableInvoiceItem implements InvoiceItemInterface {
    "Information about the final discount amount for the base product, including discounts on options."
    discounts: [Discount]
    "A list of downloadable links that are invoiced from the downloadable product."
    downloadable_links: [DownloadableItemsLinks]
    "The unique ID for an `InvoiceItemInterface` object."
    id: ID!
    "Details about an individual order item."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of invoiced items."
    quantity_invoiced: Float
}

"Defines characteristics of the links for downloadable product."
type DownloadableItemsLinks {
    "A number indicating the sort order."
    sort_order: Int
    "The display name of the link."
    title: String
    "The unique ID for a `DownloadableItemsLinks` object."
    uid: ID!
}

"Defines downloadable product options for `OrderItemInterface`."
type DownloadableOrderItem implements OrderItemInterface {
    "The final discount information for the product."
    discounts: [Discount]
    "A list of downloadable links that are ordered from the downloadable product."
    downloadable_links: [DownloadableItemsLinks]
    "Indicates whether the order item is eligible to be in a return request."
    eligible_for_return: Boolean
    "The entered option for the base product, such as a logo or image."
    entered_options: [OrderItemOption]
    "The selected gift wrapping for the order item."
    gift_wrapping: GiftWrapping
    "The unique ID for an `OrderItemInterface` object."
    id: ID!
    parent_sku: String
    "The initial price of the product inclusive of tax without discount"
    product_initial_sale_price: Money!
    "The name of the base product."
    product_name: String
    "The sale price of the base product, including selected options."
    product_sale_price: Money!
    "The sale price of the product inclusive of tax"
    product_sale_price_including_tax: Money!
    "The SKU of the base product."
    product_sku: String!
    "The type of product, such as simple, configurable, etc."
    product_type: String
    "URL key of the base product."
    product_url_key: String
    "The number of canceled items."
    quantity_canceled: Float
    "The number of invoiced items."
    quantity_invoiced: Float
    "The number of units ordered for this item."
    quantity_ordered: Float
    "The number of refunded items."
    quantity_refunded: Float
    "The number of returned items."
    quantity_returned: Float
    "The number of shipped items."
    quantity_shipped: Float
    scene_seven_image_url: String
    "The selected options for the base product, such as color or size."
    selected_options: [OrderItemOption]
    "The status of the order item."
    status: String
}

"Defines a product that the shopper downloads."
type DownloadableProduct implements CustomizableProductInterface & ProductInterface & RoutableInterface {
    about_the_brand: String
    "Array of additionally defined product attributes."
    additional_attributes: [AdditionalAttribute]!
    additional_tab_info: String
    additional_tab_info2: String
    additional_tab_info3: String
    additional_tab_info5: String
    "The attribute set assigned to the product."
    attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")
    "A list of badges applied to the product"
    badges: [ProductBadge]
    blog_author: Int
    blog_content: String
    blog_publish_date: String
    "The brand name for this product - MRP_Brand, MRPH_Brand or MRPS_Brand"
    brand: String
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled."
    canonical_url: String
    "The categories assigned to a product."
    categories: [CategoryInterface]
    "CMS block IDs for the top, middle and bottom of a PDP page."
    cms_blocks_top_middle_bottom: PDPcmsBlocks @deprecated(reason: "Use pdp_cms_blocks, caters for both PWA & APP")
    "A list of configurable product SKUs used to build product swatch cluster"
    configurable_product_swatch_cluster: [String]
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "An array of cross-sell products."
    crosssell_products: [ProductInterface]
    custom_special_text: String
    delivery_and_returns: String
    "Detailed information about the product. The value can include simple HTML tags."
    description: ComplexTextValue
    "An array containing information about the links for this downloadable product."
    downloadable_product_links: [DownloadableProductLinks]
    "An array containing information about samples of this downloadable product."
    downloadable_product_samples: [DownloadableProductSamples]
    "Indicates whether a gift message is available."
    gift_message_available: String
    "The ID number assigned to the product."
    id: Int @deprecated(reason: "Use the `uid` field instead.")
    "The relative path to the main image on the product page."
    image: ProductImage
    image_content_type: String
    image_group_set: String
    image_product_code: String
    image_sequence_number: String
    is_essential: Int
    is_hero_product: Int
    "Indicates whether the product can be returned."
    is_returnable: String
    "A list of label phrase/text on the product"
    labels: [ProductLabel]
    left_badge: String
    left_badge_enabled: Int
    length: String
    "A value of 1 indicates that each link in the array must be purchased separately."
    links_purchased_separately: Int
    "The heading above the list of downloadable products."
    links_title: String
    "The Product made_to_order attribute."
    made_to_order: Boolean
    "A number representing the product's manufacturer."
    manufacturer: Int
    "An array of media gallery objects."
    media_gallery: [MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    "Mageplaza labels applied on the product"
    mp_label_data: [LabelRules]
    mrp_b_online_category: Int
    mrp_b_onlinesubcategory: Int
    mrp_bottom_size: Int
    mrp_brand: Int
    mrp_colour: Int
    mrp_colour_group: Int
    mrp_e_pattern: Int
    mrp_garment_length: Int
    mrp_neckline: Int
    mrp_occasion: Int
    mrp_online_baby_b_category: Int
    mrp_online_baby_b_sub_category: Int
    mrp_online_baby_g_category: Int
    mrp_online_baby_g_sub_category: Int
    mrp_online_bb_category: Int
    mrp_online_bb_sub_category: Int
    mrp_online_bg_category: Int
    mrp_online_bg_sub_category: Int
    mrp_online_category: Int
    mrp_online_m_category: Int
    mrp_online_m_sub_category: Int
    mrp_online_nursery_category: Int
    mrp_online_pb_category: Int
    mrp_online_pb_sub_category: Int
    mrp_online_pg_category: Int
    mrp_online_pg_sub_category: Int
    mrp_online_sub_category: Int
    mrp_pattern_mens_shirts: Int
    mrp_shape: Int
    mrp_shoe_size: Int
    mrp_shoesize_bigkids: Int
    mrp_shopbytrend: Int
    mrp_size: Int
    mrp_sleeve_length: Int
    mrp_underwear_l_size: Int
    mrp_underwear_size: Int
    mrph_bedding_size: Int
    mrph_brand: Int
    mrph_colour: Int
    mrph_colour_group: Int
    mrph_cushions_size: Int
    mrph_dimensions: Int
    mrph_fabric: Int
    mrph_shape: Int
    mrph_size: Int
    mrph_towels_size: Int
    mrph_window_coverings_size: Int
    mrpm_brands: Int
    "Color of the cellular product."
    mrpm_color: String
    mrpm_colour: Int
    "Network provider of the cellular product."
    mrpm_network_provider: Int
    "Size/Dimensions of cellular product if applicable."
    mrpm_size: Int
    "Internal SKU, not the same as the Magento fulfillment SKU."
    mrpm_sku: String
    mrps_brand: Int
    mrps_colour: Int
    mrps_colour_group: Int
    mrps_dimension: Int
    mrps_garment_length: Int
    mrps_neckline: Int
    mrps_size_outdoor_equip: Int
    mrps_size_outerwear: Int
    mrps_size_shoes: Int
    mrps_size_sports: Int
    mrps_size_underwear_bras: Int
    mrps_sub_category: Int
    mrps_sub_sub_category: Int
    mrps_underwear_bras: Int
    "The product name. Customers use this name to identify the product."
    name: String
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The end date for new product listings."
    new_to_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "Product stock only x left count"
    only_x_left_in_stock: Float
    "An array of options for a customizable product."
    options: [CustomizableOptionInterface]
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    "Product parent SKU, this will be used for filtering of products."
    par_sku: String
    "PDP CMS blocks for various regions on the PDP page i.e. top, middle bottom etc."
    pdp_cms_blocks: [CmsBlock]
    "Indicates the price of an item."
    price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")
    "The range of prices for the product"
    price_range: PriceRange!
    "An array of `TierPrice` objects."
    price_tiers: [TierPrice]
    "An array of `ProductLinks` objects."
    product_links: [ProductLinksInterface]
    "Product Url of the product."
    product_url: String
    promo_image_url: String
    promo_text: String
    "The average of all the ratings given to the product."
    rating_summary: Float!
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "An array of related products."
    related_products: [ProductInterface]
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "The total count of all the reviews given to the product."
    review_count: Int!
    "The list of products reviews."
    reviews(
        "The page of results to return. The default is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): ProductReviews!
    right_badge_enabled: Int
    "Get Salable Quantity of Simple Product"
    salable_quantity: Float
    "The code assigned to the Scene7 image."
    scene_seven_image_url: String
    "A short description of the product. Its use depends on the theme."
    short_description: ComplexTextValue
    size_chart: String
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: ProductImage
    special_badge_image_name: String
    "The beginning date that a product has a special price."
    special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The discounted price of the product."
    special_price: Float
    special_price_badge: Int
    special_text: Int
    special_text_background_color: String
    special_text_bg_color_opacity: String
    "The end date for a product with a special price."
    special_to_date: String
    ss_brand: Int
    ss_colour_group: Int
    ss_dimensions: Int
    ss_size: Int
    "Indicates whether the product is staged for a future campaign."
    staged: Boolean!
    "Stock status of the product"
    stock_status: ProductStockStatus
    "The file name of a swatch image."
    swatch_image: String
    "The relative path to the product's thumbnail image."
    thumbnail: ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason: "Use `__typename` instead.")
    "The unique ID for a `ProductInterface` object."
    uid: ID!
    "Timestamp indicating when the product was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "An array of up-sell products."
    upsell_products: [ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    "An array of websites in which the product is available."
    websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
}

"Defines characteristics of a downloadable product."
type DownloadableProductLinks {
    id: Int @deprecated(reason: "This information should not be exposed on frontend.")
    is_shareable: Boolean @deprecated(reason: "This information should not be exposed on frontend.")
    link_type: DownloadableFileTypeEnum @deprecated(reason: "`sample_url` serves to get the downloadable sample")
    number_of_downloads: Int @deprecated(reason: "This information should not be exposed on frontend.")
    "The price of the downloadable product."
    price: Float
    sample_file: String @deprecated(reason: "`sample_url` serves to get the downloadable sample")
    sample_type: DownloadableFileTypeEnum @deprecated(reason: "`sample_url` serves to get the downloadable sample")
    "The full URL to the downloadable sample."
    sample_url: String
    "A number indicating the sort order."
    sort_order: Int
    "The display name of the link."
    title: String
    "The unique ID for a `DownloadableProductLinks` object."
    uid: ID!
}

"Defines characteristics of a downloadable product."
type DownloadableProductSamples {
    id: Int @deprecated(reason: "This information should not be exposed on frontend.")
    sample_file: String @deprecated(reason: "`sample_url` serves to get the downloadable sample")
    sample_type: DownloadableFileTypeEnum @deprecated(reason: "`sample_url` serves to get the downloadable sample")
    "The full URL to the downloadable sample."
    sample_url: String
    "A number indicating the sort order."
    sort_order: Int
    "The display name of the sample."
    title: String
}

"Contains details about downloadable products added to a requisition list."
type DownloadableRequisitionListItem implements RequisitionListItemInterface {
    "Selected custom options for an item in the requisition list."
    customizable_options: [SelectedCustomizableOption]!
    "An array of links for downloadable products in the requisition list."
    links: [DownloadableProductLinks]
    "Details about a requisition list item."
    product: ProductInterface!
    "The quantity of the product added to the requisition list."
    quantity: Float!
    "An array of links to downloadable product samples."
    samples: [DownloadableProductSamples]
    "The unique ID of an item in a requisition list."
    uid: ID!
}

"A downloadable product wish list item."
type DownloadableWishlistItem implements WishlistItemInterface {
    "The date and time the item was added to the wish list."
    added_at: String!
    "Custom options selected for the wish list item."
    customizable_options: [SelectedCustomizableOption]!
    "The description of the item."
    description: String
    "The unique ID for a `WishlistItemInterface` object."
    id: ID!
    "An array containing information about the selected links."
    links_v2: [DownloadableProductLinks]
    "Product details of the wish list item."
    product: ProductInterface
    "The quantity of this wish list item."
    quantity: Float!
    "An array containing information about the selected samples."
    samples: [DownloadableProductSamples]
}

"Contains a single dynamic block."
type DynamicBlock {
    "Dynamic Block content"
    content: String
    "Dynamic Block content as content JSON"
    contentJson: String
    "The Id of the dynamic block"
    id: Int!
    "The status of the dynamic block"
    name: String!
    "Dynamic Block Type, i.e. Content Area, Header, Left Column or Right Column"
    type: [DynamicBlockType]
    "The unique ID of a `DynamicBlock` object."
    uid: ID!
}

type DynamicBlockType {
    type_code: String!
    type_name: String!
}

"Contains an array of dynamic blocks."
type DynamicBlocks {
    "An array containing individual dynamic blocks."
    items: [DynamicBlock]!
    "Metadata for pagination rendering."
    page_info: SearchResultPageInfo
    "The number of returned dynamic blocks."
    total_count: Int!
}

type EmailDocketDateViewModel {
    count: Int
    label: String
    value: String
}

type EmailDocketDetailViewModel {
    docketContent: EmailDocketViewModel
    emailAddress: String
    emailDocketId: Int!
    reference: String
    saleId: Int!
    storeLocationId: Int!
    tillId: Int!
}

type EmailDocketDetailViewModelFiltered {
    divisionId: Int
    docketContent: EmailDocketViewModel
    docketDate: String
    emailAddress: String
    emailDocketId: Int
    reference: String
    saleId: Int
    storeLocation: String
    storeLocationId: Int
    tillId: Int
}

type EmailDocketFilteredHeaderViewModel {
    dates: [EmailDocketDateViewModel]!
    divisionCount: [DivisionCount]!
    emailDocketDetailViewModelFiltered: [EmailDocketDetailViewModelFiltered]!
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    storeLocationCount: [StoreLocationCount]!
    "The message to display to the UI, if any"
    uiMessage: String
}

type EmailDocketViewModel {
    docket: Docket
}

"Customer email dockets"
type EmailDockets {
    "Customer email dockets"
    emailDocketList: [EmailDocketDetailViewModel!]!
}

type EmailStatus {
    message: String!
    status: Boolean!
}

"Contains the `uid`, `relative_url`, and `type` attributes."
type EntityUrl {
    canonical_url: String @deprecated(reason: "Use `relative_url` instead.")
    "The unique ID for a `ProductInterface`, `CategoryInterface`, `CmsPage`, or similar object associated with the specified URL. This could be a product, category, or CMS page UID."
    entity_uid: ID
    "The ID assigned to the object associated with the specified url. This could be a product ID, category ID, or page ID."
    id: Int @deprecated(reason: "Use `entity_uid` instead.")
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirectCode: Int
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
}

"Lists the exchange rate."
type ExchangeRate {
    "Specifies the store’s default currency to exchange to."
    currency_to: String
    "The exchange rate for the store’s default currency."
    rate: Float
}

type FailedProducts {
    failed_product_sku: String
}

type FilterAttribute {
    attribute_code: String!
}

type FilterOptions {
    dates: [Option]
    delivery_methods: [Option]
    divisions: [Option]
    statuses: [Option]
}

"A single FPT that can be applied to a product price."
type FixedProductTax {
    "The amount of the Fixed Product Tax."
    amount: Money
    "The display label assigned to the Fixed Product Tax."
    label: String
}

"Contains the generated customer token."
type GenerateCustomerTokenAsAdminOutput {
    "The generated customer token."
    customer_token: String!
}

type GetB2BAccountStatus {
    "0 = Pending, 1 = Active, 2 = Rejected, 3 = Blocked"
    company_application_status: Int
    "0 = Inactive, 1 = Active"
    customer_status: Int
    is_b2b_account: Boolean
}

type GetB2BCustomerDeliveryMethod {
    delivery_method: String
}

type GetB2bBusinessTypes {
    business_types: [BusinessType]
}

type GetCompany {
    business_type: Int
    card_holder_address: CompanyLegalAddress
    city: String
    company_email: String
    company_name: String
    country: String
    customer_group: Int
    postal_code: String
    preferred_collection_store: Store
    preferred_shipping_method: ShippingMethod
    region: String
    street: [String]
    telephone: String
    vat_registration_number: String
    website: String
}

type GetShippingMethods {
    shipping_methods: [ShippingMethod]
}

"Contains details about the gift card account."
type GiftCardAccount {
    "The balance remaining on the gift card."
    balance: Money
    "The gift card account code."
    code: String
    "The expiration date of the gift card."
    expiration_date: String
}

"Contains the value of a gift card, the website that generated the card, and related information."
type GiftCardAmounts {
    "An internal attribute ID."
    attribute_id: Int
    "The unique ID for a `GiftCardAmounts` object."
    uid: ID!
    "The value of the gift card."
    value: Float
    "An ID that is assigned to each unique gift card amount."
    value_id: Int @deprecated(reason: "Use `uid` instead")
    "The ID of the website that generated the gift card."
    website_id: Int
    "The value of the gift card."
    website_value: Float
}

"Contains details about a gift card that has been added to a cart."
type GiftCardCartItem implements CartItemInterface {
    "The amount and currency of the gift card."
    amount: Money!
    "Get Salable Quantity of Simple Product From Cart"
    cart_item_stock: [CartItemStockDetails]
    "An array of customizations applied to the gift card."
    customizable_options: [SelectedCustomizableOption]!
    "Defines gift registry item uid added to cart."
    giftregistry_item_uid: String
    id: String! @deprecated(reason: "Use `uid` instead.")
    "The message from the sender to the recipient."
    message: String
    "Contains details about the price of the item, including taxes and discounts."
    prices: CartItemPrices
    "Details about an item in the cart."
    product: ProductInterface!
    "The quantity of this item in the cart."
    quantity: Float!
    "The email address of the person receiving the gift card."
    recipient_email: String
    "The name of the person receiving the gift card."
    recipient_name: String!
    "The email address of the sender."
    sender_email: String
    "The name of the sender."
    sender_name: String!
    "The unique ID for a `CartItemInterface` object."
    uid: ID!
}

type GiftCardCreditMemoItem implements CreditMemoItemInterface {
    "Details about the final discount amount for the base product, including discounts on options."
    discounts: [Discount]
    "Selected gift card properties for a credit memo item."
    gift_card: GiftCardItem
    "The unique ID for a `CreditMemoItemInterface` object."
    id: ID!
    "The order item the credit memo is applied to."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product, including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of refunded items."
    quantity_refunded: Float
}

type GiftCardInvoiceItem implements InvoiceItemInterface {
    "Information about the final discount amount for the base product, including discounts on options."
    discounts: [Discount]
    "Selected gift card properties for an invoice item."
    gift_card: GiftCardItem
    "The unique ID for an `InvoiceItemInterface` object."
    id: ID!
    "Details about an individual order item."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of invoiced items."
    quantity_invoiced: Float
}

"Contains details about a gift card."
type GiftCardItem {
    "The message from the sender to the recipient."
    message: String
    "The email address of the receiver of a virtual gift card."
    recipient_email: String
    "The name of the receiver of a physical or virtual gift card."
    recipient_name: String
    "The email address of the sender of a virtual gift card."
    sender_email: String
    "The name of the sender of a physical or virtual gift card."
    sender_name: String
}

"Contains details about the sender, recipient, and amount of a gift card."
type GiftCardOptions {
    "The amount and currency of the gift card."
    amount: Money
    "The custom amount and currency of the gift card."
    custom_giftcard_amount: Money
    "A message to the recipient."
    message: String
    "The email address of the person receiving the gift card."
    recipient_email: String
    "The name of the person receiving the gift card."
    recipient_name: String
    "The email address of the person sending the gift card."
    sender_email: String
    "The name of the person sending the gift card."
    sender_name: String
}

type GiftCardOrderItem implements OrderItemInterface {
    "The final discount information for the product."
    discounts: [Discount]
    "Indicates whether the order item is eligible to be in a return request."
    eligible_for_return: Boolean
    "The entered option for the base product, such as a logo or image."
    entered_options: [OrderItemOption]
    "Selected gift card properties for an order item."
    gift_card: GiftCardItem
    "The selected gift wrapping for the order item."
    gift_wrapping: GiftWrapping
    "The unique ID for an `OrderItemInterface` object."
    id: ID!
    parent_sku: String
    "The initial price of the product inclusive of tax without discount"
    product_initial_sale_price: Money!
    "The name of the base product."
    product_name: String
    "The sale price of the base product, including selected options."
    product_sale_price: Money!
    "The sale price of the product inclusive of tax"
    product_sale_price_including_tax: Money!
    "The SKU of the base product."
    product_sku: String!
    "The type of product, such as simple, configurable, etc."
    product_type: String
    "URL key of the base product."
    product_url_key: String
    "The number of canceled items."
    quantity_canceled: Float
    "The number of invoiced items."
    quantity_invoiced: Float
    "The number of units ordered for this item."
    quantity_ordered: Float
    "The number of refunded items."
    quantity_refunded: Float
    "The number of returned items."
    quantity_returned: Float
    "The number of shipped items."
    quantity_shipped: Float
    scene_seven_image_url: String
    "The selected options for the base product, such as color or size."
    selected_options: [OrderItemOption]
    "The status of the order item."
    status: String
}

"Defines properties of a gift card."
type GiftCardProduct implements CustomizableProductInterface & PhysicalProductInterface & ProductInterface & RoutableInterface {
    about_the_brand: String
    "Array of additionally defined product attributes."
    additional_attributes: [AdditionalAttribute]!
    additional_tab_info: String
    additional_tab_info2: String
    additional_tab_info3: String
    additional_tab_info5: String
    "Indicates whether the customer can provide a message to accompany the gift card."
    allow_message: Boolean
    "Indicates whether shoppers have the ability to set the value of the gift card."
    allow_open_amount: Boolean
    "The attribute set assigned to the product."
    attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")
    "A list of badges applied to the product"
    badges: [ProductBadge]
    blog_author: Int
    blog_content: String
    blog_publish_date: String
    "The brand name for this product - MRP_Brand, MRPH_Brand or MRPS_Brand"
    brand: String
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled."
    canonical_url: String
    "The categories assigned to a product."
    categories: [CategoryInterface]
    "CMS block IDs for the top, middle and bottom of a PDP page."
    cms_blocks_top_middle_bottom: PDPcmsBlocks @deprecated(reason: "Use pdp_cms_blocks, caters for both PWA & APP")
    "A list of configurable product SKUs used to build product swatch cluster"
    configurable_product_swatch_cluster: [String]
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "An array of cross-sell products."
    crosssell_products: [ProductInterface]
    custom_special_text: String
    delivery_and_returns: String
    "Detailed information about the product. The value can include simple HTML tags."
    description: ComplexTextValue
    "An array of customizable gift card options."
    gift_card_options: [CustomizableOptionInterface]!
    "Indicates whether a gift message is available."
    gift_message_available: String
    "An array that contains information about the values and ID of a gift card."
    giftcard_amounts: [GiftCardAmounts]
    "An enumeration that specifies the type of gift card."
    giftcard_type: GiftCardTypeEnum
    "The ID number assigned to the product."
    id: Int @deprecated(reason: "Use the `uid` field instead.")
    "The relative path to the main image on the product page."
    image: ProductImage
    image_content_type: String
    image_group_set: String
    image_product_code: String
    image_sequence_number: String
    is_essential: Int
    is_hero_product: Int
    "Indicates whether the customer can redeem the value on the card for cash."
    is_redeemable: Boolean
    "Indicates whether the product can be returned."
    is_returnable: String
    "A list of label phrase/text on the product"
    labels: [ProductLabel]
    left_badge: String
    left_badge_enabled: Int
    length: String
    "The number of days after purchase until the gift card expires. A null value means there is no limit."
    lifetime: Int
    "The Product made_to_order attribute."
    made_to_order: Boolean
    "A number representing the product's manufacturer."
    manufacturer: Int
    "An array of media gallery objects."
    media_gallery: [MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")
    "The maximum number of characters the gift message can contain."
    message_max_length: Int
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    "Mageplaza labels applied on the product"
    mp_label_data: [LabelRules]
    mrp_b_online_category: Int
    mrp_b_onlinesubcategory: Int
    mrp_bottom_size: Int
    mrp_brand: Int
    mrp_colour: Int
    mrp_colour_group: Int
    mrp_e_pattern: Int
    mrp_garment_length: Int
    mrp_neckline: Int
    mrp_occasion: Int
    mrp_online_baby_b_category: Int
    mrp_online_baby_b_sub_category: Int
    mrp_online_baby_g_category: Int
    mrp_online_baby_g_sub_category: Int
    mrp_online_bb_category: Int
    mrp_online_bb_sub_category: Int
    mrp_online_bg_category: Int
    mrp_online_bg_sub_category: Int
    mrp_online_category: Int
    mrp_online_m_category: Int
    mrp_online_m_sub_category: Int
    mrp_online_nursery_category: Int
    mrp_online_pb_category: Int
    mrp_online_pb_sub_category: Int
    mrp_online_pg_category: Int
    mrp_online_pg_sub_category: Int
    mrp_online_sub_category: Int
    mrp_pattern_mens_shirts: Int
    mrp_shape: Int
    mrp_shoe_size: Int
    mrp_shoesize_bigkids: Int
    mrp_shopbytrend: Int
    mrp_size: Int
    mrp_sleeve_length: Int
    mrp_underwear_l_size: Int
    mrp_underwear_size: Int
    mrph_bedding_size: Int
    mrph_brand: Int
    mrph_colour: Int
    mrph_colour_group: Int
    mrph_cushions_size: Int
    mrph_dimensions: Int
    mrph_fabric: Int
    mrph_shape: Int
    mrph_size: Int
    mrph_towels_size: Int
    mrph_window_coverings_size: Int
    mrpm_brands: Int
    "Color of the cellular product."
    mrpm_color: String
    mrpm_colour: Int
    "Network provider of the cellular product."
    mrpm_network_provider: Int
    "Size/Dimensions of cellular product if applicable."
    mrpm_size: Int
    "Internal SKU, not the same as the Magento fulfillment SKU."
    mrpm_sku: String
    mrps_brand: Int
    mrps_colour: Int
    mrps_colour_group: Int
    mrps_dimension: Int
    mrps_garment_length: Int
    mrps_neckline: Int
    mrps_size_outdoor_equip: Int
    mrps_size_outerwear: Int
    mrps_size_shoes: Int
    mrps_size_sports: Int
    mrps_size_underwear_bras: Int
    mrps_sub_category: Int
    mrps_sub_sub_category: Int
    mrps_underwear_bras: Int
    "The product name. Customers use this name to identify the product."
    name: String
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The end date for new product listings."
    new_to_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "Product stock only x left count"
    only_x_left_in_stock: Float
    "The maximum acceptable value of an open amount gift card."
    open_amount_max: Float
    "The minimum acceptable value of an open amount gift card."
    open_amount_min: Float
    "An array of options for a customizable product."
    options: [CustomizableOptionInterface]
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    "Product parent SKU, this will be used for filtering of products."
    par_sku: String
    "PDP CMS blocks for various regions on the PDP page i.e. top, middle bottom etc."
    pdp_cms_blocks: [CmsBlock]
    "Indicates the price of an item."
    price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")
    "The range of prices for the product"
    price_range: PriceRange!
    "An array of `TierPrice` objects."
    price_tiers: [TierPrice]
    "An array of `ProductLinks` objects."
    product_links: [ProductLinksInterface]
    "Product Url of the product."
    product_url: String
    promo_image_url: String
    promo_text: String
    "The average of all the ratings given to the product."
    rating_summary: Float!
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "An array of related products."
    related_products: [ProductInterface]
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "The total count of all the reviews given to the product."
    review_count: Int!
    "The list of products reviews."
    reviews(
        "The page of results to return. The default is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): ProductReviews!
    right_badge_enabled: Int
    "Get Salable Quantity of Simple Product"
    salable_quantity: Float
    "The code assigned to the Scene7 image."
    scene_seven_image_url: String
    "A short description of the product. Its use depends on the theme."
    short_description: ComplexTextValue
    size_chart: String
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: ProductImage
    special_badge_image_name: String
    "The beginning date that a product has a special price."
    special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The discounted price of the product."
    special_price: Float
    special_price_badge: Int
    special_text: Int
    special_text_background_color: String
    special_text_bg_color_opacity: String
    "The end date for a product with a special price."
    special_to_date: String
    ss_brand: Int
    ss_colour_group: Int
    ss_dimensions: Int
    ss_size: Int
    "Indicates whether the product is staged for a future campaign."
    staged: Boolean!
    "Stock status of the product"
    stock_status: ProductStockStatus
    "The file name of a swatch image."
    swatch_image: String
    "The relative path to the product's thumbnail image."
    thumbnail: ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason: "Use `__typename` instead.")
    "The unique ID for a `ProductInterface` object."
    uid: ID!
    "Timestamp indicating when the product was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "An array of up-sell products."
    upsell_products: [ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    "An array of websites in which the product is available."
    websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
    "The weight of the item, in units defined by the store."
    weight: Float
}

"Contains details about gift cards added to a requisition list."
type GiftCardRequisitionListItem implements RequisitionListItemInterface {
    "Selected custom options for an item in the requisition list."
    customizable_options: [SelectedCustomizableOption]!
    "An array that defines gift card properties."
    gift_card_options: GiftCardOptions!
    "Details about a requisition list item."
    product: ProductInterface!
    "The amount added."
    quantity: Float!
    "The unique ID for the requisition list item."
    uid: ID!
}

type GiftCardShipmentItem implements ShipmentItemInterface {
    "Selected gift card properties for a shipment item."
    gift_card: GiftCardItem
    "The unique ID for a `ShipmentItemInterface` object."
    id: ID!
    "The order item associated with the shipment item."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of shipped items."
    quantity_shipped: Float!
}

"A single gift card added to a wish list."
type GiftCardWishlistItem implements WishlistItemInterface {
    "The date and time the item was added to the wish list."
    added_at: String!
    "Custom options selected for the wish list item."
    customizable_options: [SelectedCustomizableOption]!
    "The description of the item."
    description: String
    "Details about a gift card."
    gift_card_options: GiftCardOptions!
    "The unique ID for a `WishlistItemInterface` object."
    id: ID!
    "Product details of the wish list item."
    product: ProductInterface
    "The quantity of this wish list item."
    quantity: Float!
}

type GiftCards {
    "Individual Gift Card Amount"
    amount: Money!
    "Applied Gift Card Code"
    code: String!
}

"Contains the text of a gift message, its sender, and recipient"
type GiftMessage {
    "Sender name"
    from: String!
    "Gift message text"
    message: String!
    "Recipient name"
    to: String!
}

"Contains prices for gift wrapping options."
type GiftOptionsPrices {
    "Price of the gift wrapping for all individual order items."
    gift_wrapping_for_items: Money
    "Price of the gift wrapping for the whole order."
    gift_wrapping_for_order: Money
    "Price for the printed card."
    printed_card: Money
}

"Contains details about a gift registry."
type GiftRegistry {
    bought_items: Int
    "The date on which the gift registry was created. Only the registry owner can access this attribute."
    created_at: String
    customer_contact_number: String
    customer_email: String
    customer_firstname: String
    customer_id: String
    customer_lastname: String
    "Is the user opted in for daily registry email updates (when item is purchased)."
    daily_update_opt_in: Boolean
    "An array of attributes that define elements of the gift registry. Each attribute is specified as a code-value pair."
    dynamic_attributes: [GiftRegistryDynamicAttribute]
    event_country: String
    event_date: String
    event_location: String
    "The name of the event."
    event_name: String!
    event_region_id: Int
    event_type: Int
    gift_registry_id: String
    gift_registry_share: String
    in_stock_items: [GiftRegistryItemInterface]
    is_active: Boolean
    is_public: Boolean
    "An array of products added to the gift registry."
    items: [GiftRegistryItemInterface]
    "The message text the customer entered to describe the event."
    message: String
    out_of_stock_items: [GiftRegistryItemInterface]
    "The customer who created the gift registry."
    owner_name: String!
    preferred_delivery_method_code: String
    "An enum that states whether the gift registry is PRIVATE or PUBLIC. Only the registry owner can access this attribute."
    privacy_settings: GiftRegistryPrivacySettings!
    "Contains details about each registrant for the event."
    registrants: [GiftRegistryRegistrant]
    "Contains the customer's shipping address. Only the registry owner can access this attribute."
    shipping_address: CustomerAddress
    "An enum that states whether the gift registry is ACTIVE or INACTIVE. Only the registry owner can access this attribute."
    status: GiftRegistryStatus!
    title: String
    total_items: Int
    "The type of gift registry."
    type: GiftRegistryType
    "The unique ID assigned to the gift registry."
    uid: ID!
    url_key: String
    website_id: Int
    "Is the user opted in for weekly registry email updates."
    weekly_update_opt_in: Boolean
}

type GiftRegistryDynamicAttribute implements GiftRegistryDynamicAttributeInterface {
    "The internal ID of the dynamic attribute."
    code: ID!
    "Indicates which group the dynamic attribute is a member of."
    group: GiftRegistryDynamicAttributeGroup!
    "The display name of the dynamic attribute."
    label: String!
    "A corresponding value for the code."
    value: String!
}

type GiftRegistryDynamicAttributeMetadata implements GiftRegistryDynamicAttributeMetadataInterface {
    "Indicates which group the dynamic attribute a member of."
    attribute_group: String!
    "The internal ID of the dynamic attribute."
    code: ID!
    "The selected input type for this dynamic attribute. The value can be one of several static or custom types."
    input_type: String!
    "Indicates whether the dynamic attribute is required."
    is_required: Boolean!
    "The display name of the dynamic attribute."
    label: String!
    "The order in which to display the dynamic attribute."
    sort_order: Int
}

type GiftRegistryItem implements GiftRegistryItemInterface {
    "The date the product was added to the gift registry."
    created_at: String!
    customizable_options: [SelectedCustomizableOption]
    giftregistry_item_uid: String
    "A brief message about the gift registry item."
    note: String
    "Details about the gift registry item."
    product: ProductInterface
    purchasers: [Purchaser]
    "The requested quantity of the product."
    quantity: Float!
    "The fulfilled quantity of the product."
    quantity_fulfilled: Float!
    "The unique ID of a gift registry item."
    uid: ID!
}

"Contains error information."
type GiftRegistryItemUserErrors implements GiftRegistryItemUserErrorInterface {
    "Indicates whether the attempt to move the cart items to the gift registry was successful."
    status: Boolean!
    "An array of errors encountered while moving items from the cart to the gift registry."
    user_errors: [GiftRegistryItemsUserError]!
}

"Contains details about an error that occurred when processing a gift registry item."
type GiftRegistryItemsUserError {
    "An error code that describes the error encountered."
    code: GiftRegistryItemsUserErrorType!
    "The unique ID of the gift registry item containing an error."
    gift_registry_item_uid: ID
    "The unique ID of the `GiftRegistry` object containing an error."
    gift_registry_uid: ID
    "A localized error message."
    message: String!
    "The unique ID of the product containing an error."
    product_uid: ID
}

"Contains details about the gift registry."
type GiftRegistryOutput implements GiftRegistryOutputInterface {
    "The gift registry."
    gift_registry: GiftRegistry
}

"Contains details about a registrant."
type GiftRegistryRegistrant {
    "An array of dynamic attributes assigned to the registrant."
    dynamic_attributes: [GiftRegistryRegistrantDynamicAttribute]
    "The email address of the registrant. Only the registry owner can access this attribute."
    email: String!
    "The first name of the registrant."
    firstname: String!
    "The last name of the registrant."
    lastname: String!
    "The unique ID assigned to the registrant."
    uid: ID!
}

type GiftRegistryRegistrantDynamicAttribute implements GiftRegistryDynamicAttributeInterface {
    "The internal ID of the dynamic attribute."
    code: ID!
    "The display name of the dynamic attribute."
    label: String!
    "A corresponding value for the code."
    value: String!
}

"Contains the results of a gift registry search."
type GiftRegistrySearchResult {
    "The date of the event."
    event_date: String
    "The title given to the event."
    event_title: String!
    "The URL key of the gift registry."
    gift_registry_uid: ID!
    "The location of the event."
    location: String
    "The name of the gift registry owner."
    name: String!
    "The type of event being held."
    type: String
}

"Contains details about a gift registry type."
type GiftRegistryType {
    "An array of attributes that define elements of the gift registry. Each attribute is specified as a code-value pair."
    dynamic_attributes_metadata: [GiftRegistryDynamicAttributeMetadataInterface]
    "The label assigned to the gift registry type on the Admin."
    label: String!
    "The unique ID assigned to the gift registry type."
    uid: ID!
}

"Contains details about the selected or available gift wrapping options."
type GiftWrapping {
    "The name of the gift wrapping design."
    design: String!
    "The unique ID for a `GiftWrapping` object."
    id: ID! @deprecated(reason: "Use `uid` instead")
    "The preview image for a gift wrapping option."
    image: GiftWrappingImage
    "The gift wrapping price."
    price: Money!
    "The unique ID for a `GiftWrapping` object."
    uid: ID!
}

"Points to an image associated with a gift wrapping option."
type GiftWrappingImage {
    "The gift wrapping preview image label."
    label: String!
    "The gift wrapping preview image URL."
    url: String!
}

"Google Places prediction"
type GooglePlacePrediction {
    "Contains the human-readable name for the returned result"
    description: String!
    "Id of the predicted result"
    id: String!
    "These describe the location of the entered term in the prediction result text, so that the term can be highlighted if desired"
    matchedSubstrings: [OffsetLength!]!
    "Is a textual identifier that uniquely identifies a place"
    placeId: String!
    "The MRPG HO ecom service status message"
    reference: String!
    "Provides pre-formatted text that can be shown in your autocomplete results"
    structuredFormatting: StructuredFormat!
    "Contains an array of terms identifying each section of the returned description"
    terms: [OffsetValue!]!
    "Contains an array of types that apply to this place"
    types: [String]
}

"Defines a grouped product, which consists of simple standalone products that are presented as a group."
type GroupedProduct implements PhysicalProductInterface & ProductInterface & RoutableInterface {
    about_the_brand: String
    "Array of additionally defined product attributes."
    additional_attributes: [AdditionalAttribute]!
    additional_tab_info: String
    additional_tab_info2: String
    additional_tab_info3: String
    additional_tab_info5: String
    "The attribute set assigned to the product."
    attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")
    "A list of badges applied to the product"
    badges: [ProductBadge]
    blog_author: Int
    blog_content: String
    blog_publish_date: String
    "The brand name for this product - MRP_Brand, MRPH_Brand or MRPS_Brand"
    brand: String
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled."
    canonical_url: String
    "The categories assigned to a product."
    categories: [CategoryInterface]
    "CMS block IDs for the top, middle and bottom of a PDP page."
    cms_blocks_top_middle_bottom: PDPcmsBlocks @deprecated(reason: "Use pdp_cms_blocks, caters for both PWA & APP")
    "A list of configurable product SKUs used to build product swatch cluster"
    configurable_product_swatch_cluster: [String]
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "An array of cross-sell products."
    crosssell_products: [ProductInterface]
    custom_special_text: String
    delivery_and_returns: String
    "Detailed information about the product. The value can include simple HTML tags."
    description: ComplexTextValue
    "Indicates whether a gift message is available."
    gift_message_available: String
    "The ID number assigned to the product."
    id: Int @deprecated(reason: "Use the `uid` field instead.")
    "The relative path to the main image on the product page."
    image: ProductImage
    image_content_type: String
    image_group_set: String
    image_product_code: String
    image_sequence_number: String
    is_essential: Int
    is_hero_product: Int
    "Indicates whether the product can be returned."
    is_returnable: String
    "An array containing grouped product items."
    items: [GroupedProductItem]
    "A list of label phrase/text on the product"
    labels: [ProductLabel]
    left_badge: String
    left_badge_enabled: Int
    length: String
    "The Product made_to_order attribute."
    made_to_order: Boolean
    "A number representing the product's manufacturer."
    manufacturer: Int
    "An array of media gallery objects."
    media_gallery: [MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    "Mageplaza labels applied on the product"
    mp_label_data: [LabelRules]
    mrp_b_online_category: Int
    mrp_b_onlinesubcategory: Int
    mrp_bottom_size: Int
    mrp_brand: Int
    mrp_colour: Int
    mrp_colour_group: Int
    mrp_e_pattern: Int
    mrp_garment_length: Int
    mrp_neckline: Int
    mrp_occasion: Int
    mrp_online_baby_b_category: Int
    mrp_online_baby_b_sub_category: Int
    mrp_online_baby_g_category: Int
    mrp_online_baby_g_sub_category: Int
    mrp_online_bb_category: Int
    mrp_online_bb_sub_category: Int
    mrp_online_bg_category: Int
    mrp_online_bg_sub_category: Int
    mrp_online_category: Int
    mrp_online_m_category: Int
    mrp_online_m_sub_category: Int
    mrp_online_nursery_category: Int
    mrp_online_pb_category: Int
    mrp_online_pb_sub_category: Int
    mrp_online_pg_category: Int
    mrp_online_pg_sub_category: Int
    mrp_online_sub_category: Int
    mrp_pattern_mens_shirts: Int
    mrp_shape: Int
    mrp_shoe_size: Int
    mrp_shoesize_bigkids: Int
    mrp_shopbytrend: Int
    mrp_size: Int
    mrp_sleeve_length: Int
    mrp_underwear_l_size: Int
    mrp_underwear_size: Int
    mrph_bedding_size: Int
    mrph_brand: Int
    mrph_colour: Int
    mrph_colour_group: Int
    mrph_cushions_size: Int
    mrph_dimensions: Int
    mrph_fabric: Int
    mrph_shape: Int
    mrph_size: Int
    mrph_towels_size: Int
    mrph_window_coverings_size: Int
    mrpm_brands: Int
    "Color of the cellular product."
    mrpm_color: String
    mrpm_colour: Int
    "Network provider of the cellular product."
    mrpm_network_provider: Int
    "Size/Dimensions of cellular product if applicable."
    mrpm_size: Int
    "Internal SKU, not the same as the Magento fulfillment SKU."
    mrpm_sku: String
    mrps_brand: Int
    mrps_colour: Int
    mrps_colour_group: Int
    mrps_dimension: Int
    mrps_garment_length: Int
    mrps_neckline: Int
    mrps_size_outdoor_equip: Int
    mrps_size_outerwear: Int
    mrps_size_shoes: Int
    mrps_size_sports: Int
    mrps_size_underwear_bras: Int
    mrps_sub_category: Int
    mrps_sub_sub_category: Int
    mrps_underwear_bras: Int
    "The product name. Customers use this name to identify the product."
    name: String
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The end date for new product listings."
    new_to_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "Product stock only x left count"
    only_x_left_in_stock: Float
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    "Product parent SKU, this will be used for filtering of products."
    par_sku: String
    "PDP CMS blocks for various regions on the PDP page i.e. top, middle bottom etc."
    pdp_cms_blocks: [CmsBlock]
    "Indicates the price of an item."
    price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")
    "The range of prices for the product"
    price_range: PriceRange!
    "An array of `TierPrice` objects."
    price_tiers: [TierPrice]
    "An array of `ProductLinks` objects."
    product_links: [ProductLinksInterface]
    "Product Url of the product."
    product_url: String
    promo_image_url: String
    promo_text: String
    "The average of all the ratings given to the product."
    rating_summary: Float!
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "An array of related products."
    related_products: [ProductInterface]
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "The total count of all the reviews given to the product."
    review_count: Int!
    "The list of products reviews."
    reviews(
        "The page of results to return. The default is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): ProductReviews!
    right_badge_enabled: Int
    "Get Salable Quantity of Simple Product"
    salable_quantity: Float
    "The code assigned to the Scene7 image."
    scene_seven_image_url: String
    "A short description of the product. Its use depends on the theme."
    short_description: ComplexTextValue
    size_chart: String
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: ProductImage
    special_badge_image_name: String
    "The beginning date that a product has a special price."
    special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The discounted price of the product."
    special_price: Float
    special_price_badge: Int
    special_text: Int
    special_text_background_color: String
    special_text_bg_color_opacity: String
    "The end date for a product with a special price."
    special_to_date: String
    ss_brand: Int
    ss_colour_group: Int
    ss_dimensions: Int
    ss_size: Int
    "Indicates whether the product is staged for a future campaign."
    staged: Boolean!
    "Stock status of the product"
    stock_status: ProductStockStatus
    "The file name of a swatch image."
    swatch_image: String
    "The relative path to the product's thumbnail image."
    thumbnail: ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason: "Use `__typename` instead.")
    "The unique ID for a `ProductInterface` object."
    uid: ID!
    "Timestamp indicating when the product was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "An array of up-sell products."
    upsell_products: [ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    "An array of websites in which the product is available."
    websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
    "The weight of the item, in units defined by the store."
    weight: Float
}

"Contains information about an individual grouped product item."
type GroupedProductItem {
    "The relative position of this item compared to the other group items."
    position: Int
    "Details about this product option."
    product: ProductInterface
    "The quantity of this grouped product item."
    qty: Float
}

"A grouped product wish list item."
type GroupedProductWishlistItem implements WishlistItemInterface {
    "The date and time the item was added to the wish list."
    added_at: String!
    "Custom options selected for the wish list item."
    customizable_options: [SelectedCustomizableOption]!
    "The description of the item."
    description: String
    "The unique ID for a `WishlistItemInterface` object."
    id: ID!
    "Product details of the wish list item."
    product: ProductInterface
    "The quantity of this wish list item."
    quantity: Float!
}

"Contains the secure URL used for the Payments Pro Hosted Solution payment method."
type HostedProUrl {
    "The secure URL generated by PayPal."
    secure_form_url: String
}

"Contains target path parameters."
type HttpQueryParameter {
    "A parameter name."
    name: String
    "A parameter value."
    value: String
}

type ImageSwatchData implements SwatchDataInterface {
    "The URL assigned to the thumbnail of the swatch image."
    thumbnail: String
    "The value can be represented as color (HEX code), image link, or text."
    value: String
}

type InfoBuyRequest {
    attributes: String
    product: Int
    selected_configurable_option: Int
    simple_product: String
}

type InsurancePlan {
    "The text for the call to action button."
    activate_plan_button: ActivatePlanButton!
    "A flag that indicates if the plan is allowed for new account creation or not."
    allow_new: Boolean!
    "The url for the insurance plans background image."
    background_image_url: String
    "The insurance plan identified to be passed to Service Layer."
    code: String!
    "The disclaimer for the insurance plan returned as HTML."
    disclaimer: String
    "The url for the associated insurance plan image."
    image_url: String!
    "The full description of the insurance plan returned as HTML."
    long_description: String!
    "The various insurance plan options that are available. Only applicable to customers that have an active MRP Money account."
    plan_options: [InsurancePlanOption]
    "The text for the read less button"
    read_less_text: String!
    "The text for the read more button"
    read_more_text: String!
    "A brief summary of the insurance product."
    short_description: String!
    "The insurance plan title."
    title: String!
}

type InsurancePlanOption {
    "The insurance plan option identified to be passed to Service Layer."
    code: String!
    "The description of the insurance plan option."
    description: String!
    "The price for the insurance plan option."
    price: Money!
    "The label to be displayed for the insurance plan option."
    title: String!
}

"Contains an error message when an internal error occurred."
type InternalError implements ErrorInterface {
    "The returned error message."
    message: String!
}

"Contains invoice details."
type Invoice {
    "Comments on the invoice."
    comments: [SalesCommentItem]
    "The unique ID for a `Invoice` object."
    id: ID!
    "Invoiced product details."
    items: [InvoiceItemInterface]
    "Sequential invoice number."
    number: String!
    "Invoice total amount details."
    total: InvoiceTotal
}

type InvoiceItem implements InvoiceItemInterface {
    "Information about the final discount amount for the base product, including discounts on options."
    discounts: [Discount]
    "The unique ID for an `InvoiceItemInterface` object."
    id: ID!
    "Details about an individual order item."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of invoiced items."
    quantity_invoiced: Float
}

"Contains price details from an invoice."
type InvoiceTotal {
    "The final base grand total amount in the base currency."
    base_grand_total: Money!
    "The applied discounts to the invoice."
    discounts: [Discount]
    "The final total amount, including shipping, discounts, and taxes."
    grand_total: Money!
    "Details about the shipping and handling costs for the invoice."
    shipping_handling: ShippingHandling
    "The subtotal of the invoice, excluding shipping, discounts, and taxes."
    subtotal: Money!
    "The invoice tax details."
    taxes: [TaxItem]
    "The shipping amount for the invoice."
    total_shipping: Money!
    "The amount of tax applied to the invoice."
    total_tax: Money!
}

"Contains the response of a company admin email validation query."
type IsCompanyAdminEmailAvailableOutput {
    "Indicates whether the specified email address can be used to create a company administrator."
    is_email_available: Boolean!
}

"Contains the response of a company email validation query."
type IsCompanyEmailAvailableOutput {
    "Indicates whether the specified email address can be used to create a company."
    is_email_available: Boolean!
}

"Contains the response of a role name validation query."
type IsCompanyRoleNameAvailableOutput {
    "Indicates whether the specified company role name is available."
    is_role_name_available: Boolean!
}

"Contains the response of a company user email validation query."
type IsCompanyUserEmailAvailableOutput {
    "Indicates whether the specified email address can be used to create a company user."
    is_email_available: Boolean!
}

"Contains the result of the `isEmailAvailable` query."
type IsEmailAvailableOutput {
    "Indicates whether the specified email address can be used to create a customer."
    is_email_available: Boolean
}

"A list of options of the selected bundle product."
type ItemSelectedBundleOption {
    "The unique ID for a `ItemSelectedBundleOption` object."
    id: ID! @deprecated(reason: "Use `uid` instead.")
    "The label of the option."
    label: String!
    "The unique ID for a `ItemSelectedBundleOption` object."
    uid: ID!
    "A list of products that represent the values of the parent option."
    values: [ItemSelectedBundleOptionValue]
}

"A list of values for the selected bundle product."
type ItemSelectedBundleOptionValue {
    "The unique ID for a `ItemSelectedBundleOptionValue` object."
    id: ID! @deprecated(reason: "Use `uid` instead.")
    "The price of the child bundle product."
    price: Money!
    "The name of the child bundle product."
    product_name: String!
    "The SKU of the child bundle product."
    product_sku: String!
    "The number of this bundle product that were ordered."
    quantity: Float!
    "The unique ID for a `ItemSelectedBundleOptionValue` object."
    uid: ID!
}

type ItemsV2 {
    added_at: String!
    description: String!
    id: ID!
    product: ProductInterface
    quantity: Float!
}

"Contains a key-value pair."
type KeyValue {
    "The name part of the key/value pair."
    name: String
    "The value part of the key/value pair."
    value: String
}

type LabelRules {
    "Is the bestseller products applied by conditions?"
    bestseller: Int
    "Conditions"
    conditions_serialized: String
    "Date of the last modification of the rule"
    created_at: String
    "The customer group IDs apply label rules"
    customer_group_ids: String
    "Status of label rule"
    enabled: Int
    "Rule start date"
    from_date: String
    "The label text on product page"
    label: String
    "The label color on product page"
    label_color: String
    "The custom CSS on product page"
    label_css: String
    "The label font on product page"
    label_font: String
    "The label font size on product page"
    label_font_size: String
    "The label image path on product page"
    label_image: String
    "Label position on product page"
    label_position: String
    "Label position on grid"
    label_position_grid: String
    "The label template path on product page"
    label_template: String
    "Restrict the bestseller product from being applied"
    limit: String
    "The label color on category page"
    list_color: String
    "The custom CSS on category page"
    list_css: String
    "The label font on category page"
    list_font: String
    "The label font size on category page"
    list_font_size: String
    "The label image path on category page"
    list_image: String
    "The label text on category page"
    list_label: String
    "Label position on category page"
    list_position: String
    "Label position on grid"
    list_position_grid: String
    "The label template path on category page"
    list_template: String
    "The label rule name"
    name: String
    "Priority between label rules"
    priority: String
    "The label rule id"
    rule_id: Int
    "Label on category page is the same as product page"
    same: Int
    "Stop the process from the following rules"
    stop_process: String
    "The store applies label rules"
    store_ids: String
    "Rule end date"
    to_date: String
    "Rule creation date"
    updated_at: String
}

type LabelRulesOutput {
    "Label rule data is satisfied"
    items: [LabelRules]
    "The total number of results returned when a query is applied"
    total_count: Int
}

type LastUsedSavedCard {
    active: Boolean
    additional: AdditionalCardAttributeData
    created_at: String
    expiry: String
    hash: String
    updated_at: String
}

"Contains information for rendering layered navigation."
type LayerFilter {
    "An array of filter items."
    filter_items: [LayerFilterItemInterface] @deprecated(reason: "Use `Aggregation.options` instead.")
    "The count of filter items in filter group."
    filter_items_count: Int @deprecated(reason: "Use `Aggregation.count` instead.")
    "The name of a layered navigation filter."
    name: String @deprecated(reason: "Use `Aggregation.label` instead.")
    "The request variable name for a filter query."
    request_var: String @deprecated(reason: "Use `Aggregation.attribute_code` instead.")
}

type LayerFilterItem implements LayerFilterItemInterface {
    "The count of items per filter."
    items_count: Int @deprecated(reason: "Use `AggregationOption.count` instead.")
    "The label for a filter."
    label: String @deprecated(reason: "Use `AggregationOption.label` instead.")
    "The value of a filter request variable to be used in query."
    value_string: String @deprecated(reason: "Use `AggregationOption.value` instead.")
}

type LayoutUpdateDetails {
    container: String
    entities: String
    instance_id: Int
    layout_handle: String
    page: String
    page_group: String
}

type Line {
    description: String
    item: String
    prefix: String
    quantity: String
    taxIndicator: String
    taxPercent: String
    value: String
}

type LinkStatus {
    message: String!
    status: String!
}

"Defines characteristics about images and videos associated with a specific product."
type MediaGalleryEntry {
    "Details about the content of the media gallery item."
    content: ProductMediaGalleryEntriesContent
    "Indicates whether the image is hidden from view."
    disabled: Boolean
    "The path of the image on the server."
    file: String
    "The identifier assigned to the object."
    id: Int @deprecated(reason: "Use `uid` instead.")
    "The alt text displayed on the storefront when the user points to the image."
    label: String
    "Either `image` or `video`."
    media_type: String
    "The media item's position after it has been sorted."
    position: Int
    "Array of image types. It can have the following values: image, small_image, thumbnail."
    types: [String]
    "The unique ID for a `MediaGalleryEntry` object."
    uid: ID!
    "Details about the content of a video item."
    video_content: ProductMediaGalleryEntriesVideoContent
}

type MobileProvider {
    "The airtime options applicable to the mobile provider."
    airtime: MobileProviderAirtimePackage!
    "The mobile provider identified to be passed to Service Layer."
    code: String!
    "The mobile data options applicable to the mobile provider."
    mobile_data: MobileProviderDataPackage!
    "The mobile provider name."
    name: String!
}

type MobileProviderAirtimePackage {
    "A list of pre-defined rand values that can be requested when making a purchase for the mobile provider. If populated only these specific values can be requested."
    fixed_values: [Money]
    "The maximum rand value that can be requested when making a purchase for the mobile provider."
    maximum_value: Money!
    "The minimum rand value that can be requested when making a purchase for the mobile provider."
    minimum_value: Money!
    "The service type identifier to be passed to Service Layer, AIRTIME = 1, DATA = 2"
    service_type: MobileProviderServiceType!
    status: Boolean!
}

type MobileProviderDataPackage {
    "A list of pre-defined packages that are available for purchase from the mobile provider."
    data_options: [MobileProviderOption]!
    "The service type identifier to be passed to Service Layer, AIRTIME = 1, DATA = 2"
    service_type: MobileProviderServiceType!
    status: Boolean!
}

type MobileProviderOption {
    "The mobile provider option identiifier to be passed to Service Layer."
    code: String
    "The label to be displayed for mobile provider option."
    title: String
}

"Defines a monetary value, including a numeric value and a currency code."
type Money {
    "A three-letter currency code, such as USD or EUR."
    currency: CurrencyEnum
    "A number expressing a monetary value."
    value: Float
}

"Contains the customer's gift registry and any errors encountered."
type MoveCartItemsToGiftRegistryOutput implements GiftRegistryItemUserErrorInterface & GiftRegistryOutputInterface {
    "The gift registry."
    gift_registry: GiftRegistry
    "Indicates whether the attempt to move the cart items to the gift registry was successful."
    status: Boolean!
    "An array of errors encountered while moving items from the cart to the gift registry."
    user_errors: [GiftRegistryItemsUserError]!
}

"Output of the request to move items to another requisition list."
type MoveItemsBetweenRequisitionListsOutput {
    "The destination requisition list after moving items."
    destination_requisition_list: RequisitionList
    "The source requisition list after moving items."
    source_requisition_list: RequisitionList
}

"Contains the source and target wish lists after moving products."
type MoveProductsBetweenWishlistsOutput {
    "The destination wish list after receiving products moved from the source wish list."
    destination_wishlist: Wishlist!
    "The source wish list after moving products from it."
    source_wishlist: Wishlist!
    "An array of errors encountered while moving products to a wish list."
    user_errors: [WishListUserInputError]!
}

"Contains the customer's gift registry and any errors encountered."
type MoveSelectedCartItemsToGiftRegistryOutput implements GiftRegistryItemUserErrorInterface & GiftRegistryOutputInterface {
    "The gift registry."
    gift_registry: GiftRegistry
    "Indicates whether the attempt to move the cart items to the gift registry was successful."
    status: Boolean!
    "An array of errors encountered while moving items from the cart to the gift registry."
    user_errors: [GiftRegistryItemsUserError]!
}

type Mutation {
    "Add one or more bundle products to the specified cart. We recommend using `addProductsToCart` instead."
    addBundleProductsToCart(
        "An input object that defines which bundle products to add to the cart."
        input: AddBundleProductsToCartInput
    ): AddBundleProductsToCartOutput
    "Add one or more configurable products to the specified cart. We recommend using `addProductsToCart` instead."
    addConfigurableProductsToCart(
        "An input object that defines which configurable products to add to the cart."
        input: AddConfigurableProductsToCartInput
    ): AddConfigurableProductsToCartOutput
    "Add one or more downloadable products to the specified cart. We recommend using `addProductsToCart` instead."
    addDownloadableProductsToCart(
        "An input object that defines which downloadable products to add to the cart."
        input: AddDownloadableProductsToCartInput
    ): AddDownloadableProductsToCartOutput
    "Add registrants to the specified gift registry."
    addGiftRegistryRegistrants(
        "The unique ID of the gift registry."
        giftRegistryUid: ID!,
        "An array registrants to add."
        registrants: [AddGiftRegistryRegistrantInput!]!
    ): AddGiftRegistryRegistrantsOutput
    addMrpMoneyToCart(input: AddMrpMoneyToCartInput!): AddVirtualProductsToCartOutput
    "Add any type of product to the cart."
    addProductsToCart(
        "The cart ID of the shopper."
        cartId: String!,
        "An array that defines the products to add to the cart."
        cartItems: [CartItemInput!]!
    ): AddProductsToCartOutput
    "Add products to the specified compare list."
    addProductsToCompareList(
        "An input object that defines which products to add to an existing compare list."
        input: AddProductsToCompareListInput
    ): CompareList
    "Add more detail here"
    addProductsToGiftRegistry(giftRegistryItems: [AddGiftRegistryItemInput!]!, giftRegistryUid: ID!): GiftRegistry!
    "Add items to the specified requisition list."
    addProductsToRequisitionList(
        "An array of products to be added to the requisition list."
        requisitionListItems: [RequisitionListItemsInput!]!,
        "The unique ID of the requisition list."
        requisitionListUid: ID!
    ): AddProductsToRequisitionListOutput
    "Add one or more products to the specified wish list. This mutation supports all product types."
    addProductsToWishlist(
        "The ID of a wish list."
        wishlistId: ID!,
        "An array of products to add to the wish list."
        wishlistItems: [WishlistItemInput!]!
    ): AddProductsToWishlistOutput
    "Add items in the requisition list to the customer's cart."
    addRequisitionListItemsToCart(
        "An array of UIDs presenting products to be added to the cart. If no UIDs are specified, all items in the requisition list will be added to the cart."
        requisitionListItemUids: [ID!],
        "The unique ID of the requisition list."
        requisitionListUid: ID!
    ): AddRequisitionListItemsToCartOutput
    "Add a comment to an existing return."
    addReturnComment(
        "An input object that defines a return comment."
        input: AddReturnCommentInput!
    ): AddReturnCommentOutput
    "Add tracking information to the return."
    addReturnTracking(
        "An input object that defines tracking information."
        input: AddReturnTrackingInput!
    ): AddReturnTrackingOutput
    "Add one or more simple products to the specified cart. We recommend using `addProductsToCart` instead."
    addSimpleProductsToCart(
        "An input object that defines which simple products to add to the cart."
        input: AddSimpleProductsToCartInput
    ): AddSimpleProductsToCartOutput
    "Add one or more virtual products to the specified cart. We recommend using `addProductsToCart` instead."
    addVirtualProductsToCart(
        "An input object that defines which virtual products to add to the cart."
        input: AddVirtualProductsToCartInput
    ): AddVirtualProductsToCartOutput
    "Add items in the specified wishlist to the customer's cart."
    addWishlistItemsToCart(
        "The unique ID of the wish list"
        wishlistId: ID!,
        "An array of IDs representing products to be added to the cart. If no IDs are specified, all items in the wishlist will be added to the cart"
        wishlistItemIds: [ID!]
    ): AddWishlistItemsToCartOutput
    "Apply a pre-defined coupon code to the specified cart."
    applyCouponToCart(
        "An input object that defines the coupon code to apply to the cart."
        input: ApplyCouponToCartInput
    ): ApplyCouponToCartOutput
    "Apply a pre-defined gift card code to the specified cart."
    applyGiftCardToCart(
        "An input object that specifies the gift card code and cart."
        input: ApplyGiftCardToCartInput
    ): ApplyGiftCardToCartOutput
    "Apply all available points, up to the cart total. Partial redemption is not available."
    applyRewardPointsToCart(cartId: ID!): ApplyRewardPointsToCartOutput
    "Apply store credit to the specified cart."
    applyStoreCreditToCart(
        "An input object that specifies the cart ID."
        input: ApplyStoreCreditToCartInput!
    ): ApplyStoreCreditToCartOutput
    "Assign the specified compare list to the logged in customer."
    assignCompareListToCustomer(
        "The unique ID of the compare list to be assigned."
        uid: ID!
    ): AssignCompareListToCustomerOutput
    "Assign a logged-in customer to the specified guest shopping cart."
    assignCustomerToGuestCart(cart_id: String!): Cart!
    b2bCreateApplication(request: SLCreateCompanyRequest!): B2BCreateApplicationResponse
    "Change the password for the logged-in customer."
    changeCustomerPassword(
        "The customer's original password."
        currentPassword: String!,
        "The customer's updated password."
        newPassword: String!
    ): Customer
    "Remove all items from the specified cart."
    clearCustomerCart(
        "The masked ID of the cart."
        cartUid: String!
    ): ClearCustomerCartOutput
    "Mark a negotiable quote as closed. The negotiable quote is still visible on the storefront."
    closeNegotiableQuotes(
        "An input object that closes a negotiable quote."
        input: CloseNegotiableQuotesInput!
    ): CloseNegotiableQuotesOutput
    "Send a 'Contact Us' email to the merchant."
    contactUs(
        "An input object that defines shopper information."
        input: ContactUsInput!
    ): ContactUsOutput
    "Copy items from one requisition list to another."
    copyItemsBetweenRequisitionLists(
        "The unique ID of the destination requisition list. If null, a new requisition list will be created."
        destinationRequisitionListUid: ID,
        "The list of products to copy."
        requisitionListItem: CopyItemsBetweenRequisitionListsInput,
        "The unique ID of the source requisition list."
        sourceRequisitionListUid: ID!
    ): CopyItemsFromRequisitionListsOutput
    "Copy products from one wish list to another. The original wish list is unchanged."
    copyProductsBetweenWishlists(
        "The ID of the target wish list."
        destinationWishlistUid: ID!,
        "The ID of the original wish list."
        sourceWishlistUid: ID!,
        "An array of items to copy."
        wishlistItems: [WishlistItemCopyInput!]!
    ): CopyProductsBetweenWishlistsOutput
    "Creates Client Token for Braintree Javascript SDK initialization."
    createBraintreeClientToken: String!
    "Create a company at the request of either a customer or a guest."
    createCompany(input: CompanyCreateInput!): CreateCompanyOutput
    "Create a new company role."
    createCompanyRole(input: CompanyRoleCreateInput!): CreateCompanyRoleOutput
    "Create a new team for the authenticated customer's company."
    createCompanyTeam(input: CompanyTeamCreateInput!): CreateCompanyTeamOutput
    "Create a new company user at the request of an existing customer."
    createCompanyUser(input: CompanyUserCreateInput!): CreateCompanyUserOutput
    "Create a new compare list. The compare list is saved for logged in customers."
    createCompareList(input: CreateCompareListInput): CompareList
    "Use `createCustomerV2` instead."
    createCustomer(
        "An input object that defines the customer to be created."
        input: CustomerInput!
    ): CustomerOutput
    "Create a billing or shipping address for a customer or guest."
    createCustomerAddress(input: CustomerAddressInput!): CustomerAddress
    "Create a customer account."
    createCustomerV2(
        "An input object that defines the customer to be created."
        input: CustomerCreateInput!
    ): CustomerOutput
    "Create an empty shopping cart for a guest or logged in user"
    createEmptyCart(
        "An optional input object that assigns the specified ID to the cart."
        input: createEmptyCartInput
    ): String
    "Create a gift registry on behalf of the customer."
    createGiftRegistry(
        "An input object that defines a new gift registry."
        giftRegistry: CreateGiftRegistryInput!
    ): CreateGiftRegistryOutput
    "Initiate a transaction and receive a token. Use this mutation for Payflow Pro and Payments Pro payment methods"
    createPayflowProToken(
        "An input object that defines the requirements to fetch payment token information."
        input: PayflowProTokenInput!
    ): CreatePayflowProTokenOutput
    "Initiate an Express Checkout transaction and receive a token. Use this mutation for Express Checkout and Payments Standard payment methods."
    createPaypalExpressToken(
        "An input object that defines the requirements to receive a payment token."
        input: PaypalExpressTokenInput!
    ): PaypalExpressTokenOutput
    "Create a product review for the specified product."
    createProductReview(
        "An input object that contains the details necessary to create a product review."
        input: CreateProductReviewInput!
    ): CreateProductReviewOutput!
    "Create an empty requisition list."
    createRequisitionList(input: CreateRequisitionListInput): CreateRequisitionListOutput
    "Create a new wish list."
    createWishlist(
        "An input object that defines a new wish list."
        input: CreateWishlistInput!
    ): CreateWishlistOutput
    creditAccountAuthenticateProcessAccountPayment(request: AuthenticateProcessCreditAccountPaymentRequest!): AuthenticateProcessCreditAccountPaymentResponse
    creditAccountAuthenticateProcessGiftCardPayment(request: AuthenticateProcessGiftCardPaymentRequest!): AuthenticateProcessGiftCardPaymentResponse
    creditAccountLink(creditAccount: CreditAccount!, otpType: OTPType!): OTPRef
    creditAccountPurchaseAirtime(request: CreditAccountPurchaseAirtimeRequest!): CreditAccountPurchaseAirtimeResponse
    creditAccountPurchaseInsurance(request: CreditAccountPurchaseInsuranceRequest!): CreditAccountPurchaseInsuranceResponse
    creditAccountSaveCreditApplication(request: CreditAccountSaveCreditApplicationRequest!): CreditAccountSaveCreditApplicationResponse
    creditAccountSendOTP(otpContext: OTPContext!, otpType: OTPType!): OTPCreateResponse
    creditAccountSubmitCreditApplication(request: CreditAccountSubmitCreditApplicationRequest!): CreditAccountSubmitCreditApplicationResponse
    creditAccountUSSDCreditLimitIncrease(request: CreditAccountUSSDCreditLimitIncreaseRequest!): CreditAccountUSSDCreditLimitIncreaseResponse
    creditAccountUnlinkLink: Boolean
    creditAccountValidateOTP(otpContext: OTPContext!, pin: String!, ref: Int!): OTPValidateResponse
    "Delete the specified company role."
    deleteCompanyRole(id: ID!): DeleteCompanyRoleOutput
    "Delete the specified company team."
    deleteCompanyTeam(id: ID!): DeleteCompanyTeamOutput
    "Delete the specified company user."
    deleteCompanyUser(id: ID!): DeleteCompanyUserOutput
    "Delete the specified compare list."
    deleteCompareList(
        "The unique ID of the compare list to be deleted."
        uid: ID!
    ): DeleteCompareListOutput
    "Delete the billing or shipping address of a customer."
    deleteCustomerAddress(
        "The ID of the customer address to be deleted."
        id: Int!
    ): Boolean
    "Remmove a customer push notification token"
    deleteCustomerPushNotifyToken(push_token: String!): Boolean
    "Delete a negotiable quote. The negotiable quote will not be displayed on the storefront."
    deleteNegotiableQuotes(
        "An input object that deletes a negotiable quote."
        input: DeleteNegotiableQuotesInput!
    ): DeleteNegotiableQuotesOutput
    "Delete a customer's payment token."
    deletePaymentToken(
        "The reusable payment token securely stored in the vault."
        public_hash: String!
    ): DeletePaymentTokenOutput
    "Delete a requisition list."
    deleteRequisitionList(
        "The unique ID of the requisition list."
        requisitionListUid: ID!
    ): DeleteRequisitionListOutput
    "Delete items from a requisition list."
    deleteRequisitionListItems(
        "An array of UIDs representing products to be removed from the requisition list."
        requisitionListItemUids: [ID!]!,
        "The unique ID of the requisition list."
        requisitionListUid: ID!
    ): DeleteRequisitionListItemsOutput
    "Retrieve the saved tokens/card details for a customer."
    deleteSavedCustomerToken(token_hash: String!): Boolean!
    "Delete the specified wish list. You cannot delete the customer's default (first) wish list."
    deleteWishlist(
        "The ID of the wish list to delete."
        wishlistId: ID!
    ): DeleteWishlistOutput
    digitalPaymentCancelTransaction(request: DigitalPaymentCancelTransactionRequest!): DigitalPaymentCancelTransactionResponse
    digitalPaymentProcessPayment(request: DigitalPaymentProcessPaymentRequest): DigitalPaymentProcessPaymentResponse
    digitalPaymentSendQRCode(request: DigitalPaymentSendQRCodeRequest!): DigitalPaymentSendQRCodeResponse
    "Generate a token for specified customer."
    generateCustomerToken(
        "The customer's email address."
        email: String!,
        "The customer's password."
        password: String!
    ): CustomerToken
    "Exchange a valid Apple token for a Customer Token"
    generateCustomerTokenApple(input: AppleTokenInput!): CustomerToken
    "Request a customer token so that an administrator can perform remote shopping assistance."
    generateCustomerTokenAsAdmin(
        "An input object that defines the customer email address."
        input: GenerateCustomerTokenAsAdminInput!
    ): GenerateCustomerTokenAsAdminOutput
    "Exchange a valid Facebook token for a Custom Token"
    generateCustomerTokenFacebook(input: FacebookTokenInput!): CustomerToken
    "Exchange a valid Google token for a Custom Token"
    generateCustomerTokenGoogle(input: GoogleTokenInput!): CustomerToken
    "Generates base64 encoded Invoice PDF"
    generateInvoicePDF(docket_id: Int!): Base64Encoded
    "Generates base64 encoded Orders PDF"
    generateOrderPDF(order_id: String!): Base64Encoded
    "Generates base64 encoded Statement PDF, inputs to use Y-m-d format ie. 2016-11-16"
    generateStatementPDF(date_label: String!, statement_date: String!): Base64Encoded
    "Generates base64 encoded Transaction PDF, inputs to use Y-m-d format ie. 2016-11-16"
    generateTransactionPDF(date_label: String!, end_date: String!, start_date: String!): Base64Encoded
    "Handle a payment response and save the payment in Quote. Use this mutation for Payflow Pro and Payments Pro payment methods."
    handlePayflowProResponse(
        "An input object that includes the payload returned by PayPal and the cart ID."
        input: PayflowProResponseInput!
    ): PayflowProResponseOutput
    "Final link of a customer profile to an MRP Money account that sets the account linked flag."
    linkCustomerAccount: LinkStatus
    "Transfer the contents of a guest cart into the cart of a logged-in customer."
    mergeCarts(
        "The cart ID after the guest logs in."
        destination_cart_id: String,
        "The guest's cart ID before they login."
        source_cart_id: String!
    ): Cart!
    "Move all items from the cart to a gift registry."
    moveCartItemsToGiftRegistry(
        "The unique ID of the cart containing items to be moved to a gift registry."
        cartUid: ID!,
        "The unique ID of the target gift registry."
        giftRegistryUid: ID!
    ): MoveCartItemsToGiftRegistryOutput
    "Move Items from one requisition list to another."
    moveItemsBetweenRequisitionLists(
        "The unique ID of the destination requisition list. If null, a new requisition list will be created."
        destinationRequisitionListUid: ID,
        "The list of products to move."
        requisitionListItem: MoveItemsBetweenRequisitionListsInput,
        "The unique ID of the source requisition list."
        sourceRequisitionListUid: ID!
    ): MoveItemsBetweenRequisitionListsOutput
    "Move products from one wish list to another."
    moveProductsBetweenWishlists(
        "The ID of the target wish list."
        destinationWishlistUid: ID!,
        "The ID of the original wish list."
        sourceWishlistUid: ID!,
        "An array of items to move."
        wishlistItems: [WishlistItemMoveInput!]!
    ): MoveProductsBetweenWishlistsOutput
    "Move all items from the cart to a gift registry."
    moveSelectedCartItemsToGiftRegistry(
        "The unique ID of the cart containing items to be moved to a gift registry."
        cartUid: ID!,
        "The unique ID of the target gift registry."
        giftRegistryUid: ID!,
        "The unique ID of the quote items to be moved to gift registry."
        itemUIdsToMove: [ID!]!
    ): MoveSelectedCartItemsToGiftRegistryOutput
    placeKioskOrder(input: PlaceKioskOrderInput): PlaceOrderOutput
    "Convert a negotiable quote into an order."
    placeNegotiableQuoteOrder(
        "An input object that specifies the negotiable quote."
        input: PlaceNegotiableQuoteOrderInput!
    ): PlaceNegotiableQuoteOrderOutput
    "Convert the quote into an order."
    placeOrder(
        "An input object that defines the shopper's cart ID."
        input: PlaceOrderInput
    ): PlaceOrderOutput
    "Create a Pseudo link between a customer profile to an MRP Money account. This is before the OTP has been validated and needs to be called before the full link is created."
    pseudoLinkCustomerAccount(account_details: MrpMoneyAccountDetailsInput!): LinkStatus
    "Redeem a gift card for store credit."
    redeemGiftCardBalanceAsStoreCredit(
        "An input object that specifies the gift card code to redeem."
        input: GiftCardAccountInput!
    ): GiftCardAccount
    "Reinstate a deactivated cart. Intended for use after cancelling a payment while on a 3rd party payment provider's portal that does not already have re-instating functionality."
    reinstateCart(cart_id: String!): Cart!
    "Remove a previously-applied coupon from the cart. The cart must contain at least one item in order to remove the coupon."
    removeCouponFromCart(
        "An input object that defines which coupon code to remove from the cart."
        input: RemoveCouponFromCartInput
    ): RemoveCouponFromCartOutput
    "Removes a gift card from the cart."
    removeGiftCardFromCart(
        "An input object that specifies which gift card code to remove from the cart."
        input: RemoveGiftCardFromCartInput
    ): RemoveGiftCardFromCartOutput
    "Delete the specified gift registry."
    removeGiftRegistry(
        "The unique ID of the gift registry to delete."
        giftRegistryUid: ID!
    ): RemoveGiftRegistryOutput
    "Delete the specified items from a gift registry."
    removeGiftRegistryItems(
        "The unique ID of the gift registry."
        giftRegistryUid: ID!,
        "An array of item IDs to remove from the gift registry."
        itemsUid: [ID!]!
    ): RemoveGiftRegistryItemsOutput
    "Removes registrants from a gift registry."
    removeGiftRegistryRegistrants(
        "The unique ID of the gift registry."
        giftRegistryUid: ID!,
        "An array of registrant IDs to remove."
        registrantsUid: [ID!]!
    ): RemoveGiftRegistryRegistrantsOutput
    "Delete the entire quantity of a specified item from the cart. If you remove all items from the cart, the cart continues to exist."
    removeItemFromCart(
        "An input object that defines which products to remove from the cart."
        input: RemoveItemFromCartInput
    ): RemoveItemFromCartOutput
    "Remove one or more products from a negotiable quote."
    removeNegotiableQuoteItems(
        "An input object that removes one or more items from a negotiable quote."
        input: RemoveNegotiableQuoteItemsInput!
    ): RemoveNegotiableQuoteItemsOutput
    "Remove products from the specified compare list."
    removeProductsFromCompareList(
        "An input object that defines which products to remove from a compare list."
        input: RemoveProductsFromCompareListInput
    ): CompareList
    "Remove one or more products from the specified wish list."
    removeProductsFromWishlist(
        "The ID of a wish list."
        wishlistId: ID!,
        "An array of item IDs representing products to be removed."
        wishlistItemsIds: [ID!]!
    ): RemoveProductsFromWishlistOutput
    "Remove a tracked shipment from a return."
    removeReturnTracking(
        "An input object that removes tracking information."
        input: RemoveReturnTrackingInput!
    ): RemoveReturnTrackingOutput
    "Cancel the application of reward points to the cart."
    removeRewardPointsFromCart(cartId: ID!): RemoveRewardPointsFromCartOutput
    "Remove store credit that has been applied to the specified cart."
    removeStoreCreditFromCart(
        "An input object that specifies the cart ID."
        input: RemoveStoreCreditFromCartInput!
    ): RemoveStoreCreditFromCartOutput
    "Add all products from a customer's previous order to the cart."
    reorderItems(orderNumber: String!): ReorderItemsOutput
    "Add products from a previous order to cart"
    reorderProducts(input: ReorderInput): ReorderProducts
    "Request a link via email to reset your password"
    requestCustomerForgotPasswordLink(email: String!): String!
    "Request a new negotiable quote on behalf of the buyer."
    requestNegotiableQuote(
        "An input object that contains a request to initiate a negotiable quote."
        input: RequestNegotiableQuoteInput!
    ): RequestNegotiableQuoteOutput
    "Request an email with a reset password token for the registered customer identified by the specified email."
    requestPasswordResetEmail(
        "The customer's email address."
        email: String!
    ): Boolean
    "Initiates a buyer's request to return items for replacement or refund."
    requestReturn(
        "An input object that contains the fields needed to start a return request."
        input: RequestReturnInput!
    ): RequestReturnOutput
    "Reset your password by providing the new password and the Reset Token"
    resetCustomerPassword(input: ResetCustomerPasswordInput!): Boolean!
    "Reset a customer's password using the reset password token that the customer received in an email after requesting it using `requestPasswordResetEmail`."
    resetPassword(
        "The customer's email address."
        email: String!,
        "The customer's new password."
        newPassword: String!,
        "A runtime token generated by the `requestPasswordResetEmail` mutation."
        resetPasswordToken: String!
    ): Boolean
    "Revoke the customer token"
    revokeCustomerSpecificToken: RevokeCustomerTokenOutput
    "Revoke the customer token."
    revokeCustomerToken: RevokeCustomerTokenOutput
    "Save new customer push notification token"
    saveCustomerPushNotifyToken(push_token: String!): PushNotifyToken
    "Save a gift registry to a customer. If no boolean value is specified, the functionality will default to save, otherwise will remove the ID if the value is set to true."
    saveGiftRegistryToCustomer(gift_registry_id: String!, remove: Boolean): Customer!
    "Send a message on behalf of a customer to the specified email addresses."
    sendEmailToFriend(
        "An input object that defines sender, recipients, and product."
        input: SendEmailToFriendInput
    ): SendEmailToFriendOutput
    "Send the negotiable quote to the seller for review."
    sendNegotiableQuoteForReview(
        "An input object that sends a request for the merchant to review a negotiable quote."
        input: SendNegotiableQuoteForReviewInput!
    ): SendNegotiableQuoteForReviewOutput
    "Set the preferred delivery method for a B2B customer/Company."
    setB2bCustomerDeliveryMethod(input: SetB2BCustomerDeliveryMethodInput): SetB2BCustomerDeliveryMethod
    "Set the billing address on a specific cart."
    setBillingAddressOnCart(
        "An input object that defines the billing address to be assigned to the cart."
        input: SetBillingAddressOnCartInput
    ): SetBillingAddressOnCartOutput
    "Set gift options, including gift messages, gift wrapping, gift receipts, and printed cards."
    setGiftOptionsOnCart(
        "An input object that defines the selected gift options."
        input: SetGiftOptionsOnCartInput
    ): SetGiftOptionsOnCartOutput
    "If the cart has an associated gift registry ID, set the gift registry address as shipping address on cart."
    setGiftRegistryShippingAddressOnCart(cart_id: String!): Cart!
    "Assign the email address of a guest to the cart."
    setGuestEmailOnCart(
        "An input object that defines a guest email address."
        input: SetGuestEmailOnCartInput
    ): SetGuestEmailOnCartOutput
    "Assign a billing address to a negotiable quote."
    setNegotiableQuoteBillingAddress(
        "An input object that defines the billing address to be assigned to a negotiable quote."
        input: SetNegotiableQuoteBillingAddressInput!
    ): SetNegotiableQuoteBillingAddressOutput
    "Set the payment method on a negotiable quote."
    setNegotiableQuotePaymentMethod(
        "An input object that defines the payment method for the specified negotiable quote."
        input: SetNegotiableQuotePaymentMethodInput!
    ): SetNegotiableQuotePaymentMethodOutput
    "Assign a previously-defined address as the shipping address for a negotiable quote."
    setNegotiableQuoteShippingAddress(
        "An input object that defines the shipping address to be assigned to a negotiable quote."
        input: SetNegotiableQuoteShippingAddressInput!
    ): SetNegotiableQuoteShippingAddressOutput
    "Assign the shipping methods on the negotiable quote."
    setNegotiableQuoteShippingMethods(
        "An input object that defines the shipping methods to be assigned to a negotiable quote."
        input: SetNegotiableQuoteShippingMethodsInput!
    ): SetNegotiableQuoteShippingMethodsOutput
    "Set the cart payment method and convert the cart into an order."
    setPaymentMethodAndPlaceOrder(input: SetPaymentMethodAndPlaceOrderInput): PlaceOrderOutput @deprecated(reason: "Should use setPaymentMethodOnCart and placeOrder mutations in single request.")
    "Apply a payment method to the cart."
    setPaymentMethodOnCart(
        "An input object that defines which payment method to apply to the cart."
        input: SetPaymentMethodOnCartInput
    ): SetPaymentMethodOnCartOutput
    "Set Push Notify Token on the cart"
    setPushNotifyTokenToCart(input: SetPushNotifyTokenOnCartInput): SetPushNotifyTokenOnCartOutput
    "Upon RSA ID invalidation, allow customer to set ID/Passport number. If ID/Passport number is already set then the customer will not be able to set their ID and will have to contact support."
    setRSAIdentityNumber(rsa_id_number: String!): Validation!
    "Set one or more shipping addresses on a specific cart."
    setShippingAddressesOnCart(
        "An input object that defines one or more shipping addresses to be assigned to the cart."
        input: SetShippingAddressesOnCartInput
    ): SetShippingAddressesOnCartOutput
    "Set one or more delivery methods on a cart."
    setShippingMethodsOnCart(
        "An input object that applies one or more shipping methods to the cart."
        input: SetShippingMethodsOnCartInput
    ): SetShippingMethodsOnCartOutput
    "Send an email about the gift registry to a list of invitees."
    shareGiftRegistry(
        "The unique ID of the gift registry."
        giftRegistryUid: ID!,
        "An array containing invitee names and email addresses."
        invitees: [ShareGiftRegistryInviteeInput!]!,
        "The sender's email address and gift message."
        sender: ShareGiftRegistrySenderInput!
    ): ShareGiftRegistryOutput
    "Sends and share Wishlist e-mail through Dot Digital Mailer."
    shareWishlistByEmail(input: SendWishlistEmailInput!): EmailStatus!
    slUpdateCompanyCardNumber(request: SLUpdateCompanyCardNumberRequest!): SLUpdateCompanyCardNumberResponse
    slUpdateCompanyStatus(request: SLUpdateCompanyStatusRequest!): SLUpdateCompanyStatusResponse
    "Subscribes the specified email to a newsletter, if no id(s) are provided then the current store newsletter id is used."
    subscribeToNewsletters(email: String!, newsletter_id: [Int!]): [SubscribeEmailToNewsletterOutput]
    "Unlink a customer profile from an MRP Money account. If a psuedo link exists this will also be removed."
    unlinkCustomerAccount: LinkStatus
    "Unsubscribes the specified email from a newsletter, if no id(s) are provided then the current store newsletter id is used."
    unsubscribeFromNewsletters(email: String!, newsletter_id: [Int!]): [SubscribeEmailToNewsletterOutput]
    "Update Card Number In Customer"
    updateCardNumber(input: UpdateCardNumberInput!): CustomerOutput
    "Modify items in the cart."
    updateCartItems(
        "An input object that defines products to be updated."
        input: UpdateCartItemsInput
    ): UpdateCartItemsOutput
    "Update company information."
    updateCompany(input: CompanyUpdateInput!): UpdateCompanyOutput
    "Update company role information."
    updateCompanyRole(input: CompanyRoleUpdateInput!): UpdateCompanyRoleOutput
    "Update Company Status"
    updateCompanyStatus(input: UpdateCompanyStatusInput!): UpdateCompanyStatusOutput!
    "Change the parent node of a company team."
    updateCompanyStructure(input: CompanyStructureUpdateInput!): UpdateCompanyStructureOutput
    "Update company team data."
    updateCompanyTeam(input: CompanyTeamUpdateInput!): UpdateCompanyTeamOutput
    "Update an existing company user."
    updateCompanyUser(input: CompanyUserUpdateInput!): UpdateCompanyUserOutput
    "Use `updateCustomerV2` instead."
    updateCustomer(
        "An input object that defines the customer characteristics to update."
        input: CustomerInput!
    ): CustomerOutput
    "Update the billing or shipping address of a customer or guest."
    updateCustomerAddress(
        "The ID assigned to the customer address."
        id: Int!,
        "An input object that contains changes to the customer address."
        input: CustomerAddressInput
    ): CustomerAddress
    "Change the email address for the logged-in customer."
    updateCustomerEmail(
        "The customer's email address."
        email: String!,
        "The customer's password."
        password: String!
    ): CustomerOutput
    "Update the customer's personal information."
    updateCustomerV2(
        "An input object that defines the customer characteristics to update."
        input: CustomerUpdateInput!
    ): CustomerOutput
    "Update the specified gift registry."
    updateGiftRegistry(
        "An input object that defines which fields to update."
        giftRegistry: UpdateGiftRegistryInput!,
        "The unique ID of an existing gift registry."
        giftRegistryUid: ID!
    ): UpdateGiftRegistryOutput
    "Update the specified items in the gift registry."
    updateGiftRegistryItems(
        "The unique ID of the gift registry."
        giftRegistryUid: ID!,
        "An array of items to be updated."
        items: [UpdateGiftRegistryItemInput!]!
    ): UpdateGiftRegistryItemsOutput
    "Modify the properties of one or more gift registry registrants."
    updateGiftRegistryRegistrants(
        "The unique ID of the gift registry."
        giftRegistryUid: ID!,
        "An array of registrants to update."
        registrants: [UpdateGiftRegistryRegistrantInput!]!
    ): UpdateGiftRegistryRegistrantsOutput
    "Change the quantity of one or more items in an existing negotiable quote."
    updateNegotiableQuoteQuantities(
        "An input object that changes the quantity of one or more items in a negotiable quote."
        input: UpdateNegotiableQuoteQuantitiesInput!
    ): UpdateNegotiableQuoteItemsQuantityOutput
    "Update one or more products in the specified wish list."
    updateProductsInWishlist(
        "The ID of a wish list."
        wishlistId: ID!,
        "An array of items to be updated."
        wishlistItems: [WishlistItemUpdateInput!]!
    ): UpdateProductsInWishlistOutput
    "Rename a requisition list and change its description."
    updateRequisitionList(
        input: UpdateRequisitionListInput,
        "The unique ID of the requisition list."
        requisitionListUid: ID!
    ): UpdateRequisitionListOutput
    "Update items in a requisition list."
    updateRequisitionListItems(
        "Items to be updated in the requisition list."
        requisitionListItems: [UpdateRequisitionListItemsInput!]!,
        "The unique ID of the requisition list."
        requisitionListUid: ID!
    ): UpdateRequisitionListItemsOutput
    "Change the name and visibility of the specified wish list."
    updateWishlist(
        "The name assigned to the wish list."
        name: String,
        "Indicates the visibility of the wish list."
        visibility: WishlistVisibilityEnum,
        "The ID of the wish list to update."
        wishlistId: ID!
    ): UpdateWishlistOutput
}

"Contains details about a negotiable quote."
type NegotiableQuote {
    "An array of payment methods that can be applied to the negotiable quote."
    available_payment_methods: [AvailablePaymentMethod]
    "The billing address applied to the negotiable quote."
    billing_address: NegotiableQuoteBillingAddress
    "The first and last name of the buyer."
    buyer: NegotiableQuoteUser!
    "A list of comments made by the buyer and seller."
    comments: [NegotiableQuoteComment]
    "Timestamp indicating when the negotiable quote was created."
    created_at: String
    "The email address of the company user."
    email: String
    "A list of status and price changes for the negotiable quote."
    history: [NegotiableQuoteHistoryEntry]
    "Indicates whether the negotiable quote contains only virtual products."
    is_virtual: Boolean!
    "The list of items in the negotiable quote."
    items: [CartItemInterface]
    "The title assigned to the negotiable quote."
    name: String!
    "A set of subtotals and totals applied to the negotiable quote."
    prices: CartPrices
    "The payment method that was applied to the negotiable quote."
    selected_payment_method: SelectedPaymentMethod
    "A list of shipping addresses applied to the negotiable quote."
    shipping_addresses: [NegotiableQuoteShippingAddress]!
    "The status of the negotiable quote."
    status: NegotiableQuoteStatus!
    "The total number of items in the negotiable quote."
    total_quantity: Float!
    "The unique ID of a `NegotiableQuote` object."
    uid: ID!
    "Timestamp indicating when the negotiable quote was updated."
    updated_at: String
}

"Defines the company's country."
type NegotiableQuoteAddressCountry {
    "The address country code."
    code: String!
    "The display name of the region."
    label: String!
}

"Defines the company's state or province."
type NegotiableQuoteAddressRegion {
    "The address region code."
    code: String
    "The display name of the region."
    label: String
    "The unique ID for a pre-defined region."
    region_id: Int
}

type NegotiableQuoteBillingAddress implements NegotiableQuoteAddressInterface {
    "The company's city or town."
    city: String!
    "The company name associated with the shipping/billing address."
    company: String
    "The company's country."
    country: NegotiableQuoteAddressCountry!
    "The first name of the company user."
    firstname: String!
    "The last name of the company user."
    lastname: String!
    "The company's ZIP or postal code."
    postcode: String
    "An object containing the region name, region code, and region ID."
    region: NegotiableQuoteAddressRegion
    "An array of strings that define the street number and name."
    street: [String]!
    "The customer's telephone number."
    telephone: String
}

"Contains a single plain text comment from either the buyer or seller."
type NegotiableQuoteComment {
    "The first and last name of the commenter."
    author: NegotiableQuoteUser!
    "Timestamp indicating when the comment was created."
    created_at: String!
    "Indicates whether a buyer or seller commented."
    creator_type: NegotiableQuoteCommentCreatorType!
    "The plain text comment."
    text: String!
    "The unique ID of a `NegotiableQuoteComment` object."
    uid: ID!
}

"Contains custom log entries added by third-party extensions."
type NegotiableQuoteCustomLogChange {
    "The new entry content."
    new_value: String!
    "The previous entry in the custom log."
    old_value: String
    "The title of the custom log entry."
    title: String!
}

"Contains a list of changes to a negotiable quote."
type NegotiableQuoteHistoryChanges {
    "The comment provided with a change in the negotiable quote history."
    comment_added: NegotiableQuoteHistoryCommentChange
    "Lists log entries added by third-party extensions."
    custom_changes: NegotiableQuoteCustomLogChange
    "The expiration date of the negotiable quote before and after a change in the quote history."
    expiration: NegotiableQuoteHistoryExpirationChange
    "Lists products that were removed as a result of a change in the quote history."
    products_removed: NegotiableQuoteHistoryProductsRemovedChange
    "The status before and after a change in the negotiable quote history."
    statuses: NegotiableQuoteHistoryStatusesChange
    "The total amount of the negotiable quote before and after a change in the quote history."
    total: NegotiableQuoteHistoryTotalChange
}

"Contains a comment submitted by a seller or buyer."
type NegotiableQuoteHistoryCommentChange {
    "A plain text comment submitted by a seller or buyer."
    comment: String!
}

"Contains details about a change for a negotiable quote."
type NegotiableQuoteHistoryEntry {
    "The person who made a change in the status of the negotiable quote."
    author: NegotiableQuoteUser!
    "An enum that describes the why the entry in the negotiable quote history changed status."
    change_type: NegotiableQuoteHistoryEntryChangeType!
    "The set of changes in the negotiable quote."
    changes: NegotiableQuoteHistoryChanges
    "Timestamp indicating when the negotiable quote entry was created."
    created_at: String
    "The unique ID of a `NegotiableQuoteHistoryEntry` object."
    uid: ID!
}

"Contains a new expiration date and the previous date."
type NegotiableQuoteHistoryExpirationChange {
    "The expiration date after the change. The value will be 'null' if not set."
    new_expiration: String
    "The previous expiration date. The value will be 'null' if not previously set."
    old_expiration: String
}

"Contains lists of products that have been removed from the catalog and negotiable quote."
type NegotiableQuoteHistoryProductsRemovedChange {
    "A list of product IDs the seller removed from the catalog."
    products_removed_from_catalog: [ID]
    "A list of products removed from the negotiable quote by either the buyer or the seller."
    products_removed_from_quote: [ProductInterface]
}

"Lists a new status change applied to a negotiable quote and the previous status."
type NegotiableQuoteHistoryStatusChange {
    "The updated status."
    new_status: NegotiableQuoteStatus!
    "The previous status. The value will be null for the first history entry in a negotiable quote."
    old_status: NegotiableQuoteStatus
}

"Contains a list of status changes that occurred for the negotiable quote."
type NegotiableQuoteHistoryStatusesChange {
    "A list of status changes."
    changes: [NegotiableQuoteHistoryStatusChange]!
}

"Contains a new price and the previous price."
type NegotiableQuoteHistoryTotalChange {
    "The total price as a result of the change."
    new_price: Money
    "The previous total price on the negotiable quote."
    old_price: Money
}

"An error indicating that an operation was attempted on a negotiable quote in an invalid state."
type NegotiableQuoteInvalidStateError implements ErrorInterface {
    "The returned error message."
    message: String!
}

type NegotiableQuoteShippingAddress implements NegotiableQuoteAddressInterface {
    "An array of shipping methods available to the buyer."
    available_shipping_methods: [AvailableShippingMethod]
    "The company's city or town."
    city: String!
    "The company name associated with the shipping/billing address."
    company: String
    "The company's country."
    country: NegotiableQuoteAddressCountry!
    "The first name of the company user."
    firstname: String!
    "The last name of the company user."
    lastname: String!
    "The company's ZIP or postal code."
    postcode: String
    "An object containing the region name, region code, and region ID."
    region: NegotiableQuoteAddressRegion
    "The selected shipping method."
    selected_shipping_method: SelectedShippingMethod
    "An array of strings that define the street number and name."
    street: [String]!
    "The customer's telephone number."
    telephone: String
}

"Contains details about a successful operation on a negotiable quote."
type NegotiableQuoteUidOperationSuccess implements NegotiableQuoteUidNonFatalResultInterface {
    "The unique ID of a `NegotiableQuote` object."
    quote_uid: ID!
}

"A limited view of a Buyer or Seller in the negotiable quote process."
type NegotiableQuoteUser {
    "The first name of the buyer or seller making a change."
    firstname: String!
    "The buyer's or seller's last name."
    lastname: String!
}

"Contains a list of negotiable that match the specified filter."
type NegotiableQuotesOutput {
    "A list of negotiable quotes"
    items: [NegotiableQuote]!
    "Contains pagination metadata"
    page_info: SearchResultPageInfo!
    "Contains the default sort field and all available sort fields."
    sort_fields: SortFields
    "The number of negotiable quotes returned"
    total_count: Int!
}

type Newsletter {
    "Newsletter Id."
    newsletter_id: Int!
    "Newsletter name."
    newsletter_name: String!
    "Store ID associated with the newsletter. Used when subscribing a user to a newsletter."
    store_id: Int!
    "Website associated with the newsletter."
    website_id: Int!
}

type NewsletterSubscribers {
    "Newsletter Id."
    newsletter_id: Int!
    "Subscriber emails."
    subscriber_emails: [String]
}

"Contains an error message when an invalid UID was specified."
type NoSuchEntityUidError implements ErrorInterface {
    "The returned error message."
    message: String!
    "The specified invalid unique ID of an object."
    uid: ID!
}

"Sends an OTP to the account holder"
type OTPCreateResponse {
    "The destination in a masked format"
    maskedDestination: String!
    "Reference number associated with the PIN"
    reference: Int!
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "The message to display to the UI, if any"
    uiMessage: String
}

type OTPRef {
    "Destination of the OTP in a masked format"
    maskedDestination: String!
    "The reference associated with the OTP request"
    reference: Int!
}

"Returns a value that indicates whether the OTP is valid"
type OTPValidateResponse {
    "Flag that indicates if the OTP validation was successful"
    isValid: Boolean!
    "The MRPG HO ecom service status code"
    statusCode: String!
    "The MRPG HO ecom service status message"
    statusMessage: String
    "The message to display to the UI, if any"
    uiMessage: String
}

"Google Places prediction offset length"
type OffsetLength {
    "The length of the ol offset"
    length: Int!
    "The offset of the ol offset. Wossname. Thingiemabob."
    offset: Int!
}

"Google Places prediction offset value"
type OffsetValue {
    "The offset of the ol offset. Wossname. Thingiemabob."
    offset: Int!
    "The value of the ol offset"
    value: String!
}

type Option {
    count: Int
    label: String
    value: String
}

"Contains the order ID."
type Order {
    cc_token: String
    order_id: String @deprecated(reason: "Use `order_number` instead.")
    "The unique ID for an `Order` object."
    order_number: String!
}

"Contains detailed information about an order's billing and shipping addresses."
type OrderAddress {
    "The city or town."
    city: String!
    "The customer's company."
    company: String
    "The customer's country."
    country_code: CountryCodeEnum
    "The fax number."
    fax: String
    "The first name of the person associated with the shipping/billing address."
    firstname: String!
    "The family name of the person associated with the shipping/billing address."
    lastname: String!
    "The middle name of the person associated with the shipping/billing address."
    middlename: String
    "The customer's ZIP or postal code."
    postcode: String
    "An honorific, such as Dr., Mr., or Mrs."
    prefix: String
    "The state or province name."
    region: String
    "The unique ID for a `Region` object of a pre-defined region."
    region_id: ID
    "An array of strings that define the street number and name."
    street: [String]!
    "A value such as Sr., Jr., or III."
    suffix: String
    "The telephone number."
    telephone: String
    "The customer's Value-added tax (VAT) number (for corporate customers)."
    vat_id: String
}

type OrderItem implements OrderItemInterface {
    "The final discount information for the product."
    discounts: [Discount]
    "Indicates whether the order item is eligible to be in a return request."
    eligible_for_return: Boolean
    "The entered option for the base product, such as a logo or image."
    entered_options: [OrderItemOption]
    "The selected gift wrapping for the order item."
    gift_wrapping: GiftWrapping
    "The unique ID for an `OrderItemInterface` object."
    id: ID!
    parent_sku: String
    "The initial price of the product inclusive of tax without discount"
    product_initial_sale_price: Money!
    "The name of the base product."
    product_name: String
    "The sale price of the base product, including selected options."
    product_sale_price: Money!
    "The sale price of the product inclusive of tax"
    product_sale_price_including_tax: Money!
    "The SKU of the base product."
    product_sku: String!
    "The type of product, such as simple, configurable, etc."
    product_type: String
    "URL key of the base product."
    product_url_key: String
    "The number of canceled items."
    quantity_canceled: Float
    "The number of invoiced items."
    quantity_invoiced: Float
    "The number of units ordered for this item."
    quantity_ordered: Float
    "The number of refunded items."
    quantity_refunded: Float
    "The number of returned items."
    quantity_returned: Float
    "The number of shipped items."
    quantity_shipped: Float
    scene_seven_image_url: String
    "The selected options for the base product, such as color or size."
    selected_options: [OrderItemOption]
    "The status of the order item."
    status: String
}

"Represents order item options like selected or entered."
type OrderItemOption {
    "The name of the option."
    label: String!
    "The value of the option."
    value: String!
}

"Contains details about the payment method used to pay for the order."
type OrderPaymentMethod {
    "Additional data per payment method type."
    additional_data: [KeyValue]
    "The label that describes the payment method."
    name: String!
    "The payment method code that indicates how the order was paid for."
    type: String!
}

"Contains order shipment details."
type OrderShipment {
    "Comments added to the shipment."
    comments: [SalesCommentItem]
    "The unique ID for a `OrderShipment` object."
    id: ID!
    "An array of items included in the shipment."
    items: [ShipmentItemInterface]
    "The sequential credit shipment number."
    number: String!
    "An array of shipment tracking details."
    tracking: [ShipmentTracking]
}

type OrderStatusHistory {
    date_time: String!
    "Order status i.e. SUBMITTED, PROCESSING, SHIPPED e.t.c"
    status: String!
}

"Contains details about the sales total amounts used to calculate the final price."
type OrderTotal {
    "Applied Base Gift Cards Amount"
    base_gift_cards_amount: Money!
    "The final base grand total amount in the base currency."
    base_grand_total: Money!
    "The applied discounts to the order."
    discounts: [Discount]
    "Applied Gift Card Code and Amount"
    gift_cards: [GiftCards]
    "Applied Gift Cards Amount"
    gift_cards_amount: Money!
    "The final total amount, including shipping, discounts, and taxes."
    grand_total: Money!
    "Details about the shipping and handling costs for the order."
    shipping_handling: ShippingHandling
    "The subtotal of the order, excluding shipping, discounts, and taxes."
    subtotal: Money!
    "The order tax details."
    taxes: [TaxItem]
    "The gift card balance applied to the order."
    total_giftcard: Money
    "The shipping amount for the order."
    total_shipping: Money!
    "The amount of tax applied to the order."
    total_tax: Money!
}

type OtherInformation {
    vatRegistration: VatRegistration
}

type PDPcmsBlocks {
    cms_block_bottom: String
    cms_block_middle: String
    cms_block_top: String
}

type PargoPickUpPoint {
    address1: String!
    address2: String
    business_hours: String
    city: String!
    latitude: Float!
    longitude: Float!
    pargo_point_code: String!
    phone_number: String
    photo: String
    photo_small: String
    postal_code: String
    province: String
    store_name: String!
    suburb: String
}

"Contains information used to generate PayPal iframe for transaction. Applies to Payflow Link and Payments Advanced payment methods."
type PayflowLinkToken {
    "The mode for the Payflow transaction."
    mode: PayflowLinkMode
    "The PayPal URL used for requesting a Payflow form."
    paypal_url: String
    "The secure token generated by PayPal."
    secure_token: String
    "The secure token ID generated by PayPal."
    secure_token_id: String
}

type PayflowProResponseOutput {
    "The cart with the updated selected payment method."
    cart: Cart!
}

"Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods."
type PayflowProToken {
    "The RESPMSG returned by PayPal. If the `result` is `0`, then `response_message` is `Approved`."
    response_message: String!
    "A non-zero value if any errors occurred."
    result: Int!
    "The RESULT returned by PayPal. A value of `0` indicates the transaction was approved."
    result_code: Int!
    "A secure token generated by PayPal."
    secure_token: String!
    "A secure token ID generated by PayPal."
    secure_token_id: String!
}

type PayloadRequest {
    payload: String!
}

type Payment {
    additionalInformation: String
    header: String
    laybyAccountNumber: String
    paymentLines: PaymentLines
    paymentTotal: PaymentTotal
    receiptNumber: String
}

type PaymentLine {
    balanceOwing: String
    facility: String
    paymentAmount: String
}

type PaymentLines {
    paymentLine: PaymentLine
}

"The stored payment method available to the customer."
type PaymentToken {
    "A description of the stored account details."
    details: String
    "The payment method code associated with the token."
    payment_method_code: String!
    "The public hash of the token."
    public_hash: String!
    "Specifies the payment token type."
    type: PaymentTokenTypeEnum!
}

type PaymentTotal {
    description: String
    total: String
}

"Deprecated. Use `PaypalExpressTokenOutput` instead."
type PaypalExpressToken {
    "A set of URLs that allow the buyer to authorize payment and adjust checkout details."
    paypal_urls: PaypalExpressUrlList @deprecated(reason: "Use `PaypalExpressTokenOutput.paypal_urls` instead.")
    "The token returned by PayPal."
    token: String @deprecated(reason: "Use `PaypalExpressTokenOutput.token` instead.")
}

"Contains the token returned by PayPal and a set of URLs that allow the buyer to authorize payment and adjust checkout details. Applies to Express Checkout and Payments Standard payment methods."
type PaypalExpressTokenOutput {
    "A set of URLs that allow the buyer to authorize payment and adjust checkout details."
    paypal_urls: PaypalExpressUrlList
    "The token returned by PayPal."
    token: String
}

"Contains a set of URLs that allow the buyer to authorize payment and adjust checkout details for Express Checkout and Payments Standard transactions."
type PaypalExpressUrlList {
    "The PayPal URL that allows the buyer to edit their checkout details."
    edit: String
    "The URL to the PayPal login page."
    start: String
}

"Defines Pickup Location information."
type PickupLocation {
    city: String
    contact_name: String
    country_id: String
    description: String
    email: String
    fax: String
    latitude: Float
    longitude: Float
    name: String
    phone: String
    pickup_location_code: String
    postcode: String
    region: String
    region_id: Int
    street: String
}

"Top level object returned in a pickup locations search."
type PickupLocations {
    "An array of pickup locations that match the specific search request."
    items: [PickupLocation]
    "An object that includes the page_info and currentPage values specified in the query."
    page_info: SearchResultPageInfo
    "The number of products returned."
    total_count: Int
}

"An output object that returns the generated order."
type PlaceNegotiableQuoteOrderOutput {
    "Contains the generated order number."
    order: Order!
}

"Contains the results of the request to place an order."
type PlaceOrderOutput {
    "The ID of the order."
    order: Order!
    "An optional message that can be displayed to the customer"
    order_message: String
}

"MRP Money account application postal code search result"
type PostalCodeSearchResult {
    "Postal code"
    code: String!
    "Postal code Id"
    codeId: String!
    "Postal code type"
    codeType: String!
    "Postal country"
    country: String!
    "Postal country Id"
    countryId: String!
    "Description"
    description: String!
    "Postal suburb"
    suburb: String!
    "Postal town"
    town: String!
    "Postal town Id"
    townId: String!
}

"Deprecated. Use `ProductPrice` instead. Defines the price of a product as well as any tax-related adjustments."
type Price {
    "An array that provides information about tax, weee, or weee_tax adjustments."
    adjustments: [PriceAdjustment] @deprecated(reason: "Use `ProductPrice` instead.")
    "The price of a product plus a three-letter currency code."
    amount: Money @deprecated(reason: "Use `ProductPrice` instead.")
}

"Deprecated. Taxes will be included or excluded in the price. Defines the amount of money to apply as an adjustment, the type of adjustment to apply, and whether the item is included or excluded from the adjustment."
type PriceAdjustment {
    "The amount of the price adjustment and its currency code."
    amount: Money
    "Indicates whether the adjustment involves tax, weee, or weee_tax."
    code: PriceAdjustmentCodesEnum @deprecated(reason: "`PriceAdjustment` is deprecated.")
    "Indicates whether the entity described by the code attribute is included or excluded from the adjustment."
    description: PriceAdjustmentDescriptionEnum @deprecated(reason: "`PriceAdjustment` is deprecated.")
}

"Contains the price range for a product. If the product has a single price, the minimum and maximum price will be the same."
type PriceRange {
    "The highest possible price for the product."
    maximum_price: ProductPrice
    "The lowest possible price for the product."
    minimum_price: ProductPrice!
}

"Contains a product attribute code and value."
type ProductAttribute {
    "The unique identifier for a product attribute code."
    code: String!
    "The display value of the attribute."
    value: String!
}

"The product Badge"
type ProductBadge {
    "The badge position on the product image - from 0 - 8, top left being 0 & the bottom right being 8"
    position: Int
    "Badge subtitle."
    subtitle: String
    "Badge title."
    title: String
    "URL path to badge image."
    url: String
}

"Contains the discount applied to a product price."
type ProductDiscount {
    "The actual value of the discount."
    amount_off: Float
    "The discount expressed a percentage."
    percent_off: Float
}

"Contains product image information, including the image URL and label."
type ProductImage implements MediaGalleryInterface {
    "Indicates whether the image is hidden from view."
    disabled: Boolean
    "The label of the product image or video."
    label: String
    "The media item's position after it has been sorted."
    position: Int
    "The URL of the product image or video."
    url: String
}

"The product Label"
type ProductLabel {
    "Label phrase/text."
    phrase: String
}

"An implementation of `ProductLinksInterface`."
type ProductLinks implements ProductLinksInterface {
    "One of related, associated, upsell, or crosssell."
    link_type: String
    "The SKU of the linked product."
    linked_product_sku: String
    "The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable)."
    linked_product_type: String
    "The position within the list of product links."
    position: Int
    "The identifier of the linked product."
    sku: String
}

"Contains an image in base64 format and basic information about the image."
type ProductMediaGalleryEntriesContent {
    "The image in base64 format."
    base64_encoded_data: String
    "The file name of the image."
    name: String
    "The MIME type of the file, such as image/png."
    type: String
}

"Contains a link to a video file and basic information about the video."
type ProductMediaGalleryEntriesVideoContent {
    "Must be external-video."
    media_type: String
    "A description of the video."
    video_description: String
    "Optional data about the video."
    video_metadata: String
    "Describes the video source."
    video_provider: String
    "The title of the video."
    video_title: String
    "The URL to the video."
    video_url: String
}

"Represents a product price."
type ProductPrice {
    "The price discount. Represents the difference between the regular and final price."
    discount: ProductDiscount
    "The final price of the product after applying discounts."
    final_price: Money!
    "An array of the multiple Fixed Product Taxes that can be applied to a product price."
    fixed_product_taxes: [FixedProductTax]
    "The regular price of the product."
    regular_price: Money!
}

"Deprecated. Use `PriceRange` instead. Contains the regular price of an item, as well as its minimum and maximum prices. Only composite products, which include bundle, configurable, and grouped products, can contain a minimum and maximum price."
type ProductPrices {
    "The highest possible final price for all the options defined within a composite product. If you are specifying a price range, this would be the `to` value."
    maximalPrice: Price @deprecated(reason: "Use `PriceRange.maximum_price` instead.")
    "The lowest possible final price for all the options defined within a composite product. If you are specifying a price range, this would be the `from` value."
    minimalPrice: Price @deprecated(reason: "Use `PriceRange.minimum_price` instead.")
    "The base price of a product."
    regularPrice: Price @deprecated(reason: "Use `regular_price` from `PriceRange.minimum_price` or `PriceRange.maximum_price` instead.")
}

"Contains details of a product review."
type ProductReview {
    "The average of all ratings for this product."
    average_rating: Float!
    "The date the review was created."
    created_at: String!
    "The customer's nickname. Defaults to the customer name, if logged in."
    nickname: String!
    "The reviewed product."
    product: ProductInterface!
    "An array of ratings by rating category, such as quality, price, and value."
    ratings_breakdown: [ProductReviewRating]!
    "The summary (title) of the review."
    summary: String!
    "The review text."
    text: String!
}

"Contains data about a single aspect of a product review."
type ProductReviewRating {
    "The label assigned to an aspect of a product that is being rated, such as quality or price."
    name: String!
    "The rating value given by customer. By default, possible values range from 1 to 5."
    value: String!
}

"Contains details about a single aspect of a product review."
type ProductReviewRatingMetadata {
    "An encoded rating ID."
    id: String!
    "The label assigned to an aspect of a product that is being rated, such as quality or price."
    name: String!
    "List of product review ratings sorted by position."
    values: [ProductReviewRatingValueMetadata]!
}

"Contains details about a single value in a product review."
type ProductReviewRatingValueMetadata {
    "A ratings scale, such as the number of stars awarded."
    value: String!
    "An encoded rating value ID."
    value_id: String!
}

"Contains an array of metadata about each aspect of a product review."
type ProductReviewRatingsMetadata {
    "An array of product reviews sorted by position."
    items: [ProductReviewRatingMetadata]!
}

"Contains an array of product reviews."
type ProductReviews {
    "An array of product reviews."
    items: [ProductReview]!
    "Metadata for pagination rendering."
    page_info: SearchResultPageInfo!
}

"Deprecated. Use `TierPrice` instead. Defines a tier price, which is a quantity discount offered to a specific customer group."
type ProductTierPrices {
    "The ID of the customer group."
    customer_group_id: String @deprecated(reason: "Not relevant for the storefront.")
    "The percentage discount of the item."
    percentage_value: Float @deprecated(reason: "Use `TierPrice.discount` instead.")
    "The number of items that must be purchased to qualify for tier pricing."
    qty: Float @deprecated(reason: "Use `TierPrice.quantity` instead.")
    "The price of the fixed price item."
    value: Float @deprecated(reason: "Use `TierPrice.final_price` instead.")
    "The ID assigned to the website."
    website_id: Float @deprecated(reason: "Not relevant for the storefront.")
}

"Contains information about a product video."
type ProductVideo implements MediaGalleryInterface {
    "Indicates whether the image is hidden from view."
    disabled: Boolean
    "The label of the product image or video."
    label: String
    "The media item's position after it has been sorted."
    position: Int
    "The URL of the product image or video."
    url: String
    "Contains a `ProductMediaGalleryEntriesVideoContent` object."
    video_content: ProductMediaGalleryEntriesVideoContent
}

"The Products object is the top-level object returned in a product search."
type Products {
    "A bucket that contains the attribute code and label for each filterable option."
    aggregations(filter: AggregationsFilterInput): [Aggregation]
    "Details that allow the mapping of colours to colour groups and build the URL to the swatch image"
    colour_swatch_group: [ColourSwatchGroup]
    "Layered navigation filters array."
    filters: [LayerFilter] @deprecated(reason: "Use `aggregations` instead.")
    "An array of products that match the specified search criteria."
    items: [ProductInterface]
    "A list of aggregations based on filter values other than the value/s set for a given filter"
    multiselection_aggregations: [Aggregation]
    "An object that includes the page_info and currentPage values specified in the query."
    page_info: SearchResultPageInfo
    "An object that includes the default sort field and all available sort fields."
    sort_fields: SortFields
    "An array of search suggestions for case when search query have no results."
    suggestions: [SearchSuggestion]
    "The number of products that are marked as visible. By default, in complex products, parent products are visible, but their child products are not."
    total_count: Int
}

type Purchaser {
    estimated_delivery_date: String
    order_number: String
    order_status: String
    purchaser_email: String
    purchaser_name: String
    qty_purchased: Int
}

type PushNotifyToken {
    "The date that the token was first created"
    created_at: String!
    "The push nofication token for the device of the customer"
    push_token: String!
    "The date that the token was last updated"
    updated_at: String!
}

type Query {
    "The query searches for label rules that match the criteria specified in the filter."
    LabelRules(
        "Allow page number to start with 1"
        currentPage: Int = 1,
        "Identifies which label rules attributes to search for and return."
        filter: LabelRulesFilterInput,
        "How many items should show on the page?"
        pageSize: Int = 5
    ): LabelRulesOutput
    "Get all available CMS blocks defined in the project."
    availableCmsBlocks: [CmsBlockDetails]!
    "Get all available CMS pages defined in the project."
    availableCmsPages: [CmsPageDetails]!
    "Get a list of available store views and their config information."
    availableStores(
        "Filter store views by the current store group."
        useCurrentGroup: Boolean
    ): [StoreConfig]
    bricksStoreSkuStock(request: StoreStockRequest!): [StoreStock]
    "Return information about the specified shopping cart."
    cart(
        "The unique ID of the cart to query."
        cart_id: String!
    ): Cart
    "Return a list of categories that match the specified filter."
    categories(
        "Specifies which page of results to return. The default value is 1."
        currentPage: Int = 1,
        "Identifies which Category filter inputs to search for and return."
        filters: CategoryFilterInput,
        "Specifies the maximum number of results to return at once. The default value is 20."
        pageSize: Int = 20
    ): CategoryResult
    "Search for categories that match the criteria specified in the `search` and `filter` attributes."
    category(
        "The category ID to use as the root of the search."
        id: Int
    ): CategoryTree @deprecated(reason: "Use `categoryList` instead.")
    "Return an array of categories based on the specified filters."
    categoryList(
        "Identifies which Category filter inputs to search for and return."
        filters: CategoryFilterInput
    ): [CategoryTree]
    "CheckCartForPromotions checks whether a cart contains items on promotion"
    checkCartForPromotions(
        "Id of the cart that will be checked for promotions"
        cart_id: String
    ): CheckCartForPromotions
    "Return Terms and Conditions configuration information."
    checkoutAgreements: [CheckoutAgreement]
    checkoutCalculateShippingAmount(request: CheckoutCalculateShippingAmountRequest!): CheckoutCalculateShippingAmountResponse
    "Return information about CMS blocks."
    cmsBlocks(
        "An array of CMS block IDs."
        identifiers: [String]
    ): CmsBlocks
    "Return details about a CMS page."
    cmsPage(
        "The ID of the CMS page."
        id: Int,
        "The identifier of the CMS page."
        identifier: String
    ): CmsPage
    "Return detailed information about the authenticated customer's company."
    company: Company
    "Return products that have been added to the specified compare list."
    compareList(
        "The unique ID of the compare list to be queried."
        uid: ID!
    ): CompareList
    "The countries query provides information for all countries."
    countries: [Country]
    "The countries query provides information for all countries."
    countries_code: [CountryCode]
    "The countries query provides information for a single country."
    country(id: String): Country
    "The country query provides information for a single country."
    country_code(id: String): CountryCode
    creditAccountGetApplicationData(communicationQueueId: Long!, newApplicationId: Long!): CreditAccountApplicationDataResponse
    creditAccountGetCustomerApplications(identityNumber: String!, saveAndContinueOnly: Boolean!): CreditAccountGetCustomerApplicationsResponse
    creditAccountGetFinalOutcome(communicationQueueId: Int!): CreditAccountFinalOutcomeResponse
    creditAccountGetRepaymentPeriods: [CreditAccountLookupDataItem]
    creditAccountGetStatementDates(topN: Int!): CreditAccountStatementDateResponse
    creditAccountPostalCodeSearch(searchValue: String!): CreditAccountPostalCodeSearchResponse
    creditAccountPreScreenApplication(request: CreditAccountPreScreenApplicationRequest!): CreditAccountPreScreenApplicationResponse
    creditAccountProducts: [CreditAccountProduct]
    creditAccountStatement(request: CreditAccountStatementRequest!): CreditAccountStatementResponse
    creditAccountSummary: CreditAccountSummaryResponse
    creditAccountTransactions(request: CreditAccountTransactionsRequest!): CreditAccountTransactionsResponse
    creditAccountValidateCreditApplication(request: CreditAccountValidateCreditApplicationRequest!): CreditAccountValidateCreditApplicationResponse
    "Return information about the store's currency."
    currency: Currency
    "Return the attribute type, given an attribute code and entity type."
    customAttributeMetadata(
        "An input object that specifies the attribute code and entity type to search."
        attributes: [AttributeInput!]!
    ): CustomAttributeMetadata
    "Return detailed information about a customer account."
    customer: Customer
    "Return information about the customer's shopping cart."
    customerCart: Cart!
    "Return a list of downloadable products the customer has purchased."
    customerDownloadableProducts: CustomerDownloadableProducts
    customerOrders: CustomerOrders @deprecated(reason: "Use the `customer` query instead.")
    "Return a list of customer payment tokens stored in the vault."
    customerPaymentTokens: CustomerPaymentTokens
    digitalPaymentCheckStatus: String
    digitalPaymentTransactionDetail(request: DigitalPaymentTransactionDetailRequest!): DigitalPaymentTransactionDetailResponse
    digitalPaymentTransactionStatus(posReference: String!): DigitalPaymentTransactionStatusResponse
    "Return a list of dynamic blocks filtered by type, location, or UIDs."
    dynamicBlocks(
        "The page of results to return. The default is 1."
        currentPage: Int = 1,
        "Defines the filter for returning matching dynamic blocks."
        input: DynamicBlocksFilterInput,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): DynamicBlocks!
    environment: String
    getAddressPredictions(input: String!): [GooglePlacePrediction]
    "Returns available (active) shipping methods without the need to specify an address, gathers shipping methods exclusive of checkout process."
    getAvailableShippingMethods(cart_id: String!): ShippingMethods!
    "Returns all shipping methods that are usable by a B2B customer without the need to specify an address or use a cart."
    getB2BShippingMethods: [AbstractedShippingMethod]
    "Retrieve the state of a B2B account application from the current customer or company if company ID is specified."
    getB2bAccountStatus(company_id: String): GetB2BAccountStatus
    "Retrieve a list of all business types."
    getB2bBusinessTypes: GetB2bBusinessTypes
    "Retrieve the preferred delivery method for the current B2B customer or from a specified company."
    getB2bCustomerDeliveryMethod(company_id: String): GetB2BCustomerDeliveryMethod
    "Get any cart statuses associated with the cart. This can be used for custom functionality and messaging required by unique statuses. If empty, no unique cart statuses are present on the cart."
    getCartStatuses(cart_id: String!): [CartStatus]
    "Returns all shipping methods that are usable when a cellular product is present in the cart."
    getCellularShippingMethods: [AbstractedShippingMethod]
    "Retrieve a company from the current customer. Otherwise a company ID can be specified."
    getCompany(company_id: String): GetCompany
    "Returns the types of contact forms available for selection."
    getContactFormTypes: [ContactForm]!
    getCreditAccountLookupData: CreditAccountLookupDataResponse
    getCustomerEmailDockets(request: EmailDocketRequest): EmailDockets
    getCustomerEmailDocketsFiltered(request: EmailDocketFilteredRequest): EmailDocketFilteredHeaderViewModel
    "Retrieve a list of all customer groups"
    getCustomerGroups: [CustomerGroup]!
    "Get the newsletters that the current user is subscribed to."
    getCustomerSubscriptions: [Subscription]
    "Filter Mrp stores according to specific filter parameters."
    getFilteredStoreLocations(filter: StoreFilter!): [Store]!
    "Retrieve the secure PayPal URL for a Payments Pro Hosted Solution transaction."
    getHostedProUrl(
        "An input object that specifies the cart ID."
        input: HostedProUrlInput!
    ): HostedProUrl
    "Get all supported/trading MRPG divisions - The cap divisions"
    getMRPCapDivisions: [Division]
    "Get a list of customers subscribed to a newsletter as defined by the current store and specified newsletter ID."
    getNewsletterSubscribers(newsletter_id: Int!): NewsletterSubscribers!
    "Get all newsletters unless a newsletter ID is specified, in which case return the ID associated with that newsletter."
    getNewsletters(newsletter_id: Int): [Newsletter]
    "Retrieve payment credentials for a transaction. Use this query for Payflow Link and Payments Advanced payment methods."
    getPayflowLinkToken(
        "An input object that defines the requirements to receive a payment token."
        input: PayflowLinkTokenInput!
    ): PayflowLinkToken
    getProductMediaSet(productCode: String!): S7MediaSet
    "Return list of order lists. If list Id is provided only given list id will be returned. Customer/Company Id may be derived from system context or provided via authorization header."
    getRequisitionLists(listId: String): [RequisitionList]
    "Retrieve the saved tokens/card details for a customer."
    getSavedCustomerTokens: [SavedCard]
    "Returns the list of the current customer's saved gift registry ID's."
    getSavedGiftRegistries: [GiftRegistry] @deprecated(reason: "Use `customer` query for `saved_gift_registries` instead.")
    "Get a wishlist via it's sharing code."
    getSharedWishlist(wishlist_code: String!): SharedWishlist!
    "Retrieve all active shipping methods."
    getShippingMethods: GetShippingMethods
    "Returns available (active) shipping methods without the need to specify an address or use a cart."
    getShippingMethodsWithoutCart: [AbstractedShippingMethod]
    "Get all the filter attributes associated with a specific division and magento website ID. These field will be used to populate check boxes in the physical store search. If the store header is not set will return all filter attributes"
    getStoreFilterAttributes(division_ids: [Int]): [StoreAttribute]!
    "Get physical Mrp stores according to division ID."
    getStoreLocationByDivision(division_id: String!): [Store]!
    "Get all physical Mrp store's information, can be filtered according to specific store ID with or without division ID, e.g. both 1234 and 01-1234 will return the same store."
    getStoreLocations(store_id: String): [Store]!
    "Get all physical Mrp stores that are located within a given radius. If division ID is specified, only stores from that division will be returned within the radius defined on the admin panel or query. If radius is specified will search in the radius, else using a default value of 10km or the division defined radius. Filterable with certain filter parameters."
    getStoresWithFilters(division_ids: [String], filter: StoreFilter, location: Location): [Store]!
    "Get all newsletters for a specific website. A website ID can be specified but is no necessary. Configuration for the mapping of Newsletters to websites can be set under Stores -> Configuration -> MRPGROUPECOM -> Newsletters"
    getWebsiteNewsletters(store_code: String): [Newsletter]
    "Get all active widgets for a given website"
    getWidgetAll(categories: String, page: DisplayAreas, products: String): [Widget]
    "Return details about a specific gift card."
    giftCardAccount(
        "An input object that specifies the gift card code."
        input: GiftCardAccountInput!
    ): GiftCardAccount
    "Return the specified gift registry. Some details will not be available to guests."
    giftRegistry(
        "The unique ID of the registry to search for."
        giftRegistryUid: ID!
    ): GiftRegistry
    "Search for gift registries by specifying a registrant email address."
    giftRegistryEmailSearch(
        "The registrant's email."
        email: String!
    ): [GiftRegistrySearchResult]
    "Search for gift registries by specifying a registry URL key."
    giftRegistryIdSearch(
        "The unique ID of the gift registry."
        giftRegistryUid: ID!
    ): [GiftRegistrySearchResult]
    "Search for gift registries by specifying the registrant name and registry type ID."
    giftRegistryTypeSearch(
        "The first name of the registrant."
        firstName: String!,
        "The type UID of the registry."
        giftRegistryTypeUid: ID,
        "The last name of the registrant."
        lastName: String!
    ): [GiftRegistrySearchResult]
    "Get a list of available gift registry types."
    giftRegistryTypes: [GiftRegistryType]
    "Check whether the cart contains a cellular product."
    hasCellularProduct(cart_id: String!): Boolean
    "The insurancePlan query returns all information related to a single insurance plans."
    insurancePlan(code: String): InsurancePlan
    "The insurancePlans query returns all information related to the available MRP Money insurance plans."
    insurancePlans: [InsurancePlan]
    "Check whether the specified email can be used to register a company admin."
    isCompanyAdminEmailAvailable(email: String!): IsCompanyAdminEmailAvailableOutput
    "Check whether the specified email can be used to register a new company."
    isCompanyEmailAvailable(email: String!): IsCompanyEmailAvailableOutput
    "Check whether the specified role name is valid for the company."
    isCompanyRoleNameAvailable(name: String!): IsCompanyRoleNameAvailableOutput
    "Check whether the specified email can be used to register a company user."
    isCompanyUserEmailAvailable(email: String!): IsCompanyUserEmailAvailableOutput
    isCourierHighRiskZone(countryCode: String!, postalCode: String!): Boolean
    "Check whether the specified email has already been used to create a customer account."
    isEmailAvailable(
        "The email address to check."
        email: String!
    ): IsEmailAvailableOutput
    "The mobileProviders query returns all information related to the available mobile providers."
    mobileProviders: [MobileProvider]
    "Retrieve the specified negotiable quote."
    negotiableQuote(uid: ID!): NegotiableQuote
    "Return a list of negotiable quotes that can be viewed by the logged-in customer."
    negotiableQuotes(
        "The page of results to return. The default value is 1."
        currentPage: Int = 1,
        "The filter to use to determine which negotiable quotes to return."
        filter: NegotiableQuoteFilterInput,
        "The maximum number of results to return at once. The default value is 20."
        pageSize: Int = 20,
        "The field to use for sorting results."
        sort: NegotiableQuoteSortInput
    ): NegotiableQuotesOutput
    now: String
    "This query takes optional parameters. If nothing is passed it will return all PUPs. Passing name will search on name, ordered by best match. Passing long / lat will return results ordered by distance to the PUP. If name & long / lat is passed name search takes preference"
    pargoPickUpPoints(limit: Int, location: Location, name: String): [PargoPickUpPoint]!
    "Payment gateway request payload body"
    paymentRequestPayload(orderNumber: String!): PayloadRequest!
    "The pickup locations query searches for locations that match the search request requirements."
    pickupLocations(
        "Perform search by location using radius and search term."
        area: AreaInput,
        "Specifies which page of results to return. The default value is 1."
        currentPage: Int = 1,
        "Apply filters by attributes."
        filters: PickupLocationFilterInput,
        "The maximum number of pickup locations to return at once. The attribute is optional."
        pageSize: Int = 20,
        "Information about products which should be delivered."
        productsInfo: [ProductInfoInput],
        "Specifies which attribute to sort on, and whether to return the results in ascending or descending order."
        sort: PickupLocationSortInput
    ): PickupLocations
    "The product call takes a product uid, and returns details of the specified product."
    product(uid: String!): ProductInterface
    "Return the active ratings attributes and the values each rating can have."
    productReviewRatingsMetadata: ProductReviewRatingsMetadata!
    "Search for products that match the criteria specified in the `search` and `filter` attributes."
    products(
        "The page of results to return. The default value is 1."
        currentPage: Int = 1,
        "The product attributes to search for and return."
        filter: ProductAttributeFilterInput,
        "The maximum number of results to return at once. The default value is 20."
        pageSize: Int = 20,
        "One or more keywords to use in a full-text search."
        search: String,
        "Specifies which attributes to sort on, and whether to return the results in ascending or descending order."
        sort: ProductAttributeSortInput
    ): Products
    "Return the full details for a specified product, category, or CMS page."
    route(
        "A `url_key` appended by the `url_suffix, if one exists."
        url: String!
    ): RoutableInterface
    "Returns the list of registries matching search criteria."
    searchGiftRegistries(search_term: String!): [GiftRegistrySearchResult]
    "Return details about the store's configuration."
    storeConfig: StoreConfig
    "Return the relative URL for a specified product, category or CMS page."
    urlResolver(
        "A `url_key` appended by the `url_suffix, if one exists."
        url: String!
    ): EntityUrl @deprecated(reason: "Use the `route` query instead.")
    "Validates the customer RSA ID/Passport number to ensure that it is valid and has not been altered during the checkout process."
    validateRSAIdentityNumber(rsa_id_number: String): Validation!
    validateShippingPostalCode(postalCode: String!): Boolean
    version: String
    "Return the contents of a customer's wish list."
    wishlist: WishlistOutput @deprecated(reason: "Moved under `Customer.wishlist`.")
}

type Region {
    "The two-letter code for the region, such as TX for Texas."
    code: String
    "The unique ID for a `Region` object."
    id: Int
    "The name of the region, such as Texas."
    name: String
}

"Contains details about the cart after removing a coupon."
type RemoveCouponFromCartOutput {
    "The cart after removing a coupon."
    cart: Cart
}

"Defines the possible output for the `removeGiftCardFromCart` mutation."
type RemoveGiftCardFromCartOutput {
    "The contents of the specified shopping cart."
    cart: Cart!
}

"Contains the results of a request to remove an item from a gift registry."
type RemoveGiftRegistryItemsOutput {
    "The gift registry after removing items."
    gift_registry: GiftRegistry
}

"Contains the results of a request to delete a gift registry."
type RemoveGiftRegistryOutput {
    "Indicates whether the gift registry was successfully deleted."
    success: Boolean!
}

"Contains the results of a request to delete a registrant."
type RemoveGiftRegistryRegistrantsOutput {
    "The gift registry after deleting registrants."
    gift_registry: GiftRegistry
}

"Contains details about the cart after removing an item."
type RemoveItemFromCartOutput {
    "The cart after removing an item."
    cart: Cart!
}

"Contains the negotiable quote."
type RemoveNegotiableQuoteItemsOutput {
    "The negotiable quote after removing items."
    quote: NegotiableQuote
}

"Contains the customer's wish list and any errors encountered."
type RemoveProductsFromWishlistOutput {
    "An array of errors encountered while deleting products from a wish list."
    user_errors: [WishListUserInputError]!
    "Contains the wish list with after items were successfully deleted."
    wishlist: Wishlist!
}

"Contains the response after deleting tracking information."
type RemoveReturnTrackingOutput {
    "Contains details about the modified return."
    return: Return
}

"Contains the customer cart."
type RemoveRewardPointsFromCartOutput {
    "The customer cart after reward points are removed."
    cart: Cart!
}

"Defines the possible output for the `removeStoreCreditFromCart` mutation."
type RemoveStoreCreditFromCartOutput {
    "The contents of the specified shopping cart."
    cart: Cart!
}

"Contains the cart and any errors after adding products."
type ReorderItemsOutput {
    "Detailed information about the customer's cart."
    cart: Cart!
    "An array of reordering errors."
    userInputErrors: [CheckoutUserInputError]!
}

type ReorderProducts {
    cart: Cart!
    failed_products: [FailedProducts]
    reorder_success: Boolean
}

"Contains the `NegotiableQuote` object generated when a buyer requests a negotiable quote."
type RequestNegotiableQuoteOutput {
    "Details about the negotiable quote."
    quote: NegotiableQuote
}

"Contains the response to a return request."
type RequestReturnOutput {
    "Details about a single return request."
    return: Return
    "An array of return requests."
    returns(
        "Specifies which page of results to return. The default is 1."
        currentPage: Int = 1,
        "Specifies the maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): Returns
}

"Defines the contents of a requisition list."
type RequisitionList {
    "Optional text that describes the requisition list."
    description: String
    "An array of products added to the requisition list."
    items(
        "The page of results to return. The default value is 1."
        currentPage: Int = 1,
        "The maximum number of results to return. The default value is 1."
        pageSize: Int = 20
    ): RequistionListItems
    "The number of items in the list."
    items_count: Int!
    "The requisition list name."
    name: String!
    "The unique requisition list ID."
    uid: ID!
    "The time of the last modification of the requisition list."
    updated_at: String
}

"Defines customer requisition lists."
type RequisitionLists {
    "An array of requisition lists."
    items: [RequisitionList]
    "Pagination metadata."
    page_info: SearchResultPageInfo
    "The number of returned requisition lists."
    total_count: Int
}

"Contains an array of items added to a requisition list."
type RequistionListItems {
    "An array of items in the requisition list."
    items: [RequisitionListItemInterface]!
    "Pagination metadata."
    page_info: SearchResultPageInfo
    "The number of pages returned."
    total_pages: Int!
}

"Contains details about a return."
type Return {
    "A list of shipping carriers available for returns."
    available_shipping_carriers: [ReturnShippingCarrier]
    "A list of comments posted for the return request."
    comments: [ReturnComment]
    "The date the return was requested."
    created_at: String!
    "Data from the customer who created the return request."
    customer: ReturnCustomer!
    "A list of items being returned."
    items: [ReturnItem]
    "A human-readable return number."
    number: String!
    "The order associated with the return."
    order: CustomerOrder
    "Shipping information for the return."
    shipping: ReturnShipping
    "The status of the return request."
    status: ReturnStatus
    "The unique ID for a `Return` object."
    uid: ID!
}

"Contains details about a return comment."
type ReturnComment {
    "The name or author who posted the comment."
    author_name: String!
    "The date and time the comment was posted."
    created_at: String!
    "The contents of the comment."
    text: String!
    "The unique ID for a `ReturnComment` object."
    uid: ID!
}

"Contains details about a `ReturnCustomerAttribute` object."
type ReturnCustomAttribute {
    "A description of the attribute."
    label: String!
    "The unique ID for a `ReturnCustomAttribute` object."
    uid: ID!
    "A JSON-encoded value of the attribute."
    value: String!
}

"The customer information for the return."
type ReturnCustomer {
    "The email address of the customer."
    email: String!
    "The first name of the customer."
    firstname: String
    "The last name of the customer."
    lastname: String
}

"Contains details about a product being returned."
type ReturnItem {
    "Return item custom attributes that are visible on the storefront."
    custom_attributes: [ReturnCustomAttribute]
    "Provides access to the product being returned, including information about selected and entered options."
    order_item: OrderItemInterface!
    "The quantity of the item the merchant authorized to be returned."
    quantity: Float!
    "The quantity of the item requested to be returned."
    request_quantity: Float!
    "The return status of the item."
    status: ReturnItemStatus!
    "The unique ID for a `ReturnItem` object."
    uid: ID!
}

"Contains details about the return shipping address."
type ReturnShipping {
    "The merchant-defined return shipping address."
    address: ReturnShippingAddress
    "The unique ID for a `ReturnShippingTracking` object. If a single UID is specified, the array contains a single tracking record. Otherwise, array contains all tracking information."
    tracking(uid: ID): [ReturnShippingTracking]
}

"Contains details about the shipping address used for receiving returned items."
type ReturnShippingAddress {
    "The city for product returns."
    city: String!
    "The merchant's contact person."
    contact_name: String
    "An object that defines the country for product returns."
    country: Country!
    "The postal code for product returns."
    postcode: String!
    "An object that defines the state or province for product returns."
    region: Region!
    "The street address for product returns."
    street: [String]!
    "The telephone number for product returns."
    telephone: String
}

"Contains details about the carrier on a return."
type ReturnShippingCarrier {
    "A description of the shipping carrier."
    label: String!
    "The unique ID for a `ReturnShippingCarrier` object assigned to the shipping carrier."
    uid: ID!
}

"Contains shipping and tracking details."
type ReturnShippingTracking {
    "Contains details of a shipping carrier."
    carrier: ReturnShippingCarrier!
    "Details about the status of a shipment."
    status: ReturnShippingTrackingStatus
    "A tracking number assigned by the carrier."
    tracking_number: String!
    "The unique ID for a `ReturnShippingTracking` object assigned to the tracking item."
    uid: ID!
}

"Contains the status of a shipment."
type ReturnShippingTrackingStatus {
    "Text that describes the status."
    text: String!
    "Indicates whether the status type is informational or an error."
    type: ReturnShippingTrackingStatusType!
}

"Contains a list of customer return requests."
type Returns {
    "A list of return requests."
    items: [Return]
    "Pagination metadata."
    page_info: SearchResultPageInfo
    "The total number of return requests."
    total_count: Int
}

type ReturnsPolicy {
    returnsPolicyLine: [String]
}

"Contains the result of a request to revoke a customer token."
type RevokeCustomerTokenOutput {
    "The result of a request to revoke a customer token."
    result: Boolean!
}

"Contains details about a customer's reward points."
type RewardPoints {
    "The current balance of reward points."
    balance: RewardPointsAmount
    "The balance history of reward points. If the ability for customers to view the balance history has been disabled in the Admin, this field will be set to null."
    balance_history: [RewardPointsBalanceHistoryItem]
    "The current exchange rates for reward points."
    exchange_rates: RewardPointsExchangeRates
    "The subscription status of emails related to reward points."
    subscription_status: RewardPointsSubscriptionStatus
}

type RewardPointsAmount {
    "The reward points amount in store currency."
    money: Money!
    "The reward points amount in points."
    points: Float!
}

"Contain details about the reward points transaction."
type RewardPointsBalanceHistoryItem {
    "The award points balance after the completion of the transaction."
    balance: RewardPointsAmount
    "The reason the balance changed."
    change_reason: String!
    "The date of the transaction."
    date: String!
    "The number of points added or deducted in the transaction."
    points_change: Float!
}

"Lists the reward points exchange rates. The values depend on the customer group."
type RewardPointsExchangeRates {
    "How many points are earned for a given amount spent."
    earning: RewardPointsRate
    "How many points must be redeemed to get a given amount of currency discount at the checkout."
    redemption: RewardPointsRate
}

"Contains details about customer's reward points rate."
type RewardPointsRate {
    "The money value for the exchange rate. For earnings, this is the amount spent to earn the specified points. For redemption, this is the amount of money the number of points represents."
    currency_amount: Float!
    "The number of points for an exchange rate. For earnings, this is the number of points earned. For redemption, this is the number of points needed for redemption."
    points: Float!
}

"Indicates whether the customer subscribes to reward points emails."
type RewardPointsSubscriptionStatus {
    "Indicates whether the customer subscribes to 'Reward points balance updates' emails."
    balance_updates: RewardPointsSubscriptionStatusesEnum!
    "Indicates whether the customer subscribes to 'Reward points expiration notifications' emails."
    points_expiration_notifications: RewardPointsSubscriptionStatusesEnum!
}

"Scene7 media set item"
type S7Media {
    dx: String
    dy: String
    iv: String!
    mediaType: MediaType!
    url: String
    userData: [S7UserData!]!
    v: S7Video
}

"Scene7 media set"
type S7MediaSet {
    media: [S7Media!]!
    pv: String!
    type: String
}

"Scene7 media set user data"
type S7UserData {
    audioCodec: String!
    audioSampleRate: String!
    numberAudioChannels: String!
    videoCodec: String!
    videoFrameRate: String!
    videoLength: String!
}

"Scene7 media set video"
type S7Video {
    bitrate: String!
    ff: String!
    id: String!
    path: String!
    suffix: String!
}

"Result of the company card number update request"
type SLUpdateCompanyCardNumberResponse {
    "B2B card number associated to this company"
    cardNumber: String!
    "Magento profile email address associated with this card"
    email: String!
    "Company card holders first name"
    firstName: String!
    "Company card holders last name"
    lastName: String!
    "Flag indicating the status"
    status: String!
}

"Result of the company status update request"
type SLUpdateCompanyStatusResponse {
    "Magento operation message"
    message: String!
    "Magento operation status"
    status: Boolean!
}

type Sale {
    chargedToAccount: String
    docketNumber: DocketNumber
    header: String
    saleLines: SaleLines
    saleTotal: SaleTotal
    tax: Tax
}

type SaleLines {
    line: [Line]
}

type SaleTotal {
    description: String
    totalQuantity: String
    totalValue: String
}

"Contains details about a comment."
type SalesCommentItem {
    "The text of the message."
    message: String!
    "The timestamp of the comment."
    timestamp: String!
}

type SalesItemInterface {
    "The entered gift message for the order item"
    gift_message: GiftMessage
}

type SavedCard {
    active: Boolean
    additional: AdditionalCardAttribute
    created_at: String
    expiry: String
    hash: String
    payment_id: String
    updated_at: String
}

type SavedGiftRegistries {
    event_date: String
    event_name: String
    gift_registry_type: GiftRegistryType
    uid: String
}

"Provides navigation for the query response."
type SearchResultPageInfo {
    "The specific page to return."
    current_page: Int
    "The maximum number of items to return per page of results."
    page_size: Int
    "The total number of pages in the response."
    total_pages: Int
}

"A string that contains search suggestion"
type SearchSuggestion {
    "The search suggestion of existing product."
    search: String!
}

"Contains details about a selected bundle option."
type SelectedBundleOption {
    id: Int! @deprecated(reason: "Use `uid` instead")
    "The display name of the selected bundle product option."
    label: String!
    "The type of selected bundle product option."
    type: String!
    "The unique ID for a `SelectedBundleOption` object"
    uid: ID!
    "An array of selected bundle option values."
    values: [SelectedBundleOptionValue]!
}

"Contains details about a value for a selected bundle option."
type SelectedBundleOptionValue {
    "Use `uid` instead"
    id: Int!
    "The display name of the value for the selected bundle product option."
    label: String!
    "The price of the value for the selected bundle product option."
    price: Float!
    "The quantity of the value for the selected bundle product option."
    quantity: Float!
    "The unique ID for a `SelectedBundleOptionValue` object"
    uid: ID!
}

"Contains details about a selected configurable option."
type SelectedConfigurableOption {
    "The unique ID for a `ConfigurableProductOptions` object."
    configurable_product_option_uid: ID!
    "The unique ID for a `ConfigurableProductOptionsValues` object."
    configurable_product_option_value_uid: ID!
    id: Int! @deprecated(reason: "Use `SelectedConfigurableOption.configurable_product_option_uid` instead.")
    "The display text for the option."
    option_label: String!
    "Simple sku image into cart for configurable"
    scene_seven_image_url: String
    "Selected configurable option SKU"
    simple_sku: String
    value_id: Int! @deprecated(reason: "Use `SelectedConfigurableOption.configurable_product_option_value_uid` instead.")
    "The display name of the selected configurable option."
    value_label: String!
}

"Identifies a customized product that has been placed in a cart."
type SelectedCustomizableOption {
    "The unique ID for a specific `CustomizableOptionInterface` object, such as a `CustomizableFieldOption`, `CustomizableFileOption`, or `CustomizableAreaOption` object."
    customizable_option_uid: ID!
    id: Int! @deprecated(reason: "Use `SelectedCustomizableOption.customizable_option_uid` instead.")
    "Indicates whether the customizable option is required."
    is_required: Boolean!
    "The display name of the selected customizable option."
    label: String!
    "A value indicating the order to display this option."
    sort_order: Int!
    "The type of `CustomizableOptionInterface` object."
    type: String!
    "An array of selectable values."
    values: [SelectedCustomizableOptionValue]!
}

"Identifies the value of the selected customized option."
type SelectedCustomizableOptionValue {
    "The unique ID for a value object that corresponds to the object represented by the `customizable_option_uid` attribute."
    customizable_option_value_uid: ID!
    id: Int! @deprecated(reason: "Use `SelectedCustomizableOptionValue.customizable_option_value_uid` instead.")
    "The display name of the selected value."
    label: String!
    "The price of the selected customizable value."
    price: CartItemSelectedOptionValuePrice!
    "The text identifying the selected value."
    value: String!
}

"Describes the payment method the shopper selected."
type SelectedPaymentMethod {
    "Retrieve the saved tokens/card details for the current quote"
    applied_token: SavedCard
    "The payment method code."
    code: String!
    description: String
    image: String
    "The purchase order number."
    purchase_order_number: String
    "The payment method title."
    title: String!
    type: PaymentMethodType
}

"Contains details about the selected shipping method and carrier."
type SelectedShippingMethod {
    "The cost of shipping using this shipping method."
    amount: Money!
    base_amount: Money @deprecated(reason: "The field should not be used on the storefront.")
    "A string that identifies a commercial carrier or an offline shipping method."
    carrier_code: String!
    "The label for the carrier code."
    carrier_title: String!
    "A shipping method code associated with a carrier."
    method_code: String!
    "The label for the method code."
    method_title: String!
}

type SelectedShippingMethodInclTax {
    amount: Money!
    base_amount: Money @deprecated(reason: "The field should not be used on the storefront")
    carrier_code: String!
    carrier_title: String!
    method_code: String!
    method_title: String!
}

"Contains information about the sender and recipients."
type SendEmailToFriendOutput {
    "An array containing information about each recipient."
    recipients: [SendEmailToFriendRecipient]
    "Information about the customer and the content of the message."
    sender: SendEmailToFriendSender
}

"An output object that contains information about the recipient."
type SendEmailToFriendRecipient {
    "The email address of the recipient."
    email: String!
    "The name of the recipient."
    name: String!
}

"An output object that contains information about the sender."
type SendEmailToFriendSender {
    "The email address of the sender."
    email: String!
    "The text of the message to be sent."
    message: String!
    "The name of the sender."
    name: String!
}

"Contains details about the configuration of the Email to a Friend feature."
type SendFriendConfiguration {
    "Indicates whether the Email to a Friend feature is enabled."
    enabled_for_customers: Boolean!
    "Indicates whether the Email to a Friend feature is enabled for guests."
    enabled_for_guests: Boolean!
}

"Contains the negotiable quote."
type SendNegotiableQuoteForReviewOutput {
    "The negotiable quote after sending for seller review."
    quote: NegotiableQuote
}

type SetB2BCustomerDeliveryMethod {
    success: Boolean
}

"Contains details about the cart after setting the billing address."
type SetBillingAddressOnCartOutput {
    "The cart after setting the billing address."
    cart: Cart!
}

"Contains the cart after gift options have been applied."
type SetGiftOptionsOnCartOutput {
    "The modified cart object."
    cart: Cart!
}

"Contains details about the cart after setting the email of a guest."
type SetGuestEmailOnCartOutput {
    "The cart after setting the guest email."
    cart: Cart!
}

"Contains the negotiable quote."
type SetNegotiableQuoteBillingAddressOutput {
    "The negotiable quote after assigning a billing address."
    quote: NegotiableQuote
}

"Contains details about the negotiable quote after setting the payment method."
type SetNegotiableQuotePaymentMethodOutput {
    "The updated negotiable quote."
    quote: NegotiableQuote
}

"Contains the negotiable quote."
type SetNegotiableQuoteShippingAddressOutput {
    "The negotiable quote after assigning a shipping address."
    quote: NegotiableQuote
}

"Contains the negotiable quote."
type SetNegotiableQuoteShippingMethodsOutput {
    "The negotiable quote after applying shipping methods."
    quote: NegotiableQuote
}

"Contains details about the cart after setting the payment method."
type SetPaymentMethodOnCartOutput {
    "The cart after setting the payment method."
    cart: Cart!
}

type SetPushNotifyTokenOnCartOutput {
    cart: Cart!
}

"Contains details about the cart after setting the shipping addresses."
type SetShippingAddressesOnCartOutput {
    "The cart after setting the shipping addresses."
    cart: Cart!
}

"Contains details about the cart after setting the shipping methods."
type SetShippingMethodsOnCartOutput {
    "The cart after setting the shipping methods."
    cart: Cart!
}

"Contains the results of a request to share a gift registry."
type ShareGiftRegistryOutput {
    "Indicates whether the gift registry was successfully shared."
    is_shared: Boolean!
}

"An abstraction of the wishlist item to remove the need for item and items_v2 resolvers as the resolvers are built into the 'getSharedWishlist' resolver."
type SharedWishlist {
    customer_firstname: String!
    "Wishlist unique identifier"
    id: ID
    "The number of items in the wish list"
    items_count: Int
    "An array of items in the customer's wishlist"
    items_v2: WishlistItems
    "An encrypted code that Magento uses to link to the wish list"
    sharing_code: String
    "The time of the last modification to the wish list"
    updated_at: String
}

type ShipmentItem implements ShipmentItemInterface {
    "The unique ID for a `ShipmentItemInterface` object."
    id: ID!
    "The order item associated with the shipment item."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of shipped items."
    quantity_shipped: Float!
}

"Contains order shipment tracking details."
type ShipmentTracking {
    "The shipping carrier for the order delivery"
    carrier: String
    "The tracking number of the order shipment."
    number: String
    "The shipment tracking title"
    title: String
}

type ShippingAndPaymentMethodLastUsed {
    "Retrieve the last used saved token/card details for a customer."
    applied_token: LastUsedSavedCard
    "The last used billing address ID if exists."
    billing_address_id: Int
    "The date that this latest order was created."
    created_date: String
    "The shipping method code of the last used shipping method."
    delivery_method: String
    "The MRP company_store_id code of Pickup Location which will be used for In-Store Pickup."
    mrp_pickup_location_code: String
    "The payment method code of the last used payment method."
    payment_method: String
    "The last used delivery address ID if exists."
    shipping_address_id: Int
}

"Contains shipping addresses and methods."
type ShippingCartAddress implements CartAddressInterface {
    "An array that lists the shipping methods that can be applied to the cart."
    available_shipping_methods: [AvailableShippingMethod]
    cart_items: [CartItemQuantity] @deprecated(reason: "Use `cart_items_v2` instead.")
    "An array that lists the items in the cart."
    cart_items_v2: [CartItemInterface]
    "The city specified for the billing or shipping address."
    city: String!
    "The company specified for the billing or shipping address."
    company: String
    "An object containing the country label and code."
    country: CartAddressCountry!
    "ID of the selected address from the customers address book."
    customer_address_id: Int
    "Text provided by the shopper."
    customer_notes: String
    "The first name of the customer or guest."
    firstname: String!
    items_weight: Float @deprecated(reason: "This information should not be exposed on the frontend.")
    "The last name of the customer or guest."
    lastname: String!
    mrp_pickup_location_code: String
    pickup_location_code: String
    "The ZIP or postal code of the billing or shipping address."
    postcode: String
    "An object containing the region label and code."
    region: CartAddressRegion
    "An object that describes the selected shipping method."
    selected_shipping_method: SelectedShippingMethod
    "The Selected Shipping Details Inclusing Tax in Amount"
    selected_shipping_method_incl_tax: SelectedShippingMethodInclTax
    "An array containing the street for the billing or shipping address."
    street: [String]!
    suburb: String
    "The telephone number for the billing or shipping address."
    telephone: String
}

"Defines an individual shipping discount. This discount can be applied to shipping."
type ShippingDiscount {
    "The amount of the discount."
    amount: Money!
}

"Contains details about shipping and handling costs."
type ShippingHandling {
    "The shipping amount, excluding tax."
    amount_excluding_tax: Money
    "The shipping amount, including tax."
    amount_including_tax: Money
    "The applied discounts to the shipping."
    discounts: [ShippingDiscount]
    "Details about taxes applied for shipping."
    taxes: [TaxItem]
    "The total amount for shipping."
    total_amount: Money!
}

type ShippingMethod {
    code: String
    title: String
}

type ShippingMethods {
    gift_registry_address: CustomerAddress
    shipping_methods: [AvailableShippingMethod]
}

"An implementation for simple product cart items."
type SimpleCartItem implements CartItemInterface {
    "The list of available gift wrapping options for the cart item."
    available_gift_wrapping: [GiftWrapping]!
    "Get Salable Quantity of Simple Product From Cart"
    cart_item_stock: [CartItemStockDetails]
    "An array containing the customizable options the shopper selected."
    customizable_options: [SelectedCustomizableOption]!
    "The entered gift message for the cart item"
    gift_message: GiftMessage
    "The selected gift wrapping for the cart item."
    gift_wrapping: GiftWrapping
    "Defines gift registry item uid added to cart."
    giftregistry_item_uid: String
    id: String! @deprecated(reason: "Use `uid` instead.")
    "Contains details about the price of the item, including taxes and discounts."
    prices: CartItemPrices
    "Details about an item in the cart."
    product: ProductInterface!
    "The quantity of this item in the cart."
    quantity: Float!
    "The unique ID for a `CartItemInterface` object."
    uid: ID!
}

"Simple Gift Registry Item"
type SimpleGiftRegistryItem implements GiftRegistryItemInterface {
    "The date the product was added to the gift registry."
    created_at: String!
    customizable_options: [SelectedCustomizableOption]
    giftregistry_item_uid: String
    "A brief message about the gift registry item."
    note: String
    "Details about the gift registry item."
    product: ProductInterface
    purchasers: [Purchaser]
    "The requested quantity of the product."
    quantity: Float!
    "The fulfilled quantity of the product."
    quantity_fulfilled: Float!
    "The unique ID of a gift registry item."
    uid: ID!
}

"Defines a simple product, which is tangible and is usually sold in single units or in fixed quantities."
type SimpleProduct implements CustomizableProductInterface & PhysicalProductInterface & ProductInterface & RoutableInterface {
    about_the_brand: String
    "Array of additionally defined product attributes."
    additional_attributes: [AdditionalAttribute]!
    additional_tab_info: String
    additional_tab_info2: String
    additional_tab_info3: String
    additional_tab_info5: String
    "The attribute set assigned to the product."
    attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")
    "A list of badges applied to the product"
    badges: [ProductBadge]
    blog_author: Int
    blog_content: String
    blog_publish_date: String
    "The brand name for this product - MRP_Brand, MRPH_Brand or MRPS_Brand"
    brand: String
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled."
    canonical_url: String
    "The categories assigned to a product."
    categories: [CategoryInterface]
    "CMS block IDs for the top, middle and bottom of a PDP page."
    cms_blocks_top_middle_bottom: PDPcmsBlocks @deprecated(reason: "Use pdp_cms_blocks, caters for both PWA & APP")
    "A list of configurable product SKUs used to build product swatch cluster"
    configurable_product_swatch_cluster: [String]
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "An array of cross-sell products."
    crosssell_products: [ProductInterface]
    custom_special_text: String
    delivery_and_returns: String
    "Detailed information about the product. The value can include simple HTML tags."
    description: ComplexTextValue
    "Indicates whether a gift message is available."
    gift_message_available: String
    "The ID number assigned to the product."
    id: Int @deprecated(reason: "Use the `uid` field instead.")
    "The relative path to the main image on the product page."
    image: ProductImage
    image_content_type: String
    image_group_set: String
    image_product_code: String
    image_sequence_number: String
    is_essential: Int
    is_hero_product: Int
    "Indicates whether the product can be returned."
    is_returnable: String
    "A list of label phrase/text on the product"
    labels: [ProductLabel]
    left_badge: String
    left_badge_enabled: Int
    length: String
    "The Product made_to_order attribute."
    made_to_order: Boolean
    "A number representing the product's manufacturer."
    manufacturer: Int
    "An array of media gallery objects."
    media_gallery: [MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    "Mageplaza labels applied on the product"
    mp_label_data: [LabelRules]
    mrp_b_online_category: Int
    mrp_b_onlinesubcategory: Int
    mrp_bottom_size: Int
    mrp_brand: Int
    mrp_colour: Int
    mrp_colour_group: Int
    mrp_e_pattern: Int
    mrp_garment_length: Int
    mrp_neckline: Int
    mrp_occasion: Int
    mrp_online_baby_b_category: Int
    mrp_online_baby_b_sub_category: Int
    mrp_online_baby_g_category: Int
    mrp_online_baby_g_sub_category: Int
    mrp_online_bb_category: Int
    mrp_online_bb_sub_category: Int
    mrp_online_bg_category: Int
    mrp_online_bg_sub_category: Int
    mrp_online_category: Int
    mrp_online_m_category: Int
    mrp_online_m_sub_category: Int
    mrp_online_nursery_category: Int
    mrp_online_pb_category: Int
    mrp_online_pb_sub_category: Int
    mrp_online_pg_category: Int
    mrp_online_pg_sub_category: Int
    mrp_online_sub_category: Int
    mrp_pattern_mens_shirts: Int
    mrp_shape: Int
    mrp_shoe_size: Int
    mrp_shoesize_bigkids: Int
    mrp_shopbytrend: Int
    mrp_size: Int
    mrp_sleeve_length: Int
    mrp_underwear_l_size: Int
    mrp_underwear_size: Int
    mrph_bedding_size: Int
    mrph_brand: Int
    mrph_colour: Int
    mrph_colour_group: Int
    mrph_cushions_size: Int
    mrph_dimensions: Int
    mrph_fabric: Int
    mrph_shape: Int
    mrph_size: Int
    mrph_towels_size: Int
    mrph_window_coverings_size: Int
    mrpm_brands: Int
    "Color of the cellular product."
    mrpm_color: String
    mrpm_colour: Int
    "Network provider of the cellular product."
    mrpm_network_provider: Int
    "Size/Dimensions of cellular product if applicable."
    mrpm_size: Int
    "Internal SKU, not the same as the Magento fulfillment SKU."
    mrpm_sku: String
    mrps_brand: Int
    mrps_colour: Int
    mrps_colour_group: Int
    mrps_dimension: Int
    mrps_garment_length: Int
    mrps_neckline: Int
    mrps_size_outdoor_equip: Int
    mrps_size_outerwear: Int
    mrps_size_shoes: Int
    mrps_size_sports: Int
    mrps_size_underwear_bras: Int
    mrps_sub_category: Int
    mrps_sub_sub_category: Int
    mrps_underwear_bras: Int
    "The product name. Customers use this name to identify the product."
    name: String
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The end date for new product listings."
    new_to_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "Product stock only x left count"
    only_x_left_in_stock: Float
    "An array of options for a customizable product."
    options: [CustomizableOptionInterface]
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    "Product parent SKU, this will be used for filtering of products."
    par_sku: String
    "PDP CMS blocks for various regions on the PDP page i.e. top, middle bottom etc."
    pdp_cms_blocks: [CmsBlock]
    "Indicates the price of an item."
    price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")
    "The range of prices for the product"
    price_range: PriceRange!
    "An array of `TierPrice` objects."
    price_tiers: [TierPrice]
    "An array of `ProductLinks` objects."
    product_links: [ProductLinksInterface]
    "Product Url of the product."
    product_url: String
    promo_image_url: String
    promo_text: String
    "The average of all the ratings given to the product."
    rating_summary: Float!
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "An array of related products."
    related_products: [ProductInterface]
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "The total count of all the reviews given to the product."
    review_count: Int!
    "The list of products reviews."
    reviews(
        "The page of results to return. The default is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): ProductReviews!
    right_badge_enabled: Int
    "Get Salable Quantity of Simple Product"
    salable_quantity: Float
    "The code assigned to the Scene7 image."
    scene_seven_image_url: String
    "A short description of the product. Its use depends on the theme."
    short_description: ComplexTextValue
    size_chart: String
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: ProductImage
    special_badge_image_name: String
    "The beginning date that a product has a special price."
    special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The discounted price of the product."
    special_price: Float
    special_price_badge: Int
    special_text: Int
    special_text_background_color: String
    special_text_bg_color_opacity: String
    "The end date for a product with a special price."
    special_to_date: String
    ss_brand: Int
    ss_colour_group: Int
    ss_dimensions: Int
    ss_size: Int
    "Indicates whether the product is staged for a future campaign."
    staged: Boolean!
    "Stock status of the product"
    stock_status: ProductStockStatus
    "The file name of a swatch image."
    swatch_image: String
    "The relative path to the product's thumbnail image."
    thumbnail: ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason: "Use `__typename` instead.")
    "The unique ID for a `ProductInterface` object."
    uid: ID!
    "Timestamp indicating when the product was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "An array of up-sell products."
    upsell_products: [ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    "An array of websites in which the product is available."
    websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
    "The weight of the item, in units defined by the store."
    weight: Float
}

"Contains details about simple products added to a requisition list."
type SimpleRequisitionListItem implements RequisitionListItemInterface {
    "Selected custom options for an item in the requisition list."
    customizable_options: [SelectedCustomizableOption]!
    "Details about a requisition list item."
    product: ProductInterface!
    "The amount added."
    quantity: Float!
    "The unique ID for the requisition list item."
    uid: ID!
}

"Contains a simple product wish list item."
type SimpleWishlistItem implements WishlistItemInterface {
    "The date and time the item was added to the wish list."
    added_at: String!
    "Custom options selected for the wish list item."
    customizable_options: [SelectedCustomizableOption]!
    "The description of the item."
    description: String
    "The unique ID for a `WishlistItemInterface` object."
    id: ID!
    "Product details of the wish list item."
    product: ProductInterface
    "The quantity of this wish list item."
    quantity: Float!
}

"Defines a possible sort field."
type SortField {
    "The label of the sort field."
    label: String
    "The attribute code of the sort field."
    value: String
}

"Contains a default value for sort fields and all available sort fields."
type SortFields {
    "The default sort field value."
    default: String
    "An array of possible sort fields."
    options: [SortField]
}

type SortOptions {
    key: Int
    label: String
    value: String
}

type Store {
    address_line_1: String
    address_line_2: String
    address_line_3: String
    city: String
    "Combination of the division ID and the store ID"
    company_store_id: String
    country: String
    country_location_id: Int
    description: String
    filter_attributes: [FilterAttribute]
    latitude: Float
    longitude: Float
    opening_hours_friday: String
    opening_hours_monday: String
    opening_hours_saturday: String
    opening_hours_sunday: String
    opening_hours_thursday: String
    opening_hours_tuesday: String
    opening_hours_wednesday: String
    opening_hours_weekdays: String
    phone: String
    post_code: String
    province: String
    title: String
}

type StoreAttribute {
    code: Int!
    name: String!
}

"Contains information about a store's configuration."
type StoreConfig {
    "Contains scripts that must be included in the HTML before the closing `<body>` tag."
    absolute_footer: String
    "Indicates if the gift sender has the option to send a gift receipt. Possible values: 1 (Yes) and 0 (No)."
    allow_gift_receipt: String
    "Indicates whether gift wrapping can be added for the entire order. Possible values: 1 (Yes) and 0 (No)."
    allow_gift_wrapping_on_order: String
    "Indicates whether gift wrapping can be added for individual order items. Possible values: 1 (Yes) and 0 (No)."
    allow_gift_wrapping_on_order_items: String
    "Indicates whether guest users can write product reviews. Possible values: 1 (Yes) and 0 (No)."
    allow_guests_to_write_product_reviews: String
    "The value of the Allow Gift Messages for Order Items option"
    allow_items: String
    "The value of the Allow Gift Messages on Order Level option"
    allow_order: String
    "Indicates if a printed card can accompany an order. Possible values: 1 (Yes) and 0 (No)."
    allow_printed_card: String
    "Indicates whether to enable autocomplete on login and forgot password forms."
    autocomplete_on_storefront: Boolean
    "The base currency code."
    base_currency_code: String
    "A fully-qualified URL that is used to create relative links to the `base_url`."
    base_link_url: String
    "The fully-qualified URL that specifies the location of media files."
    base_media_url: String
    "The fully-qualified URL that specifies the location of static view files."
    base_static_url: String
    "The store’s fully-qualified base URL."
    base_url: String
    "Braintree cc vault status."
    braintree_cc_vault_active: String
    "Indicates if gift wrapping prices are displayed on the Shopping Cart page. Possible values: 1 (Yes) and 0 (No)."
    cart_gift_wrapping: String
    "Indicates if printed card prices are displayed on the Shopping Cart page. Possible values: 1 (Yes) and 0 (No)."
    cart_printed_card: String
    "The default sort order of the search results list."
    catalog_default_sort_by: String
    "Corresponds to the 'Display Prices In Product Lists' field in the Admin. It indicates how FPT information is displayed on category pages."
    category_fixed_product_tax_display_setting: FixedProductTaxDisplaySettings
    "The suffix applied to category pages, such as `.htm` or `.html`."
    category_url_suffix: String
    "Indicates whether only specific countries can use this payment method."
    check_money_order_enable_for_specific_countries: Boolean
    "Indicates whether the Check/Money Order payment method is enabled."
    check_money_order_enabled: Boolean
    "The name of the party to whom the check must be payable."
    check_money_order_make_check_payable_to: String
    "The maximum order amount required to qualify for the Check/Money Order payment method."
    check_money_order_max_order_total: String
    "The minimum order amount required to qualify for the Check/Money Order payment method."
    check_money_order_min_order_total: String
    "The status of new orders placed using the Check/Money Order payment method."
    check_money_order_new_order_status: String
    "A comma-separated list of specific countries allowed to use the Check/Money Order payment method."
    check_money_order_payment_from_specific_countries: String
    "The full street address or PO Box where the checks are mailed."
    check_money_order_send_check_to: String
    "A number indicating the position of the Check/Money Order payment method in the list of available payment methods during checkout."
    check_money_order_sort_order: Int
    "The title of the Check/Money Order payment method displayed on the storefront."
    check_money_order_title: String
    "The name of the CMS page that identifies the home page for the store."
    cms_home_page: String
    "A specific CMS page that displays when cookies are not enabled for the browser."
    cms_no_cookies: String
    "A specific CMS page that displays when a 404 'Page Not Found' error occurs."
    cms_no_route: String
    "A code assigned to the store to identify it."
    code: String @deprecated(reason: "Use `store_code` instead.")
    "Indicates whether the `parent` or child (`itself`) thumbnail should be used in the cart for configurable products."
    configurable_thumbnail_source: String
    "Indicates whether the Contact Us form in enabled."
    contact_enabled: Boolean!
    "The copyright statement that appears at the bottom of each page."
    copyright: String
    "The description that provides a summary of your site for search engine listings. It should not be more than 160 characters in length."
    default_description: String
    "The default display currency code."
    default_display_currency_code: String
    "A series of keywords that describe your store, each separated by a comma."
    default_keywords: String
    "The title that appears at the title bar of each page when viewed in a browser."
    default_title: String
    "Controls the display of the demo store notice at the top of the page. Options: 0 (No) or 1 (Yes)."
    demonotice: Int
    "Divison Id on Store Level Only as Configured - mrpgroupecom_storelocations/divison_id_store_level/divison_id"
    division_id: Int
    "Indicates whether customers can have multiple wish lists. Possible values: 1 (Yes) and 0 (No)."
    enable_multiple_wishlists: String
    "The landing page that is associated with the base URL."
    front: String
    "Google Maps API Key - mrpgroupecom_storelocations/google_maps/api_key"
    google_maps_api: String
    "The default number of products per page in Grid View."
    grid_per_page: Int
    "A list of numbers that define how many products can be displayed in Grid View."
    grid_per_page_values: String
    "Scripts that must be included in the HTML before the closing `<head>` tag."
    head_includes: String
    "The small graphic image (favicon) that appears in the address bar and tab of the browser."
    head_shortcut_icon: String
    "The path to the logo that appears in the header."
    header_logo_src: String
    "The ID number assigned to the store."
    id: Int @deprecated(reason: "Use `store_code` instead.")
    "Indicates whether the store view has been designated as the default within the store group."
    is_default_store: Boolean
    "Indicates whether the store group has been designated as the default within the website."
    is_default_store_group: Boolean
    "Indicates whether negotiable quote functionality is enabled."
    is_negotiable_quote_active: Boolean
    "Indicates whether requisition lists are enabled. Possible values: 1 (Yes) and 0 (No)."
    is_requisition_list_active: String
    "The format of the search results list."
    list_mode: String
    "The default number of products per page in List View."
    list_per_page: Int
    "A list of numbers that define how many products can be displayed in List View."
    list_per_page_values: String
    "The store locale."
    locale: String
    "The Alt text that is associated with the logo."
    logo_alt: String
    "The height of the logo image, in pixels."
    logo_height: Int
    "The width of the logo image, in pixels."
    logo_width: Int
    "Indicates whether reward points functionality is enabled. Possible values: 1 (Enabled) and 0 (Disabled)."
    magento_reward_general_is_enabled: String
    "Indicates whether reward points functionality is enabled on the storefront. Possible values: 1 (Enabled) and 0 (Disabled)."
    magento_reward_general_is_enabled_on_front: String
    "The minimum point balance customers must have before they can redeem them. A null value indicates no minimum."
    magento_reward_general_min_points_balance: String
    "When enabled, customers can see a detailed history of their reward points. Possible values: 1 (Enabled) and 0 (Disabled)."
    magento_reward_general_publish_history: String
    "The number of points for a referral when an invitee registers on the site."
    magento_reward_points_invitation_customer: String
    "The maximum number of registration referrals that will qualify for rewards. A null value indicates no limit."
    magento_reward_points_invitation_customer_limit: String
    "The number of points for a referral, when an invitee places their first order on the site."
    magento_reward_points_invitation_order: String
    "The number of order conversions that can earn points for the customer who sends the invitation. A null value indicates no limit."
    magento_reward_points_invitation_order_limit: String
    "The number of points earned by registered customers who subscribe to a newsletter."
    magento_reward_points_newsletter: String
    "Indicates customers earn points for shopping according to the reward point exchange rate. In Luma, this also controls whether to show a message in the shopping cart about the rewards points earned for the purchase, as well as the customer’s current reward point balance."
    magento_reward_points_order: String
    "The number of points customer gets for registering."
    magento_reward_points_register: String
    "The number of points for writing a review."
    magento_reward_points_review: String
    "The maximum number of reviews that will qualify for the rewards. A null value indicates no limit."
    magento_reward_points_review_limit: String
    "Indicates whether wishlists are enabled (1) or disabled (0)."
    magento_wishlist_general_is_enabled: String
    "If multiple wish lists are enabled, the maximum number of wish lists the customer can have."
    maximum_number_of_wishlists: String
    "The minimum number of characters required for a valid password."
    minimum_password_length: String
    "The default page that displays when a 404 'Page not Found' error occurs."
    no_route: String
    "Use Magento Recommendation - nosto/extra_config/nosto_use_magento_recommendation"
    nosto_use_magento_recommendation: Int
    "Payflow Pro vault status."
    payment_payflowpro_cc_vault_active: String
    "The default price of a printed card that accompanies an order."
    printed_card_price: String
    "Corresponds to the 'Display Prices On Product View Page' field in the Admin. It indicates how FPT information is displayed on product pages."
    product_fixed_product_tax_display_setting: FixedProductTaxDisplaySettings
    "Indicates whether product reviews are enabled. Possible values: 1 (Yes) and 0 (No)."
    product_reviews_enabled: String
    "The suffix applied to product pages, such as `.htm` or `.html`."
    product_url_suffix: String
    "The number of different character classes (lowercase, uppercase, digits, special characters) required in a password."
    required_character_classes_number: String
    "Indicates whether RMA is enabled on the storefront. Possible values: enabled/disabled."
    returns_enabled: String!
    "The ID of the root category."
    root_category_id: Int @deprecated(reason: "Use `root_category_uid` instead.")
    "The unique ID for a `CategoryInterface` object."
    root_category_uid: ID
    "Corresponds to the 'Display Prices In Sales Modules' field in the Admin. It indicates how FPT information is displayed on cart, checkout, and order pages."
    sales_fixed_product_tax_display_setting: FixedProductTaxDisplaySettings
    "Indicates if gift wrapping prices are displayed on the Orders page. Possible values: 1 (Yes) and 0 (No)."
    sales_gift_wrapping: String
    "Indicates if printed card prices are displayed on the Orders page. Possible values: 1 (Yes) and 0 (No)."
    sales_printed_card: String
    "A secure fully-qualified URL that is used to create relative links to the `base_url`."
    secure_base_link_url: String
    "The secure fully-qualified URL that specifies the location of media files."
    secure_base_media_url: String
    "The secure fully-qualified URL that specifies the location of static view files."
    secure_base_static_url: String
    "The store’s fully-qualified secure base URL."
    secure_base_url: String
    "Email to a Friend configuration."
    send_friend: SendFriendConfiguration
    "Indicates whether a breadcrumb trail appears on all CMS pages in the catalog. 0 (No) or 1 (Yes)."
    show_cms_breadcrumbs: Int
    "The unique ID of the store view. In the Admin, this is called the Store View Code. When making a GraphQL call, assign this value to the `Store` header to provide the scope."
    store_code: ID
    "The unique ID assigned to the store group. In the Admin, this is called the Store Name."
    store_group_code: ID
    "The label assigned to the store group."
    store_group_name: String
    "The label assigned to the store view."
    store_name: String
    "The store view sort order."
    store_sort_order: Int
    "The time zone of the store."
    timezone: String
    "A prefix that appears before the title to create a two- or three-part title."
    title_prefix: String
    "The character that separates the category name and subcategory in the browser title bar."
    title_separator: String
    "A suffix that appears after the title to create a two- or three-part title."
    title_suffix: String
    "Indicates whether the store code should be used in the URL."
    use_store_in_url: Boolean
    "The unique ID for the website."
    website_code: ID
    "The ID number assigned to the website store."
    website_id: Int @deprecated(reason: "The field should not be used on the storefront.")
    "The label assigned to the website."
    website_name: String
    "The unit of weight."
    weight_unit: String
    "Text that appears in the header of the page and includes the name of the logged in customer."
    welcome: String
    "Indicates whether only specific countries can use this payment method."
    zero_subtotal_enable_for_specific_countries: Boolean
    "Indicates whether the Zero Subtotal payment method is enabled."
    zero_subtotal_enabled: Boolean
    "The status of new orders placed using the Zero Subtotal payment method."
    zero_subtotal_new_order_status: String
    "When the new order status is 'Processing', this can be set to `authorize_capture` to automatically invoice all items that have a zero balance."
    zero_subtotal_payment_action: String
    "A comma-separated list of specific countries allowed to use the Zero Subtotal payment method."
    zero_subtotal_payment_from_specific_countries: String
    "A number indicating the position of the Zero Subtotal payment method in the list of available payment methods during checkout."
    zero_subtotal_sort_order: Int
    "The title of the Zero Subtotal payment method displayed on the storefront."
    zero_subtotal_title: String
}

type StoreFrontProps {
    layout_updates: [LayoutUpdateDetails]
    sort_order: Int
    type: String
    widget_id: Int
    widget_title: String
}

type StoreLocationCount {
    count: Int
    storeLocation: String
    storeLocationId: Int
}

"Store that has stock of an item"
type StoreStock {
    "Distance from the customer to the store"
    distance: String!
    "The stores GPS latitude"
    gpsLatitude: String!
    "The stores GPS longitude"
    gpsLongitude: String!
    "Quantity of the stock in store"
    quantity: Int!
    "The store description"
    storeDescription: String
    "The storeLocationId"
    storeLocationId: String!
}

"Indicates where an attribute can be displayed."
type StorefrontProperties {
    "The relative position of the attribute in the layered navigation block."
    position: Int
    "Indicates whether the attribute is filterable with results, without results, or not at all."
    use_in_layered_navigation: UseInLayeredNavigationOptions
    "Indicates whether the attribute is displayed in product listings."
    use_in_product_listing: Boolean
    "Indicates whether the attribute can be used in layered navigation on search results pages."
    use_in_search_results_layered_navigation: Boolean
    "Indicates whether the attribute is displayed on product pages."
    visible_on_catalog_pages: Boolean
}

"Google Places prediction additional details"
type StructuredFormat {
    "The main description text"
    mainText: String
    "These describe the location of the entered term in the prediction result text, so that the term can be highlighted if desired"
    mainTextMatchedSubstrings: [OffsetLength!]!
    "Contains the secondary text of a prediction, usually the location of the place."
    secondaryText: String
}

type SubscribeEmailToNewsletterOutput {
    "Store ID associated with newsletter."
    newsletter_id: Int!
    "Newsletter name."
    newsletter_name: String!
    "Returns the status of the subscription request."
    status: SubscriptionStatusesEnum
}

type Subscription {
    created_at: String
    customer_id: Int
    email: String
    entity_id: Int!
    newsletter_id: Int
    newsletter_name: String
    store_id: Int
}

"Describes the swatch type and a value."
type SwatchData {
    "The type of swatch filter item: 1 - text; 2 - image."
    type: String
    "The value for the swatch item. It could be text or an image link."
    value: String
}

type SwatchLayerFilterItem implements LayerFilterItemInterface & SwatchLayerFilterItemInterface {
    "The count of items per filter."
    items_count: Int @deprecated(reason: "Use `AggregationOption.count` instead.")
    "The label for a filter."
    label: String @deprecated(reason: "Use `AggregationOption.label` instead.")
    "Data required to render a swatch filter item."
    swatch_data: SwatchData
    "The value of a filter request variable to be used in query."
    value_string: String @deprecated(reason: "Use `AggregationOption.value` instead.")
}

type Tax {
    taxLine: [String]
}

"Contains tax item details."
type TaxItem {
    "The amount of tax applied to the item."
    amount: Money!
    "The rate used to calculate the tax."
    rate: Float!
    "A title that describes the tax."
    title: String!
}

type Tender {
    header: String
    tenderLines: TenderLines
}

type TenderLine {
    tenderAmount: String
    tenderType: String
}

type TenderLines {
    tenderLine: [TenderLine]
}

type TextSwatchData implements SwatchDataInterface {
    "The value can be represented as color (HEX code), image link, or text."
    value: String
}

"Defines a price based on the quantity purchased."
type TierPrice {
    "The price discount that this tier represents."
    discount: ProductDiscount
    "The price of the product at this tier."
    final_price: Money
    "The minimum number of items that must be purchased to qualify for this price tier."
    quantity: Float
}

type TotalDue {
    description: String
    totalValue: String
}

"Contains details about the cart after updating items."
type UpdateCartItemsOutput {
    "The cart after updating products."
    cart: Cart!
}

"Contains the response to the request to update the company."
type UpdateCompanyOutput {
    "The updated company instance."
    company: Company!
}

"Contains the response to the request to update the company role."
type UpdateCompanyRoleOutput {
    "The updated company role instance."
    role: CompanyRole!
}

type UpdateCompanyStatusOutput {
    message: String!
    status: Boolean!
}

"Contains the response to the request to update the company structure."
type UpdateCompanyStructureOutput {
    "The updated company instance."
    company: Company!
}

"Contains the response to the request to update a company team."
type UpdateCompanyTeamOutput {
    "The updated company team instance."
    team: CompanyTeam!
}

"Contains the response to the request to update the company user."
type UpdateCompanyUserOutput {
    "The updated company user instance."
    user: Customer!
}

"Contains the results of a request to update gift registry items."
type UpdateGiftRegistryItemsOutput {
    "The gift registry after updating updating items."
    gift_registry: GiftRegistry
}

"Contains the results of a request to update a gift registry."
type UpdateGiftRegistryOutput {
    "The updated gift registry."
    gift_registry: GiftRegistry
}

"Contains the results a request to update registrants."
type UpdateGiftRegistryRegistrantsOutput {
    "The gift registry after updating registrants."
    gift_registry: GiftRegistry
}

"Contains the updated negotiable quote."
type UpdateNegotiableQuoteItemsQuantityOutput {
    "The updated negotiable quote."
    quote: NegotiableQuote
}

"Contains the customer's wish list and any errors encountered."
type UpdateProductsInWishlistOutput {
    "An array of errors encountered while updating products in a wish list."
    user_errors: [WishListUserInputError]!
    "Contains the wish list with all items that were successfully updated."
    wishlist: Wishlist!
}

"Output of the request to update items in the specified requisition list."
type UpdateRequisitionListItemsOutput {
    "The requisition list after updating items."
    requisition_list: RequisitionList
}

"Output of the request to rename the requisition list."
type UpdateRequisitionListOutput {
    "The renamed requisition list."
    requisition_list: RequisitionList
}

"Contains the name and visibility of an updated wish list."
type UpdateWishlistOutput {
    "The wish list name."
    name: String!
    "The unique ID of a `Wishlist` object."
    uid: ID!
    "Indicates whether the wish list is public or private."
    visibility: WishlistVisibilityEnum!
}

"Contains URL rewrite details."
type UrlRewrite {
    "An array of request parameters."
    parameters: [HttpQueryParameter]
    "The request URL."
    url: String
}

type Validation {
    message: String!
    validated: Boolean!
}

type VatRegistration {
    vatRegistrationLine: [String]
}

"An implementation for virtual product cart items."
type VirtualCartItem implements CartItemInterface {
    "Get Salable Quantity of Simple Product From Cart"
    cart_item_stock: [CartItemStockDetails]
    "An array containing customizable options the shopper selected."
    customizable_options: [SelectedCustomizableOption]!
    "Defines gift registry item uid added to cart."
    giftregistry_item_uid: String
    id: String! @deprecated(reason: "Use `uid` instead.")
    "Contains details about the price of the item, including taxes and discounts."
    prices: CartItemPrices
    "Details about an item in the cart."
    product: ProductInterface!
    "The quantity of this item in the cart."
    quantity: Float!
    "The unique ID for a `CartItemInterface` object."
    uid: ID!
}

"Defines a virtual product, which is a non-tangible product that does not require shipping and is not kept in inventory."
type VirtualProduct implements CustomizableProductInterface & ProductInterface & RoutableInterface {
    about_the_brand: String
    "Array of additionally defined product attributes."
    additional_attributes: [AdditionalAttribute]!
    additional_tab_info: String
    additional_tab_info2: String
    additional_tab_info3: String
    additional_tab_info5: String
    "The attribute set assigned to the product."
    attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")
    "A list of badges applied to the product"
    badges: [ProductBadge]
    blog_author: Int
    blog_content: String
    blog_publish_date: String
    "The brand name for this product - MRP_Brand, MRPH_Brand or MRPS_Brand"
    brand: String
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled."
    canonical_url: String
    "The categories assigned to a product."
    categories: [CategoryInterface]
    "CMS block IDs for the top, middle and bottom of a PDP page."
    cms_blocks_top_middle_bottom: PDPcmsBlocks @deprecated(reason: "Use pdp_cms_blocks, caters for both PWA & APP")
    "A list of configurable product SKUs used to build product swatch cluster"
    configurable_product_swatch_cluster: [String]
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "An array of cross-sell products."
    crosssell_products: [ProductInterface]
    custom_special_text: String
    delivery_and_returns: String
    "Detailed information about the product. The value can include simple HTML tags."
    description: ComplexTextValue
    "Indicates whether a gift message is available."
    gift_message_available: String
    "The ID number assigned to the product."
    id: Int @deprecated(reason: "Use the `uid` field instead.")
    "The relative path to the main image on the product page."
    image: ProductImage
    image_content_type: String
    image_group_set: String
    image_product_code: String
    image_sequence_number: String
    is_essential: Int
    is_hero_product: Int
    "Indicates whether the product can be returned."
    is_returnable: String
    "A list of label phrase/text on the product"
    labels: [ProductLabel]
    left_badge: String
    left_badge_enabled: Int
    length: String
    "The Product made_to_order attribute."
    made_to_order: Boolean
    "A number representing the product's manufacturer."
    manufacturer: Int
    "An array of media gallery objects."
    media_gallery: [MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    "Mageplaza labels applied on the product"
    mp_label_data: [LabelRules]
    mrp_b_online_category: Int
    mrp_b_onlinesubcategory: Int
    mrp_bottom_size: Int
    mrp_brand: Int
    mrp_colour: Int
    mrp_colour_group: Int
    mrp_e_pattern: Int
    mrp_garment_length: Int
    mrp_neckline: Int
    mrp_occasion: Int
    mrp_online_baby_b_category: Int
    mrp_online_baby_b_sub_category: Int
    mrp_online_baby_g_category: Int
    mrp_online_baby_g_sub_category: Int
    mrp_online_bb_category: Int
    mrp_online_bb_sub_category: Int
    mrp_online_bg_category: Int
    mrp_online_bg_sub_category: Int
    mrp_online_category: Int
    mrp_online_m_category: Int
    mrp_online_m_sub_category: Int
    mrp_online_nursery_category: Int
    mrp_online_pb_category: Int
    mrp_online_pb_sub_category: Int
    mrp_online_pg_category: Int
    mrp_online_pg_sub_category: Int
    mrp_online_sub_category: Int
    mrp_pattern_mens_shirts: Int
    mrp_shape: Int
    mrp_shoe_size: Int
    mrp_shoesize_bigkids: Int
    mrp_shopbytrend: Int
    mrp_size: Int
    mrp_sleeve_length: Int
    mrp_underwear_l_size: Int
    mrp_underwear_size: Int
    mrph_bedding_size: Int
    mrph_brand: Int
    mrph_colour: Int
    mrph_colour_group: Int
    mrph_cushions_size: Int
    mrph_dimensions: Int
    mrph_fabric: Int
    mrph_shape: Int
    mrph_size: Int
    mrph_towels_size: Int
    mrph_window_coverings_size: Int
    mrpm_brands: Int
    "Color of the cellular product."
    mrpm_color: String
    mrpm_colour: Int
    "Network provider of the cellular product."
    mrpm_network_provider: Int
    "Size/Dimensions of cellular product if applicable."
    mrpm_size: Int
    "Internal SKU, not the same as the Magento fulfillment SKU."
    mrpm_sku: String
    mrps_brand: Int
    mrps_colour: Int
    mrps_colour_group: Int
    mrps_dimension: Int
    mrps_garment_length: Int
    mrps_neckline: Int
    mrps_size_outdoor_equip: Int
    mrps_size_outerwear: Int
    mrps_size_shoes: Int
    mrps_size_sports: Int
    mrps_size_underwear_bras: Int
    mrps_sub_category: Int
    mrps_sub_sub_category: Int
    mrps_underwear_bras: Int
    "The product name. Customers use this name to identify the product."
    name: String
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The end date for new product listings."
    new_to_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "Product stock only x left count"
    only_x_left_in_stock: Float
    "An array of options for a customizable product."
    options: [CustomizableOptionInterface]
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    "Product parent SKU, this will be used for filtering of products."
    par_sku: String
    "PDP CMS blocks for various regions on the PDP page i.e. top, middle bottom etc."
    pdp_cms_blocks: [CmsBlock]
    "Indicates the price of an item."
    price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")
    "The range of prices for the product"
    price_range: PriceRange!
    "An array of `TierPrice` objects."
    price_tiers: [TierPrice]
    "An array of `ProductLinks` objects."
    product_links: [ProductLinksInterface]
    "Product Url of the product."
    product_url: String
    promo_image_url: String
    promo_text: String
    "The average of all the ratings given to the product."
    rating_summary: Float!
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "An array of related products."
    related_products: [ProductInterface]
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "The total count of all the reviews given to the product."
    review_count: Int!
    "The list of products reviews."
    reviews(
        "The page of results to return. The default is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): ProductReviews!
    right_badge_enabled: Int
    "Get Salable Quantity of Simple Product"
    salable_quantity: Float
    "The code assigned to the Scene7 image."
    scene_seven_image_url: String
    "A short description of the product. Its use depends on the theme."
    short_description: ComplexTextValue
    size_chart: String
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: ProductImage
    special_badge_image_name: String
    "The beginning date that a product has a special price."
    special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The discounted price of the product."
    special_price: Float
    special_price_badge: Int
    special_text: Int
    special_text_background_color: String
    special_text_bg_color_opacity: String
    "The end date for a product with a special price."
    special_to_date: String
    ss_brand: Int
    ss_colour_group: Int
    ss_dimensions: Int
    ss_size: Int
    "Indicates whether the product is staged for a future campaign."
    staged: Boolean!
    "Stock status of the product"
    stock_status: ProductStockStatus
    "The file name of a swatch image."
    swatch_image: String
    "The relative path to the product's thumbnail image."
    thumbnail: ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason: "Use `__typename` instead.")
    "The unique ID for a `ProductInterface` object."
    uid: ID!
    "Timestamp indicating when the product was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "An array of up-sell products."
    upsell_products: [ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    "An array of websites in which the product is available."
    websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
}

"Contains details about virtual products added to a requisition list."
type VirtualRequisitionListItem implements RequisitionListItemInterface {
    "Selected custom options for an item in the requisition list."
    customizable_options: [SelectedCustomizableOption]!
    "Details about a requisition list item."
    product: ProductInterface!
    "The amount added."
    quantity: Float!
    "The unique ID for the requisition list item."
    uid: ID!
}

"Contains a virtual product wish list item."
type VirtualWishlistItem implements WishlistItemInterface {
    "The date and time the item was added to the wish list."
    added_at: String!
    "Custom options selected for the wish list item."
    customizable_options: [SelectedCustomizableOption]!
    "The description of the item."
    description: String
    "The unique ID for a `WishlistItemInterface` object."
    id: ID!
    "Product details of the wish list item."
    product: ProductInterface
    "The quantity of this wish list item."
    quantity: Float!
}

"Deprecated. It should not be used on the storefront. Contains information about a website."
type Website {
    "A code assigned to the website to identify it."
    code: String @deprecated(reason: "The field should not be used on the storefront.")
    "The default group ID of the website."
    default_group_id: String @deprecated(reason: "The field should not be used on the storefront.")
    "The ID number assigned to the website."
    id: Int @deprecated(reason: "The field should not be used on the storefront.")
    "Indicates whether this is the default website."
    is_default: Boolean @deprecated(reason: "The field should not be used on the storefront.")
    "The website name. Websites use this name to identify it easier."
    name: String @deprecated(reason: "The field should not be used on the storefront.")
    "The attribute to use for sorting websites."
    sort_order: Int @deprecated(reason: "The field should not be used on the storefront.")
}

type Widget {
    storefront_properties: StoreFrontProps
    widget_options: WidgetOptions
}

type WidgetOptions {
    block_id: String
    content: String
    "Widget content as content JSON"
    contentJson: String
}

"An error encountered while performing operations with WishList."
type WishListUserInputError {
    "A wish list-specific error code."
    code: WishListUserInputErrorType!
    "A localized error message."
    message: String!
}

"Contains a customer wish list."
type Wishlist {
    "The unique ID for a `Wishlist` object."
    id: ID
    items: [WishlistItem] @deprecated(reason: "Use the `items_v2` field instead.")
    "The number of items in the wish list."
    items_count: Int
    "An array of items in the customer's wish list."
    items_v2(currentPage: Int = 1, pageSize: Int = 20): WishlistItems
    "The name of the wish list."
    name: String
    "An encrypted code that Magento uses to link to the wish list."
    sharing_code: String
    "Wishlist unique identifier in uid format"
    uid: String!
    "The time of the last modification to the wish list."
    updated_at: String
    "Indicates whether the wish list is public or private."
    visibility: WishlistVisibilityEnum!
}

"Contains details about errors encountered when a customer added wish list items to the cart."
type WishlistCartUserInputError {
    "An error code that describes the error encountered."
    code: WishlistCartUserInputErrorType!
    "A localized error message."
    message: String!
    "The unique ID of the `Wishlist` object containing an error."
    wishlistId: ID!
    "The unique ID of the wish list item containing an error."
    wishlistItemId: ID!
}

"Contains details about a wish list item."
type WishlistItem {
    "The time when the customer added the item to the wish list."
    added_at: String
    "The customer's comment about this item."
    description: String
    "The unique ID for a `WishlistItem` object."
    id: Int
    "Details about the wish list item."
    product: ProductInterface
    "The quantity of this wish list item"
    qty: Float
}

"Contains an array of items in a wish list."
type WishlistItems {
    "A list of items in the wish list."
    items: [WishlistItemInterface]!
    "Contains pagination metadata."
    page_info: SearchResultPageInfo
}

"Deprecated: Use the `Wishlist` type instead."
type WishlistOutput {
    "An array of items in the customer's wish list"
    items: [WishlistItem] @deprecated(reason: "Use the `Wishlist.items` field instead.")
    "The number of items in the wish list."
    items_count: Int @deprecated(reason: "Use the `Wishlist.items_count` field instead.")
    "When multiple wish lists are enabled, the name the customer assigns to the wishlist."
    name: String @deprecated(reason: "This field is related to Commerce functionality and is always `null` in Open Source.")
    "An encrypted code that links to the wish list."
    sharing_code: String @deprecated(reason: "Use the `Wishlist.sharing_code` field instead.")
    "The time of the last modification to the wish list."
    updated_at: String @deprecated(reason: "Use the `Wishlist.updated_at` field instead.")
}

enum AddRequisitionListItemToCartUserErrorType {
    LOW_QUANTITY @deprecated(reason: "")
    OPTIONS_UPDATED @deprecated(reason: "")
    OUT_OF_STOCK @deprecated(reason: "")
    UNAVAILABLE_SKU @deprecated(reason: "")
}

"Application type must be specified, can either be set as IOS, WEB or ANDROID"
enum Application {
    ANDROID @deprecated(reason: "")
    IOS @deprecated(reason: "")
    WEB @deprecated(reason: "")
}

enum BatchMutationStatus {
    FAILURE @deprecated(reason: "")
    MIXED_RESULTS @deprecated(reason: "")
    SUCCESS @deprecated(reason: "")
}

enum CartUserInputErrorType {
    INSUFFICIENT_STOCK @deprecated(reason: "")
    NOT_SALABLE @deprecated(reason: "")
    PRODUCT_NOT_FOUND @deprecated(reason: "")
    UNDEFINED @deprecated(reason: "")
}

"Indicates how agreements are accepted."
enum CheckoutAgreementMode {
    "Conditions are automatically accepted upon checkout."
    AUTO @deprecated(reason: "")
    "Shoppers must manually accept the conditions to place an order."
    MANUAL @deprecated(reason: "")
}

enum CheckoutUserInputErrorCodes {
    INSUFFICIENT_STOCK @deprecated(reason: "")
    NOT_SALABLE @deprecated(reason: "")
    PRODUCT_NOT_FOUND @deprecated(reason: "")
    REORDER_NOT_AVAILABLE @deprecated(reason: "")
    UNDEFINED @deprecated(reason: "")
}

enum CompanyCreditOperationType {
    ALLOCATION @deprecated(reason: "")
    PURCHASE @deprecated(reason: "")
    REFUND @deprecated(reason: "")
    REIMBURSEMENT @deprecated(reason: "")
    REVERT @deprecated(reason: "")
    UPDATE @deprecated(reason: "")
}

enum CompanyCreditOperationUserType {
    ADMIN @deprecated(reason: "")
    CUSTOMER @deprecated(reason: "")
}

enum CompanyStatus {
    ACTIVE @deprecated(reason: "")
    BLOCKED @deprecated(reason: "")
    PENDING_APPROVAL @deprecated(reason: "")
    REJECTED @deprecated(reason: "")
}

"Defines the list of company user status values."
enum CompanyUserStatusEnum {
    "Only active users."
    ACTIVE @deprecated(reason: "")
    "Only inactive users."
    INACTIVE @deprecated(reason: "")
}

"The list of country codes."
enum CountryCodeEnum {
    "Andorra"
    AD @deprecated(reason: "")
    "United Arab Emirates"
    AE @deprecated(reason: "")
    "Afghanistan"
    AF @deprecated(reason: "")
    "Antigua & Barbuda"
    AG @deprecated(reason: "")
    "Anguilla"
    AI @deprecated(reason: "")
    "Albania"
    AL @deprecated(reason: "")
    "Armenia"
    AM @deprecated(reason: "")
    "Netherlands Antilles"
    AN @deprecated(reason: "")
    "Angola"
    AO @deprecated(reason: "")
    "Antarctica"
    AQ @deprecated(reason: "")
    "Argentina"
    AR @deprecated(reason: "")
    "American Samoa"
    AS @deprecated(reason: "")
    "Austria"
    AT @deprecated(reason: "")
    "Australia"
    AU @deprecated(reason: "")
    "Aruba"
    AW @deprecated(reason: "")
    "Åland Islands"
    AX @deprecated(reason: "")
    "Azerbaijan"
    AZ @deprecated(reason: "")
    "Bosnia & Herzegovina"
    BA @deprecated(reason: "")
    "Barbados"
    BB @deprecated(reason: "")
    "Bangladesh"
    BD @deprecated(reason: "")
    "Belgium"
    BE @deprecated(reason: "")
    "Burkina Faso"
    BF @deprecated(reason: "")
    "Bulgaria"
    BG @deprecated(reason: "")
    "Bahrain"
    BH @deprecated(reason: "")
    "Burundi"
    BI @deprecated(reason: "")
    "Benin"
    BJ @deprecated(reason: "")
    "St. Barthélemy"
    BL @deprecated(reason: "")
    "Bermuda"
    BM @deprecated(reason: "")
    "Brunei"
    BN @deprecated(reason: "")
    "Bolivia"
    BO @deprecated(reason: "")
    "Brazil"
    BR @deprecated(reason: "")
    "Bahamas"
    BS @deprecated(reason: "")
    "Bhutan"
    BT @deprecated(reason: "")
    "Bouvet Island"
    BV @deprecated(reason: "")
    "Botswana"
    BW @deprecated(reason: "")
    "Belarus"
    BY @deprecated(reason: "")
    "Belize"
    BZ @deprecated(reason: "")
    "Canada"
    CA @deprecated(reason: "")
    "Cocos (Keeling) Islands"
    CC @deprecated(reason: "")
    "Congo-Kinshasa"
    CD @deprecated(reason: "")
    "Central African Republic"
    CF @deprecated(reason: "")
    "Congo-Brazzaville"
    CG @deprecated(reason: "")
    "Switzerland"
    CH @deprecated(reason: "")
    "Côte d’Ivoire"
    CI @deprecated(reason: "")
    "Cook Islands"
    CK @deprecated(reason: "")
    "Chile"
    CL @deprecated(reason: "")
    "Cameroon"
    CM @deprecated(reason: "")
    "China"
    CN @deprecated(reason: "")
    "Colombia"
    CO @deprecated(reason: "")
    "Costa Rica"
    CR @deprecated(reason: "")
    "Cuba"
    CU @deprecated(reason: "")
    "Cape Verde"
    CV @deprecated(reason: "")
    "Christmas Island"
    CX @deprecated(reason: "")
    "Cyprus"
    CY @deprecated(reason: "")
    "Czech Republic"
    CZ @deprecated(reason: "")
    "Germany"
    DE @deprecated(reason: "")
    "Djibouti"
    DJ @deprecated(reason: "")
    "Denmark"
    DK @deprecated(reason: "")
    "Dominica"
    DM @deprecated(reason: "")
    "Dominican Republic"
    DO @deprecated(reason: "")
    "Algeria"
    DZ @deprecated(reason: "")
    "Ecuador"
    EC @deprecated(reason: "")
    "Estonia"
    EE @deprecated(reason: "")
    "Egypt"
    EG @deprecated(reason: "")
    "Western Sahara"
    EH @deprecated(reason: "")
    "Eritrea"
    ER @deprecated(reason: "")
    "Spain"
    ES @deprecated(reason: "")
    "Ethiopia"
    ET @deprecated(reason: "")
    "Finland"
    FI @deprecated(reason: "")
    "Fiji"
    FJ @deprecated(reason: "")
    "Falkland Islands"
    FK @deprecated(reason: "")
    "Micronesia"
    FM @deprecated(reason: "")
    "Faroe Islands"
    FO @deprecated(reason: "")
    "France"
    FR @deprecated(reason: "")
    "Gabon"
    GA @deprecated(reason: "")
    "United Kingdom"
    GB @deprecated(reason: "")
    "Grenada"
    GD @deprecated(reason: "")
    "Georgia"
    GE @deprecated(reason: "")
    "French Guiana"
    GF @deprecated(reason: "")
    "Guernsey"
    GG @deprecated(reason: "")
    "Ghana"
    GH @deprecated(reason: "")
    "Gibraltar"
    GI @deprecated(reason: "")
    "Greenland"
    GL @deprecated(reason: "")
    "Gambia"
    GM @deprecated(reason: "")
    "Guinea"
    GN @deprecated(reason: "")
    "Guadeloupe"
    GP @deprecated(reason: "")
    "Equatorial Guinea"
    GQ @deprecated(reason: "")
    "Greece"
    GR @deprecated(reason: "")
    "South Georgia & South Sandwich Islands"
    GS @deprecated(reason: "")
    "Guatemala"
    GT @deprecated(reason: "")
    "Guam"
    GU @deprecated(reason: "")
    "Guinea-Bissau"
    GW @deprecated(reason: "")
    "Guyana"
    GY @deprecated(reason: "")
    "Hong Kong SAR China"
    HK @deprecated(reason: "")
    "Heard &amp; McDonald Islands"
    HM @deprecated(reason: "")
    "Honduras"
    HN @deprecated(reason: "")
    "Croatia"
    HR @deprecated(reason: "")
    "Haiti"
    HT @deprecated(reason: "")
    "Hungary"
    HU @deprecated(reason: "")
    "Indonesia"
    ID @deprecated(reason: "")
    "Ireland"
    IE @deprecated(reason: "")
    "Israel"
    IL @deprecated(reason: "")
    "Isle of Man"
    IM @deprecated(reason: "")
    "India"
    IN @deprecated(reason: "")
    "British Indian Ocean Territory"
    IO @deprecated(reason: "")
    "Iraq"
    IQ @deprecated(reason: "")
    "Iran"
    IR @deprecated(reason: "")
    "Iceland"
    IS @deprecated(reason: "")
    "Italy"
    IT @deprecated(reason: "")
    "Jersey"
    JE @deprecated(reason: "")
    "Jamaica"
    JM @deprecated(reason: "")
    "Jordan"
    JO @deprecated(reason: "")
    "Japan"
    JP @deprecated(reason: "")
    "Kenya"
    KE @deprecated(reason: "")
    "Kyrgyzstan"
    KG @deprecated(reason: "")
    "Cambodia"
    KH @deprecated(reason: "")
    "Kiribati"
    KI @deprecated(reason: "")
    "Comoros"
    KM @deprecated(reason: "")
    "St. Kitts & Nevis"
    KN @deprecated(reason: "")
    "North Korea"
    KP @deprecated(reason: "")
    "South Korea"
    KR @deprecated(reason: "")
    "Kuwait"
    KW @deprecated(reason: "")
    "Cayman Islands"
    KY @deprecated(reason: "")
    "Kazakhstan"
    KZ @deprecated(reason: "")
    "Laos"
    LA @deprecated(reason: "")
    "Lebanon"
    LB @deprecated(reason: "")
    "St. Lucia"
    LC @deprecated(reason: "")
    "Liechtenstein"
    LI @deprecated(reason: "")
    "Sri Lanka"
    LK @deprecated(reason: "")
    "Liberia"
    LR @deprecated(reason: "")
    "Lesotho"
    LS @deprecated(reason: "")
    "Lithuania"
    LT @deprecated(reason: "")
    "Luxembourg"
    LU @deprecated(reason: "")
    "Latvia"
    LV @deprecated(reason: "")
    "Libya"
    LY @deprecated(reason: "")
    "Morocco"
    MA @deprecated(reason: "")
    "Monaco"
    MC @deprecated(reason: "")
    "Moldova"
    MD @deprecated(reason: "")
    "Montenegro"
    ME @deprecated(reason: "")
    "St. Martin"
    MF @deprecated(reason: "")
    "Madagascar"
    MG @deprecated(reason: "")
    "Marshall Islands"
    MH @deprecated(reason: "")
    "Macedonia"
    MK @deprecated(reason: "")
    "Mali"
    ML @deprecated(reason: "")
    "Myanmar (Burma)"
    MM @deprecated(reason: "")
    "Mongolia"
    MN @deprecated(reason: "")
    "Macau SAR China"
    MO @deprecated(reason: "")
    "Northern Mariana Islands"
    MP @deprecated(reason: "")
    "Martinique"
    MQ @deprecated(reason: "")
    "Mauritania"
    MR @deprecated(reason: "")
    "Montserrat"
    MS @deprecated(reason: "")
    "Malta"
    MT @deprecated(reason: "")
    "Mauritius"
    MU @deprecated(reason: "")
    "Maldives"
    MV @deprecated(reason: "")
    "Malawi"
    MW @deprecated(reason: "")
    "Mexico"
    MX @deprecated(reason: "")
    "Malaysia"
    MY @deprecated(reason: "")
    "Mozambique"
    MZ @deprecated(reason: "")
    "Namibia"
    NA @deprecated(reason: "")
    "New Caledonia"
    NC @deprecated(reason: "")
    "Niger"
    NE @deprecated(reason: "")
    "Norfolk Island"
    NF @deprecated(reason: "")
    "Nigeria"
    NG @deprecated(reason: "")
    "Nicaragua"
    NI @deprecated(reason: "")
    "Netherlands"
    NL @deprecated(reason: "")
    "Norway"
    NO @deprecated(reason: "")
    "Nepal"
    NP @deprecated(reason: "")
    "Nauru"
    NR @deprecated(reason: "")
    "Niue"
    NU @deprecated(reason: "")
    "New Zealand"
    NZ @deprecated(reason: "")
    "Oman"
    OM @deprecated(reason: "")
    "Panama"
    PA @deprecated(reason: "")
    "Peru"
    PE @deprecated(reason: "")
    "French Polynesia"
    PF @deprecated(reason: "")
    "Papua New Guinea"
    PG @deprecated(reason: "")
    "Philippines"
    PH @deprecated(reason: "")
    "Pakistan"
    PK @deprecated(reason: "")
    "Poland"
    PL @deprecated(reason: "")
    "St. Pierre & Miquelon"
    PM @deprecated(reason: "")
    "Pitcairn Islands"
    PN @deprecated(reason: "")
    "Palestinian Territories"
    PS @deprecated(reason: "")
    "Portugal"
    PT @deprecated(reason: "")
    "Palau"
    PW @deprecated(reason: "")
    "Paraguay"
    PY @deprecated(reason: "")
    "Qatar"
    QA @deprecated(reason: "")
    "Réunion"
    RE @deprecated(reason: "")
    "Romania"
    RO @deprecated(reason: "")
    "Serbia"
    RS @deprecated(reason: "")
    "Russia"
    RU @deprecated(reason: "")
    "Rwanda"
    RW @deprecated(reason: "")
    "Saudi Arabia"
    SA @deprecated(reason: "")
    "Solomon Islands"
    SB @deprecated(reason: "")
    "Seychelles"
    SC @deprecated(reason: "")
    "Sudan"
    SD @deprecated(reason: "")
    "Sweden"
    SE @deprecated(reason: "")
    "Singapore"
    SG @deprecated(reason: "")
    "St. Helena"
    SH @deprecated(reason: "")
    "Slovenia"
    SI @deprecated(reason: "")
    "Svalbard & Jan Mayen"
    SJ @deprecated(reason: "")
    "Slovakia"
    SK @deprecated(reason: "")
    "Sierra Leone"
    SL @deprecated(reason: "")
    "San Marino"
    SM @deprecated(reason: "")
    "Senegal"
    SN @deprecated(reason: "")
    "Somalia"
    SO @deprecated(reason: "")
    "Suriname"
    SR @deprecated(reason: "")
    "São Tomé & Príncipe"
    ST @deprecated(reason: "")
    "El Salvador"
    SV @deprecated(reason: "")
    "Syria"
    SY @deprecated(reason: "")
    "Swaziland"
    SZ @deprecated(reason: "")
    "Turks & Caicos Islands"
    TC @deprecated(reason: "")
    "Chad"
    TD @deprecated(reason: "")
    "French Southern Territories"
    TF @deprecated(reason: "")
    "Togo"
    TG @deprecated(reason: "")
    "Thailand"
    TH @deprecated(reason: "")
    "Tajikistan"
    TJ @deprecated(reason: "")
    "Tokelau"
    TK @deprecated(reason: "")
    "Timor-Leste"
    TL @deprecated(reason: "")
    "Turkmenistan"
    TM @deprecated(reason: "")
    "Tunisia"
    TN @deprecated(reason: "")
    "Tonga"
    TO @deprecated(reason: "")
    "Turkey"
    TR @deprecated(reason: "")
    "Trinidad & Tobago"
    TT @deprecated(reason: "")
    "Tuvalu"
    TV @deprecated(reason: "")
    "Taiwan"
    TW @deprecated(reason: "")
    "Tanzania"
    TZ @deprecated(reason: "")
    "Ukraine"
    UA @deprecated(reason: "")
    "Uganda"
    UG @deprecated(reason: "")
    "U.S. Outlying Islands"
    UM @deprecated(reason: "")
    "United States"
    US @deprecated(reason: "")
    "Uruguay"
    UY @deprecated(reason: "")
    "Uzbekistan"
    UZ @deprecated(reason: "")
    "Vatican City"
    VA @deprecated(reason: "")
    "St. Vincent & Grenadines"
    VC @deprecated(reason: "")
    "Venezuela"
    VE @deprecated(reason: "")
    "British Virgin Islands"
    VG @deprecated(reason: "")
    "U.S. Virgin Islands"
    VI @deprecated(reason: "")
    "Vietnam"
    VN @deprecated(reason: "")
    "Vanuatu"
    VU @deprecated(reason: "")
    "Wallis & Futuna"
    WF @deprecated(reason: "")
    "Samoa"
    WS @deprecated(reason: "")
    "Yemen"
    YE @deprecated(reason: "")
    "Mayotte"
    YT @deprecated(reason: "")
    "South Africa"
    ZA @deprecated(reason: "")
    "Zambia"
    ZM @deprecated(reason: "")
    "Zimbabwe"
    ZW @deprecated(reason: "")
}

"The list of available currency codes."
enum CurrencyEnum {
    AED @deprecated(reason: "")
    AFN @deprecated(reason: "")
    ALL @deprecated(reason: "")
    AMD @deprecated(reason: "")
    ANG @deprecated(reason: "")
    AOA @deprecated(reason: "")
    ARS @deprecated(reason: "")
    AUD @deprecated(reason: "")
    AWG @deprecated(reason: "")
    AZM @deprecated(reason: "")
    AZN @deprecated(reason: "")
    BAM @deprecated(reason: "")
    BBD @deprecated(reason: "")
    BDT @deprecated(reason: "")
    BGN @deprecated(reason: "")
    BHD @deprecated(reason: "")
    BIF @deprecated(reason: "")
    BMD @deprecated(reason: "")
    BND @deprecated(reason: "")
    BOB @deprecated(reason: "")
    BRL @deprecated(reason: "")
    BSD @deprecated(reason: "")
    BTN @deprecated(reason: "")
    BUK @deprecated(reason: "")
    BWP @deprecated(reason: "")
    BYN @deprecated(reason: "")
    BZD @deprecated(reason: "")
    CAD @deprecated(reason: "")
    CDF @deprecated(reason: "")
    CHE @deprecated(reason: "")
    CHF @deprecated(reason: "")
    CHW @deprecated(reason: "")
    CLP @deprecated(reason: "")
    CNY @deprecated(reason: "")
    COP @deprecated(reason: "")
    CRC @deprecated(reason: "")
    CUP @deprecated(reason: "")
    CVE @deprecated(reason: "")
    CZK @deprecated(reason: "")
    DJF @deprecated(reason: "")
    DKK @deprecated(reason: "")
    DOP @deprecated(reason: "")
    DZD @deprecated(reason: "")
    EEK @deprecated(reason: "")
    EGP @deprecated(reason: "")
    ERN @deprecated(reason: "")
    ETB @deprecated(reason: "")
    EUR @deprecated(reason: "")
    FJD @deprecated(reason: "")
    FKP @deprecated(reason: "")
    GBP @deprecated(reason: "")
    GEK @deprecated(reason: "")
    GEL @deprecated(reason: "")
    GHS @deprecated(reason: "")
    GIP @deprecated(reason: "")
    GMD @deprecated(reason: "")
    GNF @deprecated(reason: "")
    GQE @deprecated(reason: "")
    GTQ @deprecated(reason: "")
    GYD @deprecated(reason: "")
    HKD @deprecated(reason: "")
    HNL @deprecated(reason: "")
    HRK @deprecated(reason: "")
    HTG @deprecated(reason: "")
    HUF @deprecated(reason: "")
    IDR @deprecated(reason: "")
    ILS @deprecated(reason: "")
    INR @deprecated(reason: "")
    IQD @deprecated(reason: "")
    IRR @deprecated(reason: "")
    ISK @deprecated(reason: "")
    JMD @deprecated(reason: "")
    JOD @deprecated(reason: "")
    JPY @deprecated(reason: "")
    KES @deprecated(reason: "")
    KGS @deprecated(reason: "")
    KHR @deprecated(reason: "")
    KMF @deprecated(reason: "")
    KPW @deprecated(reason: "")
    KRW @deprecated(reason: "")
    KWD @deprecated(reason: "")
    KYD @deprecated(reason: "")
    KZT @deprecated(reason: "")
    LAK @deprecated(reason: "")
    LBP @deprecated(reason: "")
    LKR @deprecated(reason: "")
    LRD @deprecated(reason: "")
    LSL @deprecated(reason: "")
    LSM @deprecated(reason: "")
    LTL @deprecated(reason: "")
    LVL @deprecated(reason: "")
    LYD @deprecated(reason: "")
    MAD @deprecated(reason: "")
    MDL @deprecated(reason: "")
    MGA @deprecated(reason: "")
    MKD @deprecated(reason: "")
    MMK @deprecated(reason: "")
    MNT @deprecated(reason: "")
    MOP @deprecated(reason: "")
    MRO @deprecated(reason: "")
    MUR @deprecated(reason: "")
    MVR @deprecated(reason: "")
    MWK @deprecated(reason: "")
    MXN @deprecated(reason: "")
    MYR @deprecated(reason: "")
    MZN @deprecated(reason: "")
    NAD @deprecated(reason: "")
    NGN @deprecated(reason: "")
    NIC @deprecated(reason: "")
    NOK @deprecated(reason: "")
    NPR @deprecated(reason: "")
    NZD @deprecated(reason: "")
    OMR @deprecated(reason: "")
    PAB @deprecated(reason: "")
    PEN @deprecated(reason: "")
    PGK @deprecated(reason: "")
    PHP @deprecated(reason: "")
    PKR @deprecated(reason: "")
    PLN @deprecated(reason: "")
    PYG @deprecated(reason: "")
    QAR @deprecated(reason: "")
    RHD @deprecated(reason: "")
    ROL @deprecated(reason: "")
    RON @deprecated(reason: "")
    RSD @deprecated(reason: "")
    RUB @deprecated(reason: "")
    RWF @deprecated(reason: "")
    SAR @deprecated(reason: "")
    SBD @deprecated(reason: "")
    SCR @deprecated(reason: "")
    SDG @deprecated(reason: "")
    SEK @deprecated(reason: "")
    SGD @deprecated(reason: "")
    SHP @deprecated(reason: "")
    SKK @deprecated(reason: "")
    SLL @deprecated(reason: "")
    SOS @deprecated(reason: "")
    SRD @deprecated(reason: "")
    STD @deprecated(reason: "")
    SVC @deprecated(reason: "")
    SYP @deprecated(reason: "")
    SZL @deprecated(reason: "")
    THB @deprecated(reason: "")
    TJS @deprecated(reason: "")
    TMM @deprecated(reason: "")
    TND @deprecated(reason: "")
    TOP @deprecated(reason: "")
    TRL @deprecated(reason: "")
    TRY @deprecated(reason: "")
    TTD @deprecated(reason: "")
    TWD @deprecated(reason: "")
    TZS @deprecated(reason: "")
    UAH @deprecated(reason: "")
    UGX @deprecated(reason: "")
    USD @deprecated(reason: "")
    UYU @deprecated(reason: "")
    UZS @deprecated(reason: "")
    VEB @deprecated(reason: "")
    VEF @deprecated(reason: "")
    VND @deprecated(reason: "")
    VUV @deprecated(reason: "")
    WST @deprecated(reason: "")
    XCD @deprecated(reason: "")
    XOF @deprecated(reason: "")
    XPF @deprecated(reason: "")
    YER @deprecated(reason: "")
    YTL @deprecated(reason: "")
    ZAR @deprecated(reason: "")
    ZMK @deprecated(reason: "")
    ZWD @deprecated(reason: "")
}

"Defines the customizable date type."
enum CustomizableDateTypeEnum {
    DATE @deprecated(reason: "")
    DATE_TIME @deprecated(reason: "")
    TIME @deprecated(reason: "")
}

enum DigitalPaymentType {
    Account
    CreditCard
    MasterPass
    VisaCheckout
}

"A list of supported areas"
enum DisplayAreas {
    ALL_PAGES @deprecated(reason: "")
    ALL_PRODUCT_PAGE @deprecated(reason: "")
    ANCHOR_CATEGORY @deprecated(reason: "")
    BAG_SUMMARY_PAGE @deprecated(reason: "")
    CHECKOUT_PAGE @deprecated(reason: "")
    CMS_PAGE @deprecated(reason: "")
    CONFIGURABLE_PRODUCT_PAGE @deprecated(reason: "")
    GIFTCARD_PRODUCT_PAGE @deprecated(reason: "")
    HOME_PAGE @deprecated(reason: "")
    NON_ANCHOR_CATEGORY @deprecated(reason: "")
    PDP_PAGE @deprecated(reason: "")
    PLP_PAGE @deprecated(reason: "")
    PROFILE_PAGE @deprecated(reason: "")
    SEARCH_RESULT_PAGE @deprecated(reason: "")
    SIMPLE_PRODUCT_PAGE @deprecated(reason: "")
    VIRTUAL_PRODUCT_PAGE @deprecated(reason: "")
}

enum DownloadableFileTypeEnum {
    FILE @deprecated(reason: "`sample_url` serves to get the downloadable sample")
    URL @deprecated(reason: "`sample_url` serves to get the downloadable sample")
}

"Indicates the locations the dynamic block can be placed. If this field is not specified, the query returns all locations."
enum DynamicBlockLocationEnum {
    CONTENT @deprecated(reason: "")
    FOOTER @deprecated(reason: "")
    HEADER @deprecated(reason: "")
    LEFT @deprecated(reason: "")
    RIGHT @deprecated(reason: "")
}

"Indicates the selected Dynamic Blocks Rotator inline widget."
enum DynamicBlockTypeEnum {
    CART_PRICE_RULE_RELATED @deprecated(reason: "")
    CATALOG_PRICE_RULE_RELATED @deprecated(reason: "")
    SPECIFIED @deprecated(reason: "")
}

enum EmailDocketSortField {
    DivisionId
    DocketDate
    StoreLocationId
}

"Lists display settings for the Fixed Product Tax."
enum FixedProductTaxDisplaySettings {
    "The displayed price does not include the FPT amount. The values of `ProductPrice.fixed_product_taxes` and the price including the FPT are displayed separately. This value corresponds to 'Excluding FPT, Including FPT description and final price.'"
    EXCLUDE_FPT_AND_INCLUDE_WITH_DETAILS @deprecated(reason: "")
    "The displayed price does not include the FPT amount. The values from `ProductPrice.fixed_product_taxes` are not displayed. This value corresponds to 'Excluding FPT'."
    EXCLUDE_FPT_WITHOUT_DETAILS @deprecated(reason: "")
    "The FPT feature is not enabled. You can omit `ProductPrice.fixed_product_taxes` from your query."
    FPT_DISABLED @deprecated(reason: "")
    "The displayed price includes the FPT amount without displaying the `ProductPrice.fixed_product_taxes` values. This value corresponds to 'Including FPT only'."
    INCLUDE_FPT_WITHOUT_DETAILS @deprecated(reason: "")
    "The displayed price includes the FPT amount while displaying the values of `ProductPrice.fixed_product_taxes` separately. This value corresponds to 'Including FPT and FPT description'."
    INCLUDE_FPT_WITH_DETAILS @deprecated(reason: "")
}

"Specifies the gift card type."
enum GiftCardTypeEnum {
    COMBINED @deprecated(reason: "")
    PHYSICAL @deprecated(reason: "")
    VIRTUAL @deprecated(reason: "")
}

"Defines the group type of a gift registry dynamic attribute."
enum GiftRegistryDynamicAttributeGroup {
    DETAILED_INFORMATION @deprecated(reason: "")
    EVENT_INFORMATION @deprecated(reason: "")
    GENERAL_INFORMATION @deprecated(reason: "")
    PRIVACY_SETTINGS @deprecated(reason: "")
    REGISTRANT @deprecated(reason: "")
    SHIPPING_ADDRESS @deprecated(reason: "")
}

"Defines the error type."
enum GiftRegistryItemsUserErrorType {
    "Used for exceptions like EntityNotFound."
    NOT_FOUND @deprecated(reason: "")
    "Used for handling out of stock products."
    OUT_OF_STOCK @deprecated(reason: "")
    "Used for other exceptions, such as database connection failures."
    UNDEFINED @deprecated(reason: "")
}

"Defines the privacy setting of the gift registry."
enum GiftRegistryPrivacySettings {
    PRIVATE @deprecated(reason: "")
    PUBLIC @deprecated(reason: "")
}

"Defines the status of the gift registry."
enum GiftRegistryStatus {
    ACTIVE @deprecated(reason: "")
    INACTIVE @deprecated(reason: "")
}

enum MediaType {
    IMAGE
    SPIN
    VIDEO
}

"Service type must be specified, can either be set as AIRTIME or DATA"
enum MobileProviderServiceType {
    AIRTIME @deprecated(reason: "")
    DATA @deprecated(reason: "")
}

enum NegotiableQuoteCommentCreatorType {
    BUYER @deprecated(reason: "")
    SELLER @deprecated(reason: "")
}

enum NegotiableQuoteHistoryEntryChangeType {
    CLOSED @deprecated(reason: "")
    CREATED @deprecated(reason: "")
    UPDATED @deprecated(reason: "")
    UPDATED_BY_SYSTEM @deprecated(reason: "")
}

enum NegotiableQuoteSortableField {
    "Sorts negotiable quotes by the dates they were created."
    CREATED_AT @deprecated(reason: "")
    "Sorts negotiable quotes by name."
    QUOTE_NAME @deprecated(reason: "")
    "Sorts negotiable quotes by the dates they were last modified."
    UPDATED_AT @deprecated(reason: "")
}

enum NegotiableQuoteStatus {
    CLOSED @deprecated(reason: "")
    DECLINED @deprecated(reason: "")
    EXPIRED @deprecated(reason: "")
    OPEN @deprecated(reason: "")
    ORDERED @deprecated(reason: "")
    PENDING @deprecated(reason: "")
    SUBMITTED @deprecated(reason: "")
    UPDATED @deprecated(reason: "")
}

"Specifies the customer journey of the OTP"
enum OTPContext {
    AccountLinking
    AirtimeData
    Checkout
}

"Determines how the OTP will be sent (SMS or Email)"
enum OTPType {
    "OTP will be sent by email"
    Email
    "OTP will be sent by SMS"
    SMS
}

"Indicates the mode for payment. Applies to the Payflow Link and Payments Advanced payment methods."
enum PayflowLinkMode {
    LIVE @deprecated(reason: "")
    TEST @deprecated(reason: "")
}

enum PaymentMethodType {
    CARD @deprecated(reason: "")
    EFT @deprecated(reason: "")
    MRPMONEY @deprecated(reason: "")
    OTHER @deprecated(reason: "")
}

"The list of available payment token types."
enum PaymentTokenTypeEnum {
    "phpcs:ignore Magento2.GraphQL.ValidArgumentName"
    account @deprecated(reason: "")
    "phpcs:ignore Magento2.GraphQL.ValidArgumentName"
    card @deprecated(reason: "")
}

"`PriceAdjustment.code` is deprecated."
enum PriceAdjustmentCodesEnum {
    TAX @deprecated(reason: "`PriceAdjustmentCodesEnum` is deprecated. Tax is included or excluded in the price. Tax is not shown separately in Catalog.")
    WEEE @deprecated(reason: "WEEE code is deprecated. Use `fixed_product_taxes.label` instead.")
    WEEE_TAX @deprecated(reason: "Use `fixed_product_taxes` instead.  Tax is included or excluded in price. The tax is not shown separtely in Catalog.")
}

"`PriceAdjustmentDescriptionEnum` is deprecated. States whether a price adjustment is included or excluded."
enum PriceAdjustmentDescriptionEnum {
    EXCLUDED @deprecated(reason: "")
    INCLUDED @deprecated(reason: "")
}

"Defines the price type."
enum PriceTypeEnum {
    DYNAMIC @deprecated(reason: "")
    FIXED @deprecated(reason: "")
    PERCENT @deprecated(reason: "")
}

"Defines whether a bundle product's price is displayed as the lowest possible value or as a range."
enum PriceViewEnum {
    AS_LOW_AS @deprecated(reason: "")
    PRICE_RANGE @deprecated(reason: "")
}

"This enumeration states whether a product stock status is in stock or out of stock"
enum ProductStockStatus {
    IN_STOCK @deprecated(reason: "")
    OUT_OF_STOCK @deprecated(reason: "")
}

"Specifies the type of cellular request"
enum PurchaseAirtimeRequestType {
    "Airtime purchase"
    AIRTIME
    "Data purchase"
    DATA
}

"Specifies the type of request - a callback or a purchase request"
enum PurchaseInsuranceRequestType {
    "Callback request"
    CALLBACK
    "Purchase request"
    PURCHASE
}

enum ReturnItemStatus {
    APPROVED @deprecated(reason: "")
    AUTHORIZED @deprecated(reason: "")
    DENIED @deprecated(reason: "")
    PENDING @deprecated(reason: "")
    RECEIVED @deprecated(reason: "")
    REJECTED @deprecated(reason: "")
}

enum ReturnShippingTrackingStatusType {
    ERROR @deprecated(reason: "")
    INFORMATION @deprecated(reason: "")
}

enum ReturnStatus {
    APPROVED @deprecated(reason: "")
    AUTHORIZED @deprecated(reason: "")
    CLOSED @deprecated(reason: "")
    DENIED @deprecated(reason: "")
    PARTIALLY_APPROVED @deprecated(reason: "")
    PARTIALLY_AUTHORIZED @deprecated(reason: "")
    PARTIALLY_RECEIVED @deprecated(reason: "")
    PARTIALLY_REJECTED @deprecated(reason: "")
    PENDING @deprecated(reason: "")
    PROCESSED_AND_CLOSED @deprecated(reason: "")
    RECEIVED @deprecated(reason: "")
    REJECTED @deprecated(reason: "")
}

enum RewardPointsSubscriptionStatusesEnum {
    NOT_SUBSCRIBED @deprecated(reason: "")
    SUBSCRIBED @deprecated(reason: "")
}

enum SLCompanyStatus {
    ACTIVE
    BLOCKED
    PENDING_APPROVAL
    REJECTED
}

enum SLCountryCodeEnum {
    AD
    AE
    AF
    AG
    AI
    AL
    AM
    AN
    AO
    AR
    AS
    AT
    AU
    AW
    AX
    AZ
    BA
    BB
    BD
    BE
    BF
    BG
    BH
    BI
    BJ
    BL
    BM
    BN
    BO
    BR
    BS
    BT
    BW
    BY
    BZ
    CA
    CC
    CD
    CF
    CG
    CH
    CI
    CK
    CL
    CM
    CN
    CO
    CR
    CU
    CV
    CX
    CY
    CZ
    DE
    DJ
    DK
    DM
    DO
    DZ
    EC
    EE
    EG
    ER
    ES
    ET
    FI
    FJ
    FK
    FM
    FO
    FR
    GA
    GB
    GD
    GE
    GF
    GG
    GH
    GI
    GL
    GM
    GN
    GP
    GQ
    GR
    GS
    GT
    GU
    GW
    GY
    HK
    HN
    HR
    HT
    HU
    ID
    IE
    IL
    IM
    IN
    IO
    IQ
    IR
    IS
    IT
    JE
    JM
    JO
    JP
    KE
    KG
    KH
    KI
    KM
    KN
    KP
    KR
    KW
    KY
    KZ
    LA
    LB
    LC
    LI
    LK
    LR
    LS
    LT
    LU
    LV
    LY
    MA
    MC
    MD
    ME
    MF
    MG
    MH
    MK
    ML
    MM
    MN
    MO
    MP
    MQ
    MR
    MS
    MT
    MU
    MV
    MW
    MX
    MY
    MZ
    NA
    NC
    NE
    NF
    NG
    NI
    NL
    NO
    NP
    NR
    NU
    NZ
    OM
    PA
    PE
    PF
    PG
    PH
    PK
    PL
    PM
    PN
    PR
    PS
    PT
    PW
    PY
    QA
    RE
    RO
    RS
    RU
    RW
    SA
    SB
    SC
    SD
    SE
    SG
    SH
    SI
    SJ
    SK
    SL
    SM
    SN
    SO
    SR
    ST
    SV
    SY
    SZ
    TC
    TD
    TG
    TH
    TJ
    TK
    TL
    TM
    TN
    TO
    TR
    TT
    TV
    TW
    TZ
    UA
    UG
    US
    UY
    UZ
    VA
    VC
    VE
    VG
    VI
    VN
    VU
    WF
    WS
    YE
    YT
    ZA
    ZM
    ZW
}

enum SLSortDirection {
    ASC
    DESC
}

"Defines whether bundle items must be shipped together."
enum ShipBundleItemsEnum {
    SEPARATELY @deprecated(reason: "")
    TOGETHER @deprecated(reason: "")
}

"Indicates whether to return results in ascending or descending order."
enum SortEnum {
    ASC @deprecated(reason: "")
    DESC @deprecated(reason: "")
}

enum SubjectEnum {
    FEEDBACK @deprecated(reason: "")
    INSURANCE_ENQUIRY @deprecated(reason: "")
    MOBILE_ENQUIRY @deprecated(reason: "")
    MRP_MONEY @deprecated(reason: "")
    ORDER_CANCELLATION_ENQUIRY @deprecated(reason: "")
    ORDER_ENQUIRY @deprecated(reason: "")
    RETURN_ENQUIRY @deprecated(reason: "")
    STORE_ENQUIRY @deprecated(reason: "")
}

enum SubscriptionStatusesEnum {
    NOT_ACTIVE @deprecated(reason: "")
    NO_SUBSCRIPTION @deprecated(reason: "")
    SUBSCRIBED @deprecated(reason: "")
    UNCONFIRMED @deprecated(reason: "")
    UNSUBSCRIBED @deprecated(reason: "")
}

"This enumeration defines the entity type."
enum UrlRewriteEntityTypeEnum {
    CATEGORY @deprecated(reason: "")
    CMS_PAGE @deprecated(reason: "")
    PRODUCT @deprecated(reason: "")
}

"Defines whether the attribute is filterable in layered navigation."
enum UseInLayeredNavigationOptions {
    FILTERABLE_NO_RESULT @deprecated(reason: "")
    FILTERABLE_WITH_RESULTS @deprecated(reason: "")
    NO @deprecated(reason: "")
}

"A list of possible error types."
enum WishListUserInputErrorType {
    PRODUCT_NOT_FOUND @deprecated(reason: "")
    UNDEFINED @deprecated(reason: "")
}

"A list of possible error types."
enum WishlistCartUserInputErrorType {
    INSUFFICIENT_STOCK @deprecated(reason: "")
    NOT_SALABLE @deprecated(reason: "")
    PRODUCT_NOT_FOUND @deprecated(reason: "")
    UNDEFINED @deprecated(reason: "")
}

"Defines the wish list visibility types."
enum WishlistVisibilityEnum {
    PRIVATE @deprecated(reason: "")
    PUBLIC @deprecated(reason: "")
}

enum directionEnum {
    "Ascending"
    ASC @deprecated(reason: "")
    "Descending"
    DESC @deprecated(reason: "")
}

enum statusEnum {
    AWAITING_PAYMENT @deprecated(reason: "")
    CANCELED @deprecated(reason: "")
    DELIVERED @deprecated(reason: "")
    FAILED_DELIVERY @deprecated(reason: "")
    HOLDED @deprecated(reason: "")
    PARTIALLY_DELIVERED @deprecated(reason: "")
    PARTIALLY_RETURNED @deprecated(reason: "")
    PROCESSING @deprecated(reason: "")
    READY_FOR_COLLECTION @deprecated(reason: "")
    READY_FOR_STORE_PICK_UP @deprecated(reason: "")
    READY_TO_SHIP @deprecated(reason: "")
    RETURNED @deprecated(reason: "")
    SHIPPED @deprecated(reason: "")
    SUBMITTED @deprecated(reason: "")
}

enum storeEnum {
    "In store orders"
    INSTORE @deprecated(reason: "")
    "Online orders"
    ONLINE @deprecated(reason: "")
}

scalar Decimal

scalar Long

"Defines the bundle products to add to the cart."
input AddBundleProductsToCartInput {
    "The ID of the cart."
    cart_id: String!
    "An array of bundle products to add."
    cart_items: [BundleProductCartItemInput]!
}

"Defines the configurable products to add to the cart."
input AddConfigurableProductsToCartInput {
    "The ID of the cart."
    cart_id: String!
    "An array of configurable products to add."
    cart_items: [ConfigurableProductCartItemInput]!
}

input AddDownloadableProductsToCartInput {
    "The ID of the cart."
    cart_id: String!
    "An array of downloadable products to add."
    cart_items: [DownloadableProductCartItemInput]!
}

"Defines an item to add to the gift registry."
input AddGiftRegistryItemInput {
    "An array of options that the customer entered"
    entered_options: [EnteredOptionInput]
    "A brief note about the item."
    note: String
    "For complex product types, the SKU of the parent product."
    parent_sku: String
    preferred_delivery_method_code: String
    "The quantity of the product to add."
    quantity: Float!
    "An array of strings corresponding to options the customer selected"
    selected_options: [ID]
    "The SKU of the product to add to the gift registry."
    sku: String!
}

"Defines a new registrant."
input AddGiftRegistryRegistrantInput {
    "Additional attributes specified as a code-value pair."
    dynamic_attributes: [GiftRegistryDynamicAttributeInput]
    "The email address of the registrant."
    email: String!
    "The first name of the registrant."
    firstname: String!
    "The last name of the registrant."
    lastname: String!
}

input AddMrpMoneyToCartInput {
    cart_id: String!
    cart_items: [MrpMoneytCartItemInput]!
}

"Contains products to add to an existing compare list."
input AddProductsToCompareListInput {
    "An array of product IDs to add to the compare list."
    products: [ID]!
    "The unique identifier of the compare list to modify."
    uid: ID!
}

"Defines a return comment."
input AddReturnCommentInput {
    "The text added to the return request."
    comment_text: String!
    "The unique ID for a `Return` object."
    return_uid: ID!
}

"Defines tracking information to be added to the return."
input AddReturnTrackingInput {
    "The unique ID for a `ReturnShippingCarrier` object."
    carrier_uid: ID!
    "The unique ID for a `Returns` object."
    return_uid: ID!
    "The shipping tracking number for this return request."
    tracking_number: String!
}

"Defines the simple and group products to add to the cart."
input AddSimpleProductsToCartInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "An array of simple and group items to add."
    cart_items: [SimpleProductCartItemInput]!
}

"Defines the virtual products to add to the cart."
input AddVirtualProductsToCartInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "An array of virtual products to add."
    cart_items: [VirtualProductCartItemInput]!
}

"Filter category aggregations in layered navigation."
input AggregationsCategoryFilterInput {
    "Indicates whether to include only direct subcategories or all children categories at all levels."
    includeDirectChildrenOnly: Boolean
}

"An input object that specifies the filters used in product aggregations."
input AggregationsFilterInput {
    "Filter category aggregations in layered navigation."
    category: AggregationsCategoryFilterInput
}

"Access token needed for Apple signin validation"
input AppleTokenInput {
    access_token: String!
}

"Specifies the coupon code to apply to the cart."
input ApplyCouponToCartInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "A valid coupon code."
    coupon_code: String!
}

"Defines the input required to run the applyGiftCardToCart mutation"
input ApplyGiftCardToCartInput {
    "The unique ID that identifies the customer's cart."
    cart_id: String!
    "The gift card code to be applied to the cart."
    gift_card_code: String!
    "The gift card reference number"
    gift_card_reference_nr: String!
}

"Defines the input required to run the `applyStoreCreditToCart` mutation."
input ApplyStoreCreditToCartInput {
    "The unique ID that identifies the customer's cart."
    cart_id: String!
}

"AreaInput defines the parameters which will be used for filter by specified location."
input AreaInput {
    "The radius for the search in KM."
    radius: Int!
    "The country code where search must be performed. Required parameter together with region, city or postcode."
    search_term: String!
}

"Defines the attribute characteristics to search for the `attribute_code` and `entity_type` to search."
input AttributeInput {
    "The unique identifier for an attribute code. This value should be in lowercase letters without spaces."
    attribute_code: String
    "The type of entity that defines the attribute."
    entity_type: String
}

input AuthenticateProcessCreditAccountPaymentRequest {
    isAuthorization: Boolean!
    orderId: String
    orderTotal: Decimal!
}

input AuthenticateProcessGiftCardPaymentRequest {
    giftCardNumber: String!
    isAuthorization: Boolean!
    orderTotal: Decimal!
    referenceNumber: String!
}

"Defines the billing address."
input BillingAddressInput {
    "Defines a billing address."
    address: CartAddressInput
    "An ID from the customer's address book that uniquely identifies the address to be used for billing."
    customer_address_id: Int
    "The RSA ID Number used to RICA a SIM card"
    rica_rsa_id_number: String
    "Indicates whether to set the billing address to be the same as the existing shipping address on the cart."
    same_as_shipping: Boolean
    "Indicates whether to set the shipping address to be the same as this billing address."
    use_for_shipping: Boolean
}

input BraintreeCcVaultInput {
    device_data: String
    public_hash: String!
}

input BraintreeInput {
    "Contains a fingerprint provided by Braintree JS SDK and should be sent with sale transaction details to the Braintree payment gateway. Should be specified only in a case if Kount (advanced fraud protection) is enabled for Braintree payment integration."
    device_data: String
    "States whether an entered by a customer credit/debit card should be tokenized for later usage. Required only if Vault is enabled for Braintree payment integration."
    is_active_payment_token_enabler: Boolean!
    "The one-time payment token generated by Braintree payment gateway based on card details. Required field to make sale transaction."
    payment_method_nonce: String!
}

"Defines the input for a bundle option."
input BundleOptionInput {
    "The ID of the option."
    id: Int!
    "The number of the selected item to add to the cart."
    quantity: Float!
    "An array with the chosen value of the option."
    value: [String]!
}

"Defines a single bundle product."
input BundleProductCartItemInput {
    "A mandatory array of options for the bundle product, including each chosen option and specified quantity."
    bundle_options: [BundleOptionInput]!
    "The ID and value of the option."
    customizable_options: [CustomizableOptionInput]
    "The quantity and SKU of the bundle product."
    data: CartItemInput!
}

"Defines the billing or shipping address to be applied to the cart."
input CartAddressInput {
    "The city specified for the billing or shipping address."
    city: String!
    "The company specified for the billing or shipping address."
    company: String
    "The country code and label for the billing or shipping address."
    country_code: String!
    "The first name of the customer or guest."
    firstname: String!
    "The last name of the customer or guest."
    lastname: String!
    "The ZIP or postal code of the billing or shipping address."
    postcode: String
    "A string that defines the state or province of the billing or shipping address."
    region: String
    "An integer that defines the state or province of the billing or shipping address."
    region_id: Int
    "Determines whether to save the address in the customer's address book. The default value is true."
    save_in_address_book: Boolean
    "An array containing the street for the billing or shipping address."
    street: [String]!
    suburb: String
    "The telephone number for the billing or shipping address."
    telephone: String
}

"Defines an item to be added to the cart."
input CartItemInput {
    "An array of entered options for the base product, such as personalization text."
    entered_options: [EnteredOptionInput]
    "Defines an item to be added to the cart."
    giftregistry_item_uid: String
    "For a child product, the SKU of its parent product."
    parent_sku: String
    "The amount or number of an item to add."
    quantity: Float!
    "The selected options for the base product, such as color or size, using the unique ID for an object such as `CustomizableRadioOption`, `CustomizableDropDownOption`, or `ConfigurableProductOptionsValues`."
    selected_options: [ID]
    "The SKU of the product."
    sku: String!
}

"A single item to be updated."
input CartItemUpdateInput {
    "Deprecated. Use `cart_item_uid` instead."
    cart_item_id: Int
    "The unique ID for a `CartItemInterface` object."
    cart_item_uid: ID
    "An array that defines customizable options for the product."
    customizable_options: [CustomizableOptionInput]
    "Gift message details for the cart item"
    gift_message: GiftMessageInput
    "The unique ID for a `GiftWrapping` object to be used for the cart item."
    gift_wrapping_id: ID
    "The new quantity of the item."
    quantity: Float
}

"Defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for."
input CategoryFilterInput {
    "Filter by the unique category ID for a `CategoryInterface` object."
    category_uid: FilterEqualTypeInput
    "Deprecated: use 'category_uid' to filter uniquely identifiers of categories."
    ids: FilterEqualTypeInput
    "Filter by the display name of the category."
    name: FilterMatchTypeInput
    "Filter by the unique parent category ID for a `CategoryInterface` object."
    parent_category_uid: FilterEqualTypeInput
    "Filter by the unique parent category ID for a `CategoryInterface` object."
    parent_id: FilterEqualTypeInput
    "Filter by the part of the URL that identifies the category."
    url_key: FilterEqualTypeInput
    "Filter by the URL path for the category."
    url_path: FilterEqualTypeInput
}

input CheckoutCalculateShippingAmountRequest {
    orderId: String
    shippingAddress: CheckoutCalculateShippingAmountShippingAddress!
    shippingMethod: String!
    skus: [CheckoutCalculateShippingAmountSku]!
}

"Address where these items are to be delivered"
input CheckoutCalculateShippingAmountShippingAddress {
    addressLine1: String!
    addressLine2: String!
    addressLine3: String!
    city: String!
    country: String!
    postalCode: String!
    state: String!
}

"Product to be included in the shipping cost calculation"
input CheckoutCalculateShippingAmountSku {
    price: Float!
    quantity: Int!
    shippingGroup: String
    skuId: String!
}

"Defines the negotiable quotes to mark as closed."
input CloseNegotiableQuotesInput {
    "A list of unique IDs from `NegotiableQuote` objects."
    quote_uids: [ID]!
}

"Defines the input schema for creating a company administrator."
input CompanyAdminInput {
    "The email address of the company administrator."
    email: String!
    "The company administrator's first name."
    firstname: String!
    "The company administrator's gender (Male - 1, Female - 2, Not Specified - 3)."
    gender: Int
    "The job title of the company administrator."
    job_title: String
    "The company administrator's last name."
    lastname: String!
}

"Defines the input schema for creating a new company."
input CompanyCreateInput {
    business_type: Int!
    card_holder_address: CompanyLegalAddressCreateInput
    "Defines the company administrator."
    company_admin: CompanyAdminInput!
    company_card_holder: CustomerInput
    "The email address of the company contact."
    company_email: String!
    "The name of the company to create."
    company_name: String!
    "Defines legal address data of the company."
    legal_address: CompanyLegalAddressCreateInput!
    "The full legal name of the company."
    legal_name: String
    preferred_collection_store: String
    preferred_shipping_method: String!
    "The resale number that is assigned to the company for tax reporting purposes."
    reseller_id: String
    "The value-added tax number that is assigned to the company by some jurisdictions for tax reporting purposes."
    vat_tax_id: String
    website: String!
}

"Defines a filter for narrowing the results of a credit history search."
input CompanyCreditHistoryFilterInput {
    "The purchase order number associated with the company credit operation."
    custom_reference_number: String
    "The type of the company credit operation."
    operation_type: CompanyCreditOperationType
    "The name of the person submitting the company credit operation."
    updated_by: String
}

"Defines the input schema for defining a company's legal address."
input CompanyLegalAddressCreateInput {
    "The city where the company is registered to conduct business."
    city: String!
    "The company's country ID. Use the `countries` query to get this value."
    country_id: CountryCodeEnum!
    "The postal code of the company."
    postcode: String!
    "An object containing the region name and/or region ID where the company is registered to conduct business."
    region: CustomerAddressRegionInput!
    "An array of strings that define the street address where the company is registered to conduct business."
    street: [String]!
    "The primary phone number of the company."
    telephone: String!
}

"Defines the input schema for updating a company's legal address."
input CompanyLegalAddressUpdateInput {
    "The city where the company is registered to conduct business."
    city: String
    "The unique ID for a `Country` object."
    country_id: CountryCodeEnum
    "The postal code of the company."
    postcode: String
    "An object containing the region name and/or region ID where the company is registered to conduct business."
    region: CustomerAddressRegionInput
    "An array of strings that define the street address where the company is registered to conduct business."
    street: [String]
    "The primary phone number of the company."
    telephone: String
}

"Defines the input schema for creating a company role."
input CompanyRoleCreateInput {
    "The name of the role to create."
    name: String!
    "A list of resources the role can access."
    permissions: [String]!
}

"Defines the input schema for updating a company role."
input CompanyRoleUpdateInput {
    "The unique ID for a `CompanyRole` object."
    id: ID!
    "The name of the role to update."
    name: String
    "A list of resources the role can access."
    permissions: [String]
}

"Defines the input schema for updating the company structure."
input CompanyStructureUpdateInput {
    "The ID of a company that will be the new parent."
    parent_tree_id: ID!
    "The ID of the company team that is being moved to another parent."
    tree_id: ID!
}

"Defines the input schema for creating a company team."
input CompanyTeamCreateInput {
    "An optional description of the team."
    description: String
    "The display name of the team."
    name: String!
    "The ID of a node within a company's structure. This ID will be the parent of the created team."
    target_id: ID
}

"Defines the input schema for updating a company team."
input CompanyTeamUpdateInput {
    "An optional description of the team."
    description: String
    "The unique ID of the `CompanyTeam` object to update."
    id: ID!
    "The display name of the team."
    name: String
}

"Defines the input schema for updating a company."
input CompanyUpdateInput {
    business_type: Int
    "The email address of the company contact."
    company_email: String
    "The name of the company to update."
    company_name: String
    "The legal address data of the company."
    legal_address: CompanyLegalAddressUpdateInput
    "The full legal name of the company."
    legal_name: String
    "The resale number that is assigned to the company for tax reporting purposes."
    reseller_id: String
    "The value-added tax number that is assigned to the company by some jurisdictions for tax reporting purposes."
    vat_tax_id: String
    website: String
}

"Defines the input schema for creating a company user."
input CompanyUserCreateInput {
    "The company user's email address"
    email: String!
    "The company user's first name."
    firstname: String!
    "The company user's job title or function."
    job_title: String!
    "The company user's last name."
    lastname: String!
    "The unique ID for a `CompanyRole` object."
    role_id: ID!
    "Indicates whether the company user is ACTIVE or INACTIVE."
    status: CompanyUserStatusEnum!
    "The ID of a node within a company's structure. This ID will be the parent of the created company user."
    target_id: ID
    "The company user's phone number."
    telephone: String!
}

"Defines the input schema for updating a company user."
input CompanyUserUpdateInput {
    "The company user's email address."
    email: String
    "The company user's first name."
    firstname: String
    "The unique ID of a `Customer` object."
    id: ID!
    "The company user's job title or function."
    job_title: String
    "The company user's last name."
    lastname: String
    "The unique ID for a `CompanyRole` object."
    role_id: ID
    "Indicates whether the company user is ACTIVE or INACTIVE."
    status: CompanyUserStatusEnum
    "The company user's phone number."
    telephone: String
}

"Defines the filter for returning a list of company users."
input CompanyUsersFilterInput {
    "The activity status to filter on."
    status: CompanyUserStatusEnum
}

input ConfigurableProductCartItemInput {
    "The ID and value of the option."
    customizable_options: [CustomizableOptionInput]
    "The quantity and SKU of the configurable product."
    data: CartItemInput!
    "The SKU of the parent configurable product."
    parent_sku: String
    "Deprecated. Use `CartItemInput.sku` instead."
    variant_sku: String
}

input ContactUsInput {
    "The shopper's comment to the merchant."
    comment: String!
    "The email address of the shopper."
    email: String!
    "The full name of the shopper."
    name: String!
    "The shopper's subject to the merchant."
    subject: SubjectEnum!
    "The shopper's order number or text."
    subject_text: String
    "The shopper's telephone number."
    telephone: String
}

"An input object that defines the items in a requisition list to be copied."
input CopyItemsBetweenRequisitionListsInput {
    "An array of IDs representing products copied from one requisition list to another."
    requisitionListItemUids: [ID]!
}

"Contains an array of product IDs to use for creating a compare list."
input CreateCompareListInput {
    "An array of product IDs to add to the compare list."
    products: [ID]
}

"Defines a new gift registry."
input CreateGiftRegistryInput {
    daily_update_opt_in: Boolean
    "Additional attributes specified as a code-value pair."
    dynamic_attributes: [GiftRegistryDynamicAttributeInput]
    "The name of the event."
    event_name: String!
    "The ID of the selected event type."
    gift_registry_type_uid: ID!
    "A message describing the event."
    message: String!
    preferred_delivery_method_code: String!
    "Indicates whether the registry is PRIVATE or PUBLIC."
    privacy_settings: GiftRegistryPrivacySettings!
    "The list of people who receive notifications about the registry."
    registrants: [AddGiftRegistryRegistrantInput]!
    "The shipping address for all gift registry items."
    shipping_address: GiftRegistryShippingAddressInput
    "Indicates whether the registry is ACTIVE or INACTIVE."
    status: GiftRegistryStatus!
    weekly_update_opt_in: Boolean
}

"Defines a new product review."
input CreateProductReviewInput {
    "The customer's nickname. Defaults to the customer name, if logged in."
    nickname: String!
    "The ratings details by category. For example, Price: 5 stars, Quality: 4 stars, etc."
    ratings: [ProductReviewRatingInput]!
    "The SKU of the reviewed product."
    sku: String!
    "The summary (title) of the review."
    summary: String!
    "The review text."
    text: String!
}

"An input object that identifies and describes a new requisition list."
input CreateRequisitionListInput {
    "An optional description of the requisition list."
    description: String
    "The name assigned to the requisition list."
    name: String!
}

"Defines the name and visibility of a new wish list."
input CreateWishlistInput {
    "The name of the new wish list."
    name: String!
    "Indicates whether the wish list is public or private."
    visibility: WishlistVisibilityEnum!
}

input CreditAccount {
    creditAccountNumber: String!
    rsaIdNumber: String!
}

"MRP Money short term insurance product"
input CreditAccountInsurancePlanInput {
    option: String!
    plan: String!
}

input CreditAccountPreScreenApplicationRequest {
    cellphoneNumber: String!
    dateOfBirth: String!
    employerName: String!
    employmentPeriod: String!
    firstName: String!
    firstName2: String
    genderId: Int!
    grossMonthlyIncome: Float!
    identityNumber: String!
    identityTypeId: Int!
    isCreditConsentGiven: Boolean!
    isUnderDebtReview: Boolean!
    occupationId: Int!
    repaymentPeriodId: Int!
    staffCode: String
    surname: String!
    titleId: Int!
}

input CreditAccountPurchaseAirtimeRequest {
    denomination: String!
    mobileNumber: String!
    pin: String!
    reference: Int!
    serviceProvider: String!
    serviceType: PurchaseAirtimeRequestType!
}

input CreditAccountPurchaseInsuranceRequest {
    accountNumber: String
    customerName: String
    emailAddress: String
    identityNumber: String!
    insuranceOption: String
    insurancePlan: String!
    mobileNumber: String
    requestType: PurchaseInsuranceRequestType!
}

input CreditAccountSaveCreditApplicationRequest {
    allowAnnualCreditLimitIncreases: Boolean
    allowPromotionalOffers: Boolean
    bestContactTime: String
    communicationQueueId: Int!
    companyName: String
    contractExpiryDate: String
    department: String
    donateToMRPFoundationId: Int
    emailAddress: String
    employeeNumber: String
    grossMonthlyIncome: Float
    homeTelephoneNumber: String
    insurancePlans: [CreditAccountInsurancePlanInput!]
    isInterestedInMobileContract: Boolean
    isInterestedMrPMobile: Boolean
    languageId: Int
    maritalStatusId: Int
    marketSectorId: Int
    monthlyDebtObligation: Float
    monthlyDeductions: Float
    monthlyOtherIncome: Float
    monthlyOtherLiving: Float
    monthlyRentBondPayment: Float
    newApplicationId: Int!
    numberOfDependants: Int
    occupationId: Int
    physicalAddressLine1: String
    physicalAddressLine2: String
    physicalAddressLine3: String
    physicalAddressPostalCode: Int
    physicalAddressPostalCodePostalCodeId: Int
    physicalAddressPostalCodePostalCountryId: Int
    physicalAddressPostalCodePostalTownId: Int
    postalAddress1: String
    postalAddress2: String
    postalAddress3: String
    postalAddressSameAsPhysical: String
    postalCode: Int
    postalCodePostCodeId: Int
    postalCodePostalCountryId: Int
    postalCodePostalTownId: Int
    preferredPayDayId: Int
    promotionCode: Int
    proofOfIncomeProvidedUpfront: Boolean
    receivePromotionByEmail: Boolean
    receivePromotionByPhone: Boolean
    receivePromotionBySMS: Boolean
    receivePromotionalOffers: Boolean
    relationshipCellphone: String
    relationshipFirstName: String
    relationshipHomeTelephone: String
    relationshipId: Int
    relationshipSurname: String
    relationshipTitleId: Int
    relationshipWorkTelephone: String
    residentialStatusId: Int
    shareBusinessPartnerInformation: Boolean
    statementTypeId: Int
    titleId: Int
    workTelephoneNumber: String
}

input CreditAccountStatementRequest {
    statementDate: String!
}

input CreditAccountSubmitCreditApplicationRequest {
    allowAnnualCreditLimitIncreases: Boolean!
    allowPromotionalOffers: Boolean!
    bestContactTime: String
    communicationQueueId: Int!
    companyName: String!
    contractExpiryDate: String
    department: String
    donateToMRPFoundationId: Int!
    emailAddress: String
    employeeNumber: String!
    grossMonthlyIncome: Float!
    homeTelephoneNumber: String
    insurancePlans: [CreditAccountInsurancePlanInput!]
    isInterestedInMobileContract: Boolean!
    isInterestedMrPMobile: Boolean
    languageId: Int!
    maritalStatusId: Int!
    marketSectorId: Int!
    monthlyDebtObligation: Float!
    monthlyDeductions: Float!
    monthlyOtherIncome: Float!
    monthlyOtherLiving: Float!
    monthlyRentBondPayment: Float!
    newApplicationId: Int!
    numberOfDependants: Int!
    occupationId: Int!
    physicalAddressLine1: String!
    physicalAddressLine2: String!
    physicalAddressLine3: String!
    physicalAddressPostalCode: Int!
    physicalAddressPostalCodePostalCodeId: Int!
    physicalAddressPostalCodePostalCountryId: Int!
    physicalAddressPostalCodePostalTownId: Int!
    postalAddress1: String!
    postalAddress2: String!
    postalAddress3: String!
    postalAddressSameAsPhysical: String!
    postalCode: Int!
    postalCodePostCodeId: Int!
    postalCodePostalCountryId: Int!
    postalCodePostalTownId: Int!
    preferredPayDayId: Int
    promotionCode: Int
    proofOfIncomeProvidedUpfront: Boolean!
    receivePromotionByEmail: Boolean
    receivePromotionByPhone: Boolean
    receivePromotionBySMS: Boolean
    receivePromotionalOffers: Boolean!
    relationshipCellphone: String
    relationshipFirstName: String
    relationshipHomeTelephone: String
    relationshipId: Int
    relationshipSurname: String
    relationshipTitleId: Int
    relationshipWorkTelephone: String
    residentialStatusId: Int!
    shareBusinessPartnerInformation: Boolean
    statementTypeId: Int!
    titleId: Int!
    workTelephoneNumber: String
}

input CreditAccountTransactionsRequest {
    transactionEndDate: String!
    transactionStartDate: String!
}

input CreditAccountUSSDCreditLimitIncreaseRequest {
    cellNumber: String!
    debtObligations: Int!
    expenses: Int!
    income: Int!
    otherIncome: Int!
    salaryDeductions: Int!
}

input CreditAccountValidateCreditApplicationRequest {
    deductions: Float!
    identityNumber: String!
    initials: String
    monthlyDebt: Float!
    monthlyExpense: Float!
    monthlyIncome: Float!
    monthlyRent: Float!
    otherMonthlyIncome: Float!
    surname: String
    title: String
}

"Required fields for Payflow Pro and Payments Pro credit card payments."
input CreditCardDetailsInput {
    "The credit card expiration month."
    cc_exp_month: Int!
    "The credit card expiration year."
    cc_exp_year: Int!
    "The last 4 digits of the credit card."
    cc_last_4: Int!
    "The credit card type."
    cc_type: String!
}

"Specifies the attribute code and value of a customer attribute."
input CustomerAddressAttributeInput {
    "The name assigned to the attribute."
    attribute_code: String!
    "The value assigned to the attribute."
    value: String!
}

"Contains details about a billing or shipping address."
input CustomerAddressInput {
    "The label of the saved address"
    address_label: String
    "The customer's city or town."
    city: String
    "The customer's company."
    company: String
    "The two-letter code representing the customer's country."
    country_code: CountryCodeEnum
    "Deprecated: use `country_code` instead."
    country_id: CountryCodeEnum
    "Deprecated: Custom attributes should not be put into container."
    custom_attributes: [CustomerAddressAttributeInput]
    "Indicates whether the address is the default billing address."
    default_billing: Boolean
    "Indicates whether the address is the default shipping address."
    default_shipping: Boolean
    "The customer's email"
    email: String
    "The customer's fax number."
    fax: String
    "The first name of the person associated with the billing/shipping address."
    firstname: String
    "The family name of the person associated with the billing/shipping address."
    lastname: String
    "The middle name of the person associated with the billing/shipping address."
    middlename: String
    "The customer's ZIP or postal code."
    postcode: String
    "An honorific, such as Dr., Mr., or Mrs."
    prefix: String
    "An object containing the region name, region code, and region ID."
    region: CustomerAddressRegionInput
    "An array of strings that define the street number and name."
    street: [String]
    "The suburb that the customer resides in"
    suburb: String
    "A value such as Sr., Jr., or III."
    suffix: String
    "The customer's telephone number."
    telephone: String
    "The customer's Tax/VAT number (for corporate customers)."
    vat_id: String
}

"Defines the customer's state or province."
input CustomerAddressRegionInput {
    "The state or province name."
    region: String
    "The address region code."
    region_code: String
    "The unique ID for a pre-defined region."
    region_id: Int
}

"An input object for creating a customer."
input CustomerCreateInput {
    "Indicates whether the customer has enabled remote shopping assistance."
    allow_remote_shopping_assistance: Boolean
    "The customer's date of birth."
    date_of_birth: String
    "Deprecated: Use `date_of_birth` instead."
    dob: String
    "The customer's email address."
    email: String!
    "The customer's first name."
    firstname: String!
    "The customer's gender (Male - 1, Female - 2)."
    gender: Int
    "Indicates whether the customer is subscribed to the company's newsletter."
    is_subscribed: Boolean
    "The customer's family name."
    lastname: String!
    "The customer's middle name."
    middlename: String
    "Customer mobile number"
    mobile_number: String
    "The customer's password."
    password: String
    "An honorific, such as Dr., Mr., or Mrs."
    prefix: String
    "A value such as Sr., Jr., or III."
    suffix: String
    "The customer's Tax/VAT number (for corporate customers)."
    taxvat: String
}

"An input object that assigns or updates customer attributes."
input CustomerInput {
    "Card Number"
    card_number: String
    "The customer's date of birth."
    date_of_birth: String
    "The default payment method code"
    default_payment_method: String
    "Deprecated: Use `date_of_birth` instead."
    dob: String
    "The customer's email address. Required when creating a customer."
    email: String
    "The customer's first name."
    firstname: String
    "The customer's gender (Male - 1, Female - 2)."
    gender: Int
    "Indicates whether the customer is subscribed to the company's newsletter."
    is_subscribed: Boolean
    "The customer's family name."
    lastname: String
    "The customer's middle name."
    middlename: String
    "Mobile Number of the customer"
    mobile_number: String
    "Local or International Passport Number"
    passport_number: String
    "The customer's password."
    password: String
    "An honorific, such as Dr., Mr., or Mrs."
    prefix: String
    "The RSA ID number"
    sa_id_number: String
    "A value such as Sr., Jr., or III."
    suffix: String
    "The customer's Tax/VAT number (for corporate customers)."
    taxvat: String
}

"Identifies the filter to use for filtering orders."
input CustomerOrdersFilterInput {
    "Filters by order date."
    date: FilterStringTypeInput
    "Filters by order delivery method."
    delivery_method: FilterStringTypeInput
    "Filters by order number."
    number: FilterStringTypeInput
    "Filters by order status."
    status: FilterStringTypeInput
    "Filters by order store code. Found using store config query"
    store_code: FilterStringTypeInput
    "Filters by order store ID. Found using store config query"
    store_view_id: FilterStringTypeInput
    "Filters by order website Id does not work anymore use store_code"
    website_id: FilterStringTypeInput
}

"An input object for updating a customer."
input CustomerUpdateInput {
    "Indicates whether the customer has enabled remote shopping assistance."
    allow_remote_shopping_assistance: Boolean
    b2b_preferred_collection_store: String
    b2b_preferred_delivery_method: String
    "Card Number"
    card_number: String
    "The customer's date of birth."
    date_of_birth: String
    "The default payment method code"
    default_payment_method: String
    "Deprecated: Use `date_of_birth` instead."
    dob: String
    "The customer's first name."
    firstname: String
    "The customer's gender (Male - 1, Female - 2)."
    gender: Int
    "Indicates whether the customer is subscribed to the company's newsletter."
    is_subscribed: Boolean
    "The customer's family name."
    lastname: String
    "The customer's middle name."
    middlename: String
    "Customer mobile number"
    mobile_number: String
    "Local or International Passport Number"
    passport_number: String
    "An honorific, such as Dr., Mr., or Mrs."
    prefix: String
    "The RSA ID number"
    sa_id_number: String
    "A value such as Sr., Jr., or III."
    suffix: String
    "The customer's Tax/VAT number (for corporate customers)."
    taxvat: String
}

"Defines a customizable option."
input CustomizableOptionInput {
    "The customizable option ID of the product."
    id: Int
    "The string value of the option."
    value_string: String!
}

input DeleteNegotiableQuotesInput {
    "A list of unique IDs for `NegotiableQuote` objects to delete."
    quote_uids: [ID]!
}

input DigitalPaymentCancelTransactionRequest {
    mrpAppVersion: String
    phoneManufacturer: String
    phoneModel: String
    phoneOS: String
    posReference: String!
}

input DigitalPaymentProcessPaymentRequest {
    amount: Float!
    clientApplication: String
    clientApplicationVersion: String
    clientReferenceCode: String!
    currencyCode: String!
    merchantReferenceCode: String!
    mid: String!
    mrpAppVersion: String
    paymentType: DigitalPaymentType!
    phoneManufacturer: String
    phoneModel: String
    phoneOS: String
    posReference: String!
    subscriptionId: String!
    wallet: DigitalPaymentType
}

input DigitalPaymentSendQRCodeRequest {
    accountNumber: String
    customerEmailAddress: String
    customerMobile: String
    customerName: String!
    customerSurname: String
    divisionId: String!
    magentoId: String
    sessionId: String!
    storeCode: String!
    tillId: String!
}

input DigitalPaymentTransactionDetailRequest {
    mrpAppVersion: String
    phoneManufacturer: String
    phoneModel: String
    phoneOS: String
    posReference: String!
}

"Defines a single downloadable product."
input DownloadableProductCartItemInput {
    "The ID and value of the option."
    customizable_options: [CustomizableOptionInput]
    "The quantity and SKU of the downloadable product."
    data: CartItemInput!
    "An array of objects containing the link_id of the downloadable product link."
    downloadable_product_links: [DownloadableProductLinksInput]
}

"Contains the link ID for the downloadable product."
input DownloadableProductLinksInput {
    "The unique ID of the downloadable product link."
    link_id: Int!
}

"Defines the dynamic block filter. The filter can identify the block type, location and IDs to return."
input DynamicBlocksFilterInput {
    "An array of dynamic block UIDs to filter on."
    dynamic_block_uids: [ID]
    "An array indicating the locations the dynamic block can be placed."
    locations: [DynamicBlockLocationEnum]
    "A value indicating the type of dynamic block to filter on."
    type: DynamicBlockTypeEnum!
}

input EmailDocketFilteredRequest {
    divisionIds: [String]
    endDate: String
    sortDirection: SLSortDirection
    sortField: EmailDocketSortField
    startDate: String
    storeLocationIds: [String]
}

input EmailDocketRequest {
    endDate: String
    startDate: String
}

"Contains details about a custom text attribute that the buyer entered."
input EnteredCustomAttributeInput {
    "A string that identifies the entered custom attribute."
    attribute_code: String!
    "The text or other entered value."
    value: String!
}

"Defines a customer-entered option."
input EnteredOptionInput {
    "The unique ID for a `CustomizableOptionInterface` object, such as a `CustomizableFieldOption`, `CustomizableFileOption`, or `CustomizableAreaOption` object."
    uid: ID!
    "Text the customer entered."
    value: String!
}

"Access token needed for Facebook login validation"
input FacebookTokenInput {
    token: String!
}

"Defines a filter that matches the input exactly."
input FilterEqualTypeInput {
    "Use this attribute to exactly match the specified string. For example, to filter on a specific category ID, specify a value such as `5`."
    eq: String
    "Use this attribute to filter on an array of values. For example, to filter on category IDs 4, 5, and 6, specify a value of `[\"4\", \"5\", \"6\"]`."
    in: [String]
}

"Defines a filter that performs a fuzzy search."
input FilterMatchTypeInput {
    "Use this attribute to exactly match the specified string. For example, to filter on a specific SKU, specify a value such as `24-MB01`."
    match: String
}

"Defines a filter that matches a range of values, such as prices or dates."
input FilterRangeTypeInput {
    "Use this attribute to specify the lowest possible value in the range."
    from: String
    "Use this attribute to specify the highest possible value in the range."
    to: String
}

"Defines a filter for an input string."
input FilterStringTypeInput {
    "Filters items that are exactly the same as the specified string."
    eq: String
    "Filters items that are exactly the same as entries specified in an array of strings."
    in: [String]
    "Defines a filter that performs a fuzzy search using the specified string."
    match: String
}

"Defines the comparison operators that can be used in a filter."
input FilterTypeInput {
    "Equals."
    eq: String
    finset: [String]
    "From. Must be used with the `to` field."
    from: String
    "Greater than."
    gt: String
    "Greater than or equal to."
    gteq: String
    "In. The value can contain a set of comma-separated values."
    in: [String]
    "Like. The specified value can contain % (percent signs) to allow matching of 0 or more characters."
    like: String
    "Less than."
    lt: String
    "Less than or equal to."
    lteq: String
    "More than or equal to."
    moreq: String
    "Not equal to."
    neq: String
    "Not in. The value can contain a set of comma-separated values."
    nin: [String]
    "Not null."
    notnull: String
    "Is null."
    null: String
    "To. Must be used with the `from` field."
    to: String
}

"Identifies which customer requires remote shopping assistance."
input GenerateCustomerTokenAsAdminInput {
    "The email address of the customer requesting remote shopping assistance."
    customer_email: String!
}

"Contains the gift card code."
input GiftCardAccountInput {
    "The applied gift card code."
    gift_card_code: String!
    "The gift card reference number"
    gift_card_reference_nr: String!
}

"Defines a gift message."
input GiftMessageInput {
    "The name of the sender."
    from: String!
    "The text of the gift message."
    message: String!
    "The name of the recepient."
    to: String!
}

"Defines a dynamic attribute."
input GiftRegistryDynamicAttributeInput {
    "A unique key for an additional attribute of the event."
    code: ID!
    "A string that describes a dynamic attribute."
    value: String!
}

"Defines a shipping address for a gift registry. Specify either `address_data` or the `address_id`. If both are provided, validation will fail."
input GiftRegistryShippingAddressInput {
    "Defines the shipping address for this gift registry."
    address_data: CustomerAddressInput
    "The ID assigned to this customer address."
    address_id: ID
}

input GiftcardPaymentInput {
    mrp_gift_card_amount: Float!
    mrp_gift_card_number: String!
}

"Application type, token ID and access token needed for Google login validation"
input GoogleTokenInput {
    access_token: String!
    application_type: Application!
    token_id: String!
}

"Contains a set of relative URLs that PayPal uses in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payments Pro Hosted Solution payment method."
input HostedProInput {
    "The relative URL of the page that PayPal redirects to when the buyer cancels the transaction in order to choose a different payment method. For example, if the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html."
    cancel_url: String!
    "The relative URL of the final confirmation page that PayPal redirects to upon payment success. For example, if the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html."
    return_url: String!
}

"Contains the required input to request the secure URL for Payments Pro Hosted Solution payment."
input HostedProUrlInput {
    "The unique ID that identifies the shopper's cart."
    cart_id: String!
}

input LabelRulesFilterInput {
    "Rule creation date"
    created_at: FilterTypeInput
    "Status of label rule"
    enabled: FilterTypeInput
    "Rule start date"
    from_date: FilterTypeInput
    "The label text on product page"
    label: FilterTypeInput
    "The label text on category page"
    list_label: FilterTypeInput
    "The label rule name"
    name: FilterTypeInput
    "Priority between label rules "
    priority: FilterTypeInput
    "The label rule id"
    rule_id: FilterTypeInput
    "Rule end date"
    to_date: FilterTypeInput
    "Date of the last modification of the rule"
    updated_at: FilterTypeInput
}

"If defined as an input, both latitude and longitude will need to be specified."
input Location {
    latitude: Float!
    longitude: Float!
    radius: Float
}

"An input object that defines the items in a requisition list to be moved."
input MoveItemsBetweenRequisitionListsInput {
    "An array of IDs representing products moved from one requisition list to another."
    requisitionListItemUids: [ID]!
}

input MrpMoneyAccountDetailsInput {
    mrp_money_account_number: String!
    rsa_id_number: String!
}

input MrpMoneytCartItemInput {
    customizable_options: [CustomizableOptionInput]
    data: MrpMoneytItemInput!
}

input MrpMoneytItemInput {
    custom_price: Float!
    quantity: Float!
    sku: String!
}

"Defines the billing or shipping address to be applied to the cart."
input NegotiableQuoteAddressInput {
    "The city specified for the billing or shipping address."
    city: String!
    "The company name."
    company: String
    "The country code and label for the billing or shipping address."
    country_code: String!
    "The first name of the company user."
    firstname: String!
    "The last name of the company user."
    lastname: String!
    "The ZIP or postal code of the billing or shipping address."
    postcode: String
    "A string that defines the state or province of the billing or shipping address."
    region: String
    "An integer that defines the state or province of the billing or shipping address."
    region_id: Int
    "Determines whether to save the address in the customer's address book. The default value is true."
    save_in_address_book: Boolean
    "An array containing the street for the billing or shipping address."
    street: [String]!
    "The telephone number for the billing or shipping address."
    telephone: String
}

"Defines the billing address."
input NegotiableQuoteBillingAddressInput {
    "Defines a billing address."
    address: NegotiableQuoteAddressInput
    "The unique ID of a `CustomerAddress` object."
    customer_address_uid: ID
    "Indicates whether to set the billing address to be the same as the existing shipping address on the negotiable quote."
    same_as_shipping: Boolean
    "Indicates whether to set the shipping address to be the same as this billing address."
    use_for_shipping: Boolean
}

"Contains the commend provided by the buyer."
input NegotiableQuoteCommentInput {
    "The comment provided by the buyer."
    comment: String!
}

"Defines a filter to limit the negotiable quotes to return."
input NegotiableQuoteFilterInput {
    "Filter by the ID of one or more negotiable quotes."
    ids: FilterEqualTypeInput
    "Filter by the negotiable quote name."
    name: FilterMatchTypeInput
}

"Specifies the updated quantity of an item."
input NegotiableQuoteItemQuantityInput {
    "The new quantity of the negotiable quote item."
    quantity: Float!
    "The unique ID of a `CartItemInterface` object."
    quote_item_uid: ID!
}

"Defines the payment method to be applied to the negotiable quote."
input NegotiableQuotePaymentMethodInput {
    "Payment method code"
    code: String!
    "The purchase order number. Optional for most payment methods."
    purchase_order_number: String
}

"Defines shipping addresses for the negotiable quote."
input NegotiableQuoteShippingAddressInput {
    "A shipping address."
    address: NegotiableQuoteAddressInput
    "An ID from the company user's address book that uniquely identifies the address to be used for shipping."
    customer_address_uid: ID
    "Text provided by the company user."
    customer_notes: String
}

"Defines the field to use to sort a list of negotiable quotes."
input NegotiableQuoteSortInput {
    "Whether to return results in ascending or descending order."
    sort_direction: SortEnum!
    "The specified sort field."
    sort_field: NegotiableQuoteSortableField!
}

input OrderSortOptions {
    "Sorting direction eg. ASC or DESC"
    direction: directionEnum
    "Sorting value eg. date or status or delivery_methods"
    value: String
}

"Contains required input for Payflow Express Checkout payments."
input PayflowExpressInput {
    "The unique ID of the PayPal user."
    payer_id: String!
    "The token returned by the createPaypalExpressToken mutation."
    token: String!
}

"A set of relative URLs that PayPal uses in response to various actions during the authorization process. Adobe Commerce prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payflow Link and Payments Advanced payment methods."
input PayflowLinkInput {
    "The relative URL of the page that PayPal redirects to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html."
    cancel_url: String!
    "The relative URL of the transaction error page that PayPal redirects to upon payment error. If the full URL to this page is https://www.example.com/paypal/action/error.html, the relative URL is paypal/action/error.html."
    error_url: String!
    "The relative URL of the order confirmation page that PayPal redirects to when the payment is successful and additional confirmation is not needed. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html."
    return_url: String!
}

"Contains information required to fetch payment token information for the Payflow Link and Payments Advanced payment methods."
input PayflowLinkTokenInput {
    "The unique ID that identifies the customer's cart."
    cart_id: String!
}

"Contains input for the Payflow Pro and Payments Pro payment methods."
input PayflowProInput {
    "Required input for credit card related information."
    cc_details: CreditCardDetailsInput!
    "Indicates whether details about the shopper's credit/debit card should be tokenized for later usage. Required only if Vault is enabled for the PayPal Payflow Pro payment integration."
    is_active_payment_token_enabler: Boolean
}

"Input required to complete payment. Applies to Payflow Pro and Payments Pro payment methods."
input PayflowProResponseInput {
    "The unique ID that identifies the shopper's cart."
    cart_id: String!
    "The payload returned from PayPal."
    paypal_payload: String!
}

"Contains input required to fetch payment token information for the Payflow Pro and Payments Pro payment methods."
input PayflowProTokenInput {
    "The unique ID that identifies the shopper's cart."
    cart_id: String!
    "A set of relative URLs that PayPal uses for callback."
    urls: PayflowProUrlInput!
}

"Contains a set of relative URLs that PayPal uses in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for the Payflow Pro and Payment Pro payment methods."
input PayflowProUrlInput {
    "The relative URL of the page that PayPal redirects to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html."
    cancel_url: String!
    "The relative URL of the transaction error page that PayPal redirects to upon payment error. If the full URL to this page is https://www.example.com/paypal/action/error.html, the relative URL is paypal/action/error.html."
    error_url: String!
    "The relative URL of the final confirmation page that PayPal redirects to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html."
    return_url: String!
}

"Defines the payment method."
input PaymentMethodInput {
    account: [GiftcardPaymentInput]
    braintree: BraintreeInput
    braintree_cc_vault: BraintreeCcVaultInput
    "The internal name for the payment method."
    code: String!
    "Required input for PayPal Hosted pro payments."
    hosted_pro: HostedProInput
    "Required input for Payflow Express Checkout payments."
    payflow_express: PayflowExpressInput
    "Required input for PayPal Payflow Link and Payments Advanced payments."
    payflow_link: PayflowLinkInput
    "Required input for PayPal Payflow Pro and Payment Pro payments."
    payflowpro: PayflowProInput
    "Required input for PayPal Payflow Pro vault payments."
    payflowpro_cc_vault: VaultTokenInput
    "Required input for Express Checkout and Payments Standard payments."
    paypal_express: PaypalExpressInput
    "The purchase order number. Optional for most payment methods."
    purchase_order_number: String
    token_hash: String
}

"Contains required input for Express Checkout and Payments Standard payments."
input PaypalExpressInput {
    "The unique ID of the PayPal user."
    payer_id: String!
    "The token returned by the `createPaypalExpressToken` mutation."
    token: String!
}

"Defines the attributes required to receive a payment token for Express Checkout and Payments Standard payment methods."
input PaypalExpressTokenInput {
    "The unique ID that identifies the customer's cart."
    cart_id: String!
    "The payment method code."
    code: String!
    "Indicates whether the buyer selected the quick checkout button. The default value is false."
    express_button: Boolean
    "A set of relative URLs that PayPal uses in response to various actions during the authorization process."
    urls: PaypalExpressUrlsInput!
    "Indicates whether the buyer clicked the PayPal credit button. The default value is false."
    use_paypal_credit: Boolean
}

"Contains a set of relative URLs that PayPal uses in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Express Checkout and Payments Standard payment methods."
input PaypalExpressUrlsInput {
    "The relative URL of the page that PayPal redirects to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html."
    cancel_url: String!
    "The relative URL of the page that PayPal redirects to when the payment has been put on hold for additional review. This condition mostly applies to ACH transactions, and is not applicable to most PayPal solutions. If the full URL to this page is https://www.example.com/paypal/action/success_pending.html, the relative URL is paypal/action/success_pending.html."
    pending_url: String
    "The relative URL of the final confirmation page that PayPal redirects to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html."
    return_url: String!
    "The relative URL of the order confirmation page that PayPal redirects to when the payment is successful and additional confirmation is not needed. Not applicable to most PayPal solutions. If the full URL to this page is https://www.example.com/paypal/action/success.html, the relative URL is paypal/action/success.html."
    success_url: String
}

"PickupLocationFilterInput defines the list of attributes and filters for the search."
input PickupLocationFilterInput {
    "Filter by city."
    city: FilterTypeInput
    "Filter by country."
    country_id: FilterTypeInput
    "Filter by pickup location name."
    name: FilterTypeInput
    "Filter by pickup location code."
    pickup_location_code: FilterTypeInput
    "Filter by postcode."
    postcode: FilterTypeInput
    "Filter by region."
    region: FilterTypeInput
    "Filter by region id."
    region_id: FilterTypeInput
    "Filter by street."
    street: FilterTypeInput
}

"PickupLocationSortInput specifies attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order."
input PickupLocationSortInput {
    "City where pickup location is placed."
    city: SortEnum
    "Name of the contact person."
    contact_name: SortEnum
    "Id of the country in two letters."
    country_id: SortEnum
    "Description of the pickup location."
    description: SortEnum
    "Distance to the address, requested by distance filter. Applicable only with distance filter. If distance sort order is present, all other sort orders will be ignored."
    distance: SortEnum
    "Contact email of the pickup location."
    email: SortEnum
    "Contact fax of the pickup location."
    fax: SortEnum
    "Geographic latitude where pickup location is placed."
    latitude: SortEnum
    "Geographic longitude where pickup location is placed."
    longitude: SortEnum
    "The pickup location name. Customer use this to identify the pickup location."
    name: SortEnum
    "Contact phone number of the pickup location."
    phone: SortEnum
    "A code assigned to pickup location to identify the source."
    pickup_location_code: SortEnum
    "Postcode where pickup location is placed."
    postcode: SortEnum
    "Name of the region."
    region: SortEnum
    "Id of the region."
    region_id: SortEnum
    "Street where pickup location is placed."
    street: SortEnum
}

input PlaceKioskOrderInput {
    "A valid string cart ID."
    cart_id: String!
    "The Kiosk ID of the Kiosk that the order was placed from."
    kiosk_id: String!
}

"Specifies the negotiable quote to convert to an order."
input PlaceNegotiableQuoteOrderInput {
    "The unique ID of a `NegotiableQuote` object."
    quote_uid: ID!
}

"Specifies the quote to be converted to an order."
input PlaceOrderInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
}

"Defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for."
input ProductAttributeFilterInput {
    "Attribute label: Text"
    blog_content: FilterMatchTypeInput
    "Deprecated: use `category_uid` to filter product by category ID."
    category_id: FilterEqualTypeInput
    "Filter product by the unique ID for a `CategoryInterface` object."
    category_uid: FilterEqualTypeInput
    "Attribute label: Description"
    description: FilterMatchTypeInput
    "Attribute label: Hero Product"
    is_hero_product: FilterEqualTypeInput
    "Attribute label: mrp_b_online_category"
    mrp_b_online_category: FilterEqualTypeInput
    "Attribute label: mrp_b_onlinesubcategory"
    mrp_b_onlinesubcategory: FilterEqualTypeInput
    "Attribute label: Size"
    mrp_bottom_size: FilterEqualTypeInput
    "Attribute label: Brand"
    mrp_brand: FilterEqualTypeInput
    "Attribute label: Colour"
    mrp_colour: FilterEqualTypeInput
    "Attribute label: Colour Group"
    mrp_colour_group: FilterEqualTypeInput
    "Attribute label: Pattern"
    mrp_e_pattern: FilterEqualTypeInput
    "Attribute label: Garment Length"
    mrp_garment_length: FilterEqualTypeInput
    "Attribute label: Neckline"
    mrp_neckline: FilterEqualTypeInput
    "Attribute label: Occasion"
    mrp_occasion: FilterEqualTypeInput
    "Attribute label: Baby Boys Online Category"
    mrp_online_baby_b_category: FilterEqualTypeInput
    "Attribute label: Baby Boys Sub Category"
    mrp_online_baby_b_sub_category: FilterEqualTypeInput
    "Attribute label: Baby Girls Online Category"
    mrp_online_baby_g_category: FilterEqualTypeInput
    "Attribute label: Baby Girls Sub Category"
    mrp_online_baby_g_sub_category: FilterEqualTypeInput
    "Attribute label: Boys Online Category"
    mrp_online_bb_category: FilterEqualTypeInput
    "Attribute label: Boys Online Sub Category"
    mrp_online_bb_sub_category: FilterEqualTypeInput
    "Attribute label: Girls Online Category"
    mrp_online_bg_category: FilterEqualTypeInput
    "Attribute label: Girls Online Sub Category"
    mrp_online_bg_sub_category: FilterEqualTypeInput
    "Attribute label: Ladies Online Category"
    mrp_online_category: FilterEqualTypeInput
    "Attribute label: Mens Online Category"
    mrp_online_m_category: FilterEqualTypeInput
    "Attribute label: Mens Online Sub Category"
    mrp_online_m_sub_category: FilterEqualTypeInput
    "Attribute label: Pre Boys Online Category"
    mrp_online_pb_category: FilterEqualTypeInput
    "Attribute label: Pre Boys Online Sub Category"
    mrp_online_pb_sub_category: FilterEqualTypeInput
    "Attribute label: Pre Girls Online Category"
    mrp_online_pg_category: FilterEqualTypeInput
    "Attribute label: Pre Girls Online Sub Category"
    mrp_online_pg_sub_category: FilterEqualTypeInput
    "Attribute label: Ladies Online Sub Category"
    mrp_online_sub_category: FilterEqualTypeInput
    "Attribute label: Mens Shirt Pattern"
    mrp_pattern_mens_shirts: FilterEqualTypeInput
    "Attribute label: Shape"
    mrp_shape: FilterEqualTypeInput
    "Attribute label: Size"
    mrp_shoe_size: FilterEqualTypeInput
    "Attribute label: Shoe Size"
    mrp_shoesize_bigkids: FilterEqualTypeInput
    "Attribute label: mrp_shop by trend"
    mrp_shopbytrend: FilterEqualTypeInput
    "Attribute label: Size"
    mrp_size: FilterEqualTypeInput
    "Attribute label: Sleeve Length"
    mrp_sleeve_length: FilterEqualTypeInput
    "Attribute label: Underwear Size"
    mrp_underwear_l_size: FilterEqualTypeInput
    "Attribute label: Size Underwear"
    mrp_underwear_size: FilterEqualTypeInput
    "Attribute label: Brand (MRPH)"
    mrph_brand: FilterEqualTypeInput
    "Attribute label: Colour"
    mrph_colour: FilterEqualTypeInput
    "Attribute label: Colour"
    mrph_colour_group: FilterEqualTypeInput
    "Attribute label: Fabric"
    mrph_fabric: FilterEqualTypeInput
    "Attribute label: Shape"
    mrph_shape: FilterEqualTypeInput
    "Attribute label: Size"
    mrph_size: FilterEqualTypeInput
    "Attribute label: mrpm_brands"
    mrpm_brands: FilterEqualTypeInput
    "Attribute label: mrpm_colour"
    mrpm_colour: FilterEqualTypeInput
    "Attribute label: mrpm_network_provider"
    mrpm_network_provider: FilterEqualTypeInput
    "Attribute label: mrpm_size"
    mrpm_size: FilterEqualTypeInput
    "Attribute label: Brand (MRPS)"
    mrps_brand: FilterEqualTypeInput
    "Attribute label: Colour"
    mrps_colour: FilterEqualTypeInput
    "Attribute label: Colour Group"
    mrps_colour_group: FilterEqualTypeInput
    "Attribute label: Length"
    mrps_dimension: FilterEqualTypeInput
    "Attribute label: Garment Length"
    mrps_garment_length: FilterEqualTypeInput
    "Attribute label: Type"
    mrps_neckline: FilterEqualTypeInput
    "Attribute label: Outdoor Equipment Size"
    mrps_size_outdoor_equip: FilterEqualTypeInput
    "Attribute label: Size"
    mrps_size_outerwear: FilterEqualTypeInput
    "Attribute label: Size Shoe"
    mrps_size_shoes: FilterEqualTypeInput
    "Attribute label: Size Sports"
    mrps_size_sports: FilterEqualTypeInput
    "Attribute label: Bra Size"
    mrps_size_underwear_bras: FilterEqualTypeInput
    "Attribute label: Sub Category"
    mrps_sub_category: FilterEqualTypeInput
    "Attribute label: Sub Sub Category"
    mrps_sub_sub_category: FilterEqualTypeInput
    "Attribute label: Product Name"
    name: FilterMatchTypeInput
    "Attribute label: Price"
    price: FilterRangeTypeInput
    "Attribute label: Search Keywords"
    search_keywords: FilterMatchTypeInput
    "Attribute label: Short Description"
    short_description: FilterMatchTypeInput
    "Attribute label: SKU"
    sku: FilterEqualTypeInput
    "Attribute label: Special Price"
    special_price: FilterRangeTypeInput
    "Attribute label: Colour Group"
    ss_colour_group: FilterEqualTypeInput
    "Attribute label: Size"
    ss_size: FilterEqualTypeInput
    "The part of the URL that identifies the product"
    url_key: FilterEqualTypeInput
}

"Specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. It's possible to sort products using searchable attributes with enabled 'Use in Filter Options' option"
input ProductAttributeSortInput {
    "Attribute label: Hero Product"
    is_hero_product: SortEnum
    "Attribute label: Product Name"
    name: SortEnum
    "Sort by the 'new to' date assigned to each product."
    news_to_date: SortEnum
    "Sort by category merchandising order"
    nosto_personalized: SortEnum
    "Sort by the position assigned to each product."
    position: SortEnum
    "Attribute label: Price"
    price: SortEnum
    "Sort by the search relevance score (default)."
    relevance: SortEnum
    "Attribute label: Special Price"
    special_price: SortEnum
}

"ProductFilterInput is deprecated, use @ProductAttributeFilterInput instead. ProductFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for."
input ProductFilterInput {
    "The category ID the product belongs to."
    category_id: FilterTypeInput
    "The product's country of origin."
    country_of_manufacture: FilterTypeInput
    "The timestamp indicating when the product was created."
    created_at: FilterTypeInput
    "The name of a custom layout."
    custom_layout: FilterTypeInput
    "XML code that is applied as a layout update to the product page."
    custom_layout_update: FilterTypeInput
    "Detailed information about the product. The value can include simple HTML tags."
    description: FilterTypeInput
    "Indicates whether a gift message is available."
    gift_message_available: FilterTypeInput
    "Indicates whether additional attributes have been created for the product."
    has_options: FilterTypeInput
    "The relative path to the main image on the product page."
    image: FilterTypeInput
    "The label assigned to a product image."
    image_label: FilterTypeInput
    "Indicates whether the product can be returned."
    is_returnable: FilterTypeInput
    "A number representing the product's manufacturer."
    manufacturer: FilterTypeInput
    "The numeric maximal price of the product. Do not include the currency code."
    max_price: FilterTypeInput
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: FilterTypeInput
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: FilterTypeInput
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: FilterTypeInput
    "The numeric minimal price of the product. Do not include the currency code."
    min_price: FilterTypeInput
    "The product name. Customers use this name to identify the product."
    name: FilterTypeInput
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    news_from_date: FilterTypeInput
    "The end date for new product listings."
    news_to_date: FilterTypeInput
    "If the product has multiple options, determines where they appear on the product page."
    options_container: FilterTypeInput
    "The keyword required to perform a logical OR comparison."
    or: ProductFilterInput
    "The price of an item."
    price: FilterTypeInput
    "Indicates whether the product has required options."
    required_options: FilterTypeInput
    "A short description of the product. Its use depends on the theme."
    short_description: FilterTypeInput
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: FilterTypeInput
    "The relative path to the small image, which is used on catalog pages."
    small_image: FilterTypeInput
    "The label assigned to a product's small image."
    small_image_label: FilterTypeInput
    "The beginning date that a product has a special price."
    special_from_date: FilterTypeInput
    "The discounted price of the product. Do not include the currency code."
    special_price: FilterTypeInput
    "The end date that a product has a special price."
    special_to_date: FilterTypeInput
    "The file name of a swatch image."
    swatch_image: FilterTypeInput
    "The relative path to the product's thumbnail image."
    thumbnail: FilterTypeInput
    "The label assigned to a product's thumbnail image."
    thumbnail_label: FilterTypeInput
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: FilterTypeInput
    "The timestamp indicating when the product was updated."
    updated_at: FilterTypeInput
    "The part of the URL that identifies the product"
    url_key: FilterTypeInput
    url_path: FilterTypeInput
    "The weight of the item, in units defined by the store."
    weight: FilterTypeInput
}

"Product Information used for Pickup Locations search."
input ProductInfoInput {
    "Product SKU."
    sku: String!
}

"Contains the reviewer's rating for a single aspect of a review."
input ProductReviewRatingInput {
    "An encoded rating ID."
    id: String!
    "An encoded rating value ID."
    value_id: String!
}

"Deprecated. Use `ProductAttributeSortInput` instead. Specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order."
input ProductSortInput {
    "The product's country of origin."
    country_of_manufacture: SortEnum
    "The timestamp indicating when the product was created."
    created_at: SortEnum
    "The name of a custom layout."
    custom_layout: SortEnum
    "XML code that is applied as a layout update to the product page."
    custom_layout_update: SortEnum
    "Detailed information about the product. The value can include simple HTML tags."
    description: SortEnum
    "Indicates whether a gift message is available."
    gift_message_available: SortEnum
    "Indicates whether additional attributes have been created for the product."
    has_options: SortEnum
    "The relative path to the main image on the product page."
    image: SortEnum
    "The label assigned to a product image."
    image_label: SortEnum
    "Indicates whether the product can be returned."
    is_returnable: SortEnum
    "A number representing the product's manufacturer."
    manufacturer: SortEnum
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: SortEnum
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: SortEnum
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: SortEnum
    "The product name. Customers use this name to identify the product."
    name: SortEnum
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    news_from_date: SortEnum
    "The end date for new product listings."
    news_to_date: SortEnum
    "Sort by Nosto category merchandising"
    nosto_personalized: SortEnum
    "If the product has multiple options, determines where they appear on the product page."
    options_container: SortEnum
    "The price of the item."
    price: SortEnum
    "Indicates whether the product has required options."
    required_options: SortEnum
    "A short description of the product. Its use depends on the theme."
    short_description: SortEnum
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: SortEnum
    "The relative path to the small image, which is used on catalog pages."
    small_image: SortEnum
    "The label assigned to a product's small image."
    small_image_label: SortEnum
    "The beginning date that a product has a special price."
    special_from_date: SortEnum
    "The discounted price of the product."
    special_price: SortEnum
    "The end date that a product has a special price."
    special_to_date: SortEnum
    "Indicates the criteria to sort swatches."
    swatch_image: SortEnum
    "The relative path to the product's thumbnail image."
    thumbnail: SortEnum
    "The label assigned to a product's thumbnail image."
    thumbnail_label: SortEnum
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: SortEnum
    "The timestamp indicating when the product was updated."
    updated_at: SortEnum
    "The part of the URL that identifies the product"
    url_key: SortEnum
    url_path: SortEnum
    "The weight of the item, in units defined by the store."
    weight: SortEnum
}

input PurchaserDetails {
    purchaser_email: String
    purchaser_name: String!
}

input RecipientDetails {
    "Email of the recipient."
    email: String!
    "Name of the recipient."
    name: String!
}

"Specifies the cart from which to remove a coupon."
input RemoveCouponFromCartInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
}

"Defines the input required to run the `removeGiftCardFromCart` mutation."
input RemoveGiftCardFromCartInput {
    "The unique ID that identifies the customer's cart."
    cart_id: String!
    "The gift card code to be removed to the cart."
    gift_card_code: String!
}

"Specifies which items to remove from the cart."
input RemoveItemFromCartInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "Deprecated. Use `cart_item_uid` instead."
    cart_item_id: Int
    "Required field. The unique ID for a `CartItemInterface` object."
    cart_item_uid: ID
}

"Defines the items to remove from the specified negotiable quote."
input RemoveNegotiableQuoteItemsInput {
    "An array of IDs indicating which items to remove from the negotiable quote."
    quote_item_uids: [ID]!
    "The unique ID of a `NegotiableQuote` object."
    quote_uid: ID!
}

"Defines which products to remove from a compare list."
input RemoveProductsFromCompareListInput {
    "An array of product IDs to remove from the compare list."
    products: [ID]!
    "The unique identifier of the compare list to modify."
    uid: ID!
}

"Defines the tracking information to delete."
input RemoveReturnTrackingInput {
    "The unique ID for a `ReturnShippingTracking` object."
    return_shipping_tracking_uid: ID!
}

"Defines the input required to run the `removeStoreCreditFromCart` mutation."
input RemoveStoreCreditFromCartInput {
    "The unique ID that identifies the customer's cart."
    cart_id: String!
}

input ReorderInput {
    cart_id: String!
    order_id: Int!
}

"Defines properties of a negotiable quote request."
input RequestNegotiableQuoteInput {
    "The cart ID of the buyer requesting a new negotiable quote."
    cart_id: ID!
    "Comments the buyer entered to describe the request."
    comment: NegotiableQuoteCommentInput!
    "The name the buyer assigned to the negotiable quote request."
    quote_name: String!
}

"Contains information needed to start a return request."
input RequestReturnInput {
    "Text the buyer entered that describes the reason for the refund request."
    comment_text: String
    "The email address the buyer enters to receive notifications about the status of the return."
    contact_email: String
    "An array of items to be returned."
    items: [RequestReturnItemInput]!
    "The unique ID for a `Order` object."
    order_uid: ID!
}

"Contains details about an item to be returned."
input RequestReturnItemInput {
    "Details about a custom attribute that was entered."
    entered_custom_attributes: [EnteredCustomAttributeInput]
    "The unique ID for a `OrderItemInterface` object."
    order_item_uid: ID!
    "The quantity of the item to be returned."
    quantity_to_return: Float!
    "An array of selected custom option IDs associated with the item to be returned. For example, the IDs for the selected color and size of a configurable product."
    selected_custom_attributes: [SelectedCustomAttributeInput]
}

"Defines requisition list filters."
input RequisitionListFilterInput {
    "Filter by the display name of the requisition list."
    name: FilterMatchTypeInput
    "Filter requisition lists by one or more requisition list IDs."
    uids: FilterEqualTypeInput
}

"Defines the items to add."
input RequisitionListItemsInput {
    "Entered option IDs."
    entered_options: [EnteredOptionInput]
    "For configurable products, the SKU of the parent product."
    parent_sku: String
    "The quantity of the product to add."
    quantity: Float
    "Selected option IDs."
    selected_options: [String]
    "The product SKU."
    sku: String!
}

input ResetCustomerPasswordInput {
    email: String!
    newPassword: String!
    resetToken: String!
}

input SLCompanyAdminInput {
    "The email address of the company administrator."
    email: String!
    "The company administrator's first name."
    firstname: String!
    "The company administrator's gender (Male - 1, Female - 2, Not Specified - 3)."
    gender: Int
    "The job title of the company administrator."
    jobTitle: String
    "The company administrator's last name."
    lastname: String!
}

input SLCompanyLegalAddressInput {
    "The city where the company is registered to conduct business."
    city: String!
    "The company's country ID. Use the countries query to get this value."
    countryCode: SLCountryCodeEnum!
    "The postal code of the company."
    postcode: String!
    "An object containing the region name and/or region ID where the company is registered to conduct business."
    region: SLCustomerAddressRegionInput!
    "An array of strings that define the street address where the company is registered to conduct business."
    street: [String]!
    "The primary phone number of the company."
    telephone: String!
}

input SLCreateCompanyRequest {
    businessType: Int!
    cardHolderAddress: SLCompanyLegalAddressInput
    "Defines the company administrator."
    companyAdmin: SLCompanyAdminInput!
    companyCardHolder: SLCustomerInput
    "The email address of the company contact."
    companyEmail: String!
    "The name of the company to create"
    companyName: String!
    "Defines legal address data of the company."
    legalAddress: SLCompanyLegalAddressInput!
    "The full legal name of the company."
    legalName: String
    preferredCollectionStore: String
    preferredShippingMethod: String!
    vatRegistrationNumber: String
    website: String!
}

input SLCustomerAddressRegionInput {
    region: String
    regionCode: String
    regionId: Int!
}

input SLCustomerInput {
    dateOfBirth: String
    defaultPaymentMethod: String
    email: String!
    firstname: String!
    "The customer's gender (Male - 1, Female - 2)."
    gender: Int
    isSubscribed: Boolean
    lastname: String!
    middlename: String
    mobileNumber: String
    passportNumber: String
    password: String
    prefix: String
    saIdNumber: String
    suffix: String
    taxvat: String
}

input SLUpdateCompanyCardNumberRequest {
    cardNumber: String!
    customerCompany: String!
    email: String!
}

input SLUpdateCompanyStatusRequest {
    companyId: String!
    companyStatus: SLCompanyStatus!
}

"Contains details about an attribute the buyer selected."
input SelectedCustomAttributeInput {
    "A string that identifies the selected attribute."
    attribute_code: String!
    "The unique ID for a `CustomAttribute` object of a selected custom attribute."
    value: ID!
}

"Defines the referenced product and the email sender and recipients."
input SendEmailToFriendInput {
    "The ID of the product that the sender is referencing."
    product_id: Int!
    "An array containing information about each recipient."
    recipients: [SendEmailToFriendRecipientInput]!
    "Information about the customer and the content of the message."
    sender: SendEmailToFriendSenderInput!
}

"Contains details about a recipient."
input SendEmailToFriendRecipientInput {
    "The email address of the recipient."
    email: String!
    "The name of the recipient."
    name: String!
}

"Contains details about the sender."
input SendEmailToFriendSenderInput {
    "The email address of the sender."
    email: String!
    "The text of the message to be sent."
    message: String!
    "The name of the sender."
    name: String!
}

"Specifies which negotiable quote to send for review."
input SendNegotiableQuoteForReviewInput {
    "A comment for the seller to review."
    comment: NegotiableQuoteCommentInput
    "The unique ID of a `NegotiableQuote` object."
    quote_uid: ID!
}

input SendWishlistEmailInput {
    recipients: [RecipientDetails]!
    sender: SenderDetails!
    subject: String!
    wishlist_id: Int!
    wishlist_url: String!
}

input SenderDetails {
    "Email of the sender."
    email: String!
    "The content of the wishlist share email i.e. 'Checkout my wishlist https://www.mrp.loc/wishlist/shared/index/code/lnFVZQ...'."
    message: String!
    "Name of the sender."
    name: String!
}

input SetB2BCustomerDeliveryMethodInput {
    company_id: String
    delivery_method: String!
}

"Sets the billing address."
input SetBillingAddressOnCartInput {
    "The billing address."
    billing_address: BillingAddressInput!
    "The unique ID of a `Cart` object."
    cart_id: String!
}

"Defines the gift options applied to the cart."
input SetGiftOptionsOnCartInput {
    "The unique ID that identifies the shopper's cart."
    cart_id: String!
    "Gift message details for the cart."
    gift_message: GiftMessageInput
    "Whether customer requested gift receipt for the cart."
    gift_receipt_included: Boolean!
    "The unique ID for a `GiftWrapping` object to be used for the cart."
    gift_wrapping_id: ID
    "Whether customer requested printed card for the cart."
    printed_card_included: Boolean!
}

"Defines the guest email and cart."
input SetGuestEmailOnCartInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "The email address of the guest."
    email: String!
}

"Sets the billing address."
input SetNegotiableQuoteBillingAddressInput {
    "The billing address to be added."
    billing_address: NegotiableQuoteBillingAddressInput!
    "The unique ID of a `NegotiableQuote` object."
    quote_uid: ID!
}

"Defines the payment method of the specified negotiable quote."
input SetNegotiableQuotePaymentMethodInput {
    "The payment method to be assigned to the negotiable quote."
    payment_method: NegotiableQuotePaymentMethodInput!
    "The unique ID of a `NegotiableQuote` object."
    quote_uid: ID!
}

"Defines the shipping address to assign to the negotiable quote."
input SetNegotiableQuoteShippingAddressInput {
    "The unique ID of a `CustomerAddress` object."
    customer_address_id: ID
    "The unique ID of a `NegotiableQuote` object."
    quote_uid: ID!
    "An array of shipping addresses to apply to the negotiable quote."
    shipping_addresses: [NegotiableQuoteShippingAddressInput]
}

"Defines the shipping method to apply to the negotiable quote."
input SetNegotiableQuoteShippingMethodsInput {
    "The unique ID of a `NegotiableQuote` object."
    quote_uid: ID!
    "An array of shipping methods to apply to the negotiable quote."
    shipping_methods: [ShippingMethodInput]!
}

"Applies a payment method to the quote."
input SetPaymentMethodAndPlaceOrderInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "The payment method data to apply to the cart."
    payment_method: PaymentMethodInput!
}

"Applies a payment method to the cart."
input SetPaymentMethodOnCartInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "The payment method data to apply to the cart."
    payment_method: PaymentMethodInput!
}

input SetPushNotifyTokenOnCartInput {
    cart_id: String!
    push_token: String!
}

"Specifies an array of addresses to use for shipping."
input SetShippingAddressesOnCartInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "An array of shipping addresses."
    shipping_addresses: [ShippingAddressInput]!
}

"Applies one or shipping methods to the cart."
input SetShippingMethodsOnCartInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "An array of shipping methods."
    shipping_methods: [ShippingMethodInput]!
}

"Defines a gift registry invitee."
input ShareGiftRegistryInviteeInput {
    "The email address of the gift registry invitee."
    email: String!
    "The name of the gift registry invitee."
    name: String!
}

"Defines the sender of an invitation to view a gift registry."
input ShareGiftRegistrySenderInput {
    "A brief message from the sender."
    message: String!
    "The sender of the gift registry invitation."
    name: String!
}

"Defines a single shipping address."
input ShippingAddressInput {
    "Defines a shipping address."
    address: CartAddressInput
    "An ID from the customer's address book that uniquely identifies the address to be used for shipping."
    customer_address_id: Int
    "Text provided by the shopper."
    customer_notes: String
    "The MRP company_store_id code of Pickup Location which will be used for In-Store Pickup."
    mrp_pickup_location_code: String
    "The code of Pickup Location which will be used for In-Store Pickup."
    pickup_location_code: String
    "Set shipping address same as billing"
    same_as_billing: Boolean
}

"Defines the shipping carrier and method."
input ShippingMethodInput {
    "A string that identifies a commercial carrier or an offline delivery method."
    carrier_code: String!
    "A string that indicates which service a commercial carrier will use to ship items. For offline delivery methods, this value is similar to the label displayed on the checkout page."
    method_code: String!
}

"Defines a single product to add to the cart."
input SimpleProductCartItemInput {
    "An array that defines customizable options for the product."
    customizable_options: [CustomizableOptionInput]
    "An object containing the `sku`, `quantity`, and other relevant information about the product."
    data: CartItemInput!
}

input StoreAttributeInput {
    code: Int!
    "Name is not required and is simply used to check against the value of the code, i.e. whether the correct name has been assigned to the correct code."
    name: String
}

"Filter collection stores by name, limit and/or store attributes. Combining types will result in the filters taking the following order of preference: Attributes > Name > Limit."
input StoreFilter {
    "Filter that allows the stores to be filtered according to stores that contain certain attributes. Attributes obtainable via the getStoreFilterAttributes query."
    attribute: [StoreAttributeInput]
    "Filter stores by limiting the number of stores returned."
    limit: Int
    "Filter stores by store name."
    name: String
}

input StoreStockRequest {
    latitude: String!
    longitude: String!
    minimumQuantity: Int
    sku: String!
}

input StoreTypePreferenceEnum {
    "Use ONLINE for online orders and INSTORE for in store orders"
    store_type_preference_enum: storeEnum
}

input UpdateCardNumberInput {
    "Query by card_number."
    card_number: String!
    "Query by customer_company."
    customer_company: String!
    "Customer email for which the card update request is raised."
    email: String!
}

"Modifies the specified items in the cart."
input UpdateCartItemsInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "An array of items to be updated."
    cart_items: [CartItemUpdateInput]!
}

input UpdateCompanyStatusInput {
    company_status: CompanyStatus
    "Company uId as received in createCompany response."
    company_uid: ID!
}

"Defines updates to a `GiftRegistry` object."
input UpdateGiftRegistryInput {
    daily_update_opt_in: Boolean
    "Additional attributes specified as a code-value pair. Unspecified dynamic attributes are not changed."
    dynamic_attributes: [GiftRegistryDynamicAttributeInput]
    "The updated name of the event."
    event_name: String
    "The updated message describing the event."
    message: String
    preferred_delivery_method_code: String
    "Indicates whether the gift registry is PRIVATE or PUBLIC."
    privacy_settings: GiftRegistryPrivacySettings
    "The updated shipping address for all gift registry items."
    shipping_address: GiftRegistryShippingAddressInput
    "Indicates whether the gift registry is ACTIVE or INACTIVE."
    status: GiftRegistryStatus
    weekly_update_opt_in: Boolean
}

"Defines updates to an item in a gift registry."
input UpdateGiftRegistryItemInput {
    "The unique ID of a `giftRegistryItem` object."
    gift_registry_item_uid: ID!
    "The updated description of the item."
    note: String
    "The updated quantity of the gift registry item."
    quantity: Float!
}

"Defines updates to an existing registrant."
input UpdateGiftRegistryRegistrantInput {
    "As a result of the update, only the values of provided attributes will be affected. If the attribute is missing in the request, its value will not be changed."
    dynamic_attributes: [GiftRegistryDynamicAttributeInput]
    "The updated email address of the registrant."
    email: String
    "The updated first name of the registrant."
    firstname: String
    "The unique ID of a `giftRegistryRegistrant` object."
    gift_registry_registrant_uid: ID!
    "The updated last name of the registrant."
    lastname: String
}

"Specifies the items to update."
input UpdateNegotiableQuoteQuantitiesInput {
    "An array of items to update."
    items: [NegotiableQuoteItemQuantityInput]!
    "The unique ID of a `NegotiableQuote` object."
    quote_uid: ID!
}

"An input object that defines which requistion list characteristics to update."
input UpdateRequisitionListInput {
    "The updated description of the requisition list."
    description: String
    "The new name of the requisition list."
    name: String!
}

"Defines which items in a requisition list to update."
input UpdateRequisitionListItemsInput {
    "An array of customer-entered options."
    entered_options: [EnteredOptionInput]
    "The ID of the requisition list item to update."
    item_id: ID!
    "The new quantity of the item."
    quantity: Float
    "An array of selected option IDs."
    selected_options: [String]
}

"Contains required input for payment methods with Vault support."
input VaultTokenInput {
    "The public hash of the payment token."
    public_hash: String!
}

"Defines a single product to add to the cart."
input VirtualProductCartItemInput {
    "An array that defines customizable options for the product."
    customizable_options: [CustomizableOptionInput]
    "An object containing the `sku`, `quantity`, and other relevant information about the product."
    data: CartItemInput!
}

"Specifies the IDs of items to copy and their quantities."
input WishlistItemCopyInput {
    "The quantity of this item to copy to the destination wish list. This value can't be greater than the quantity in the source wish list."
    quantity: Float
    "The unique ID of the `WishlistItemInterface` object to be copied."
    wishlist_item_id: ID!
}

"Defines the items to add to a wish list."
input WishlistItemInput {
    "An array of options that the customer entered."
    entered_options: [EnteredOptionInput]
    "For complex product types, the SKU of the parent product."
    parent_sku: String
    "The amount or number of items to add."
    quantity: Float!
    "An array of strings corresponding to options the customer selected."
    selected_options: [ID]
    "The SKU of the product to add. For complex product types, specify the child product SKU."
    sku: String!
}

"Specifies the IDs of the items to move and their quantities."
input WishlistItemMoveInput {
    "The quantity of this item to move to the destination wish list. This value can't be greater than the quantity in the source wish list."
    quantity: Float
    "The unique ID of the `WishlistItemInterface` object to be moved."
    wishlist_item_id: ID!
}

"Defines updates to items in a wish list."
input WishlistItemUpdateInput {
    "Customer-entered comments about the item."
    description: String
    "An array of options that the customer entered."
    entered_options: [EnteredOptionInput]
    "The new amount or number of this item."
    quantity: Float
    "An array of strings corresponding to options the customer selected."
    selected_options: [ID]
    "The unique ID for a `WishlistItemInterface` object."
    wishlist_item_id: ID!
}

"Assigns a specific `cart_id` to the empty cart."
input createEmptyCartInput {
    "The ID to assign to the cart."
    cart_id: String
}
